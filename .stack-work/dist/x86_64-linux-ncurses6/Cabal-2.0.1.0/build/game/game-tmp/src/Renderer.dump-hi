
==================== FINAL INTERFACE ====================
2018-06-04 18:10:19.257964545 UTC

interface main:Renderer 8022
  interface hash: cc52a851f34dcfcfbf52eca85d31c786
  ABI hash: 785bbc0357f146ca46489bfa58a32a88
  export-list hash: 12249b92f8ba4308c004e3f97d45a860
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 28d311eb40bc72404e7ce86744f46594
  sig of: Nothing
  used TH splices: False
  where
exports:
  Renderer.roundSDLRect
  Renderer.Renderer{Renderer.drawBg Renderer.drawBtnToScreen Renderer.drawObjects Renderer.drawObjectsWithDt Renderer.drawPlayer Renderer.drawRectToScreen Renderer.drawScore Renderer.drawScreenOverlay Renderer.drawTextToScreen Renderer.drawTextureToScreen Renderer.drawWalls Renderer.presentRenderer Renderer.toScreenCord Renderer.toScreenRect Renderer.wallToSDLRect}
module dependencies: Aabb Animations AnimationsManager Buttons
                     CameraManager GameVars GuiTransforms Logger PlayerManager
                     ScoreManager TimeManager Util WallManager Walls
package dependencies: QuickCheck-2.10.1 Stack-0.3.2
                      StateVar-1.1.1.0 Stream-0.4.7.2 adjunctions-4.4 array-0.5.2.0
                      base-4.10.1.0 base-orphans-0.7 bifunctors-5.5.2 binary-0.8.5.1
                      bytes-0.15.4 bytestring-0.10.8.2 call-stack-0.1.0 cereal-0.5.5.0
                      clock-0.7.2 comonad-5.0.3 containers-0.5.10.2 contravariant-1.4.1
                      data-default-class-0.1.2.0 deepseq-1.4.3.0 distributive-0.5.3
                      exceptions-0.8.3 free-5.0.2 ghc-boot-th-8.2.2 ghc-prim-0.5.1.1
                      hashable-1.2.7.0 integer-gmp-1.0.1.0 integer-logarithms-1.0.2.1
                      kan-extensions-5.1 lazysmallcheck-0.6 lens-4.16.1
                      lifted-base-0.2.3.12 linear-1.20.7 monad-control-1.0.2.3 mtl-2.2.2
                      pretty-1.1.3.3 primitive-0.6.3.0 profunctors-5.2.2 random-1.1
                      reflection-2.1.3 scientific-0.3.6.0 sdl2-2.4.0.1 sdl2-mixer-1.1.0
                      sdl2-ttf-2.0.2 semigroupoids-5.2.2 stm-2.4.5.0 tagged-0.8.5
                      template-haskell-2.12.0.0 text-1.2.3.0 tf-random-0.5
                      th-abstraction-0.2.6.0 time-1.8.0.2 transformers-0.5.2.0
                      transformers-base-0.4.4 transformers-compat-0.5.1.4
                      unordered-containers-0.2.9.0 vector-0.12.0.1
orphans: time-1.8.0.2:Data.Time.Clock.TAI
         reflection-2.1.3:Data.Reflection
         vector-0.12.0.1:Data.Vector.Unboxed
         hashable-1.2.7.0:Data.Hashable.Generic text-1.2.3.0:Data.Text.Lazy
         linear-1.20.7:Linear.Instances base-orphans-0.7:Data.Orphans
         text-1.2.3.0:Data.Text binary-0.8.5.1:Data.Binary.Generic
         text-1.2.3.0:Data.Text.Show
         bytestring-0.10.8.2:Data.ByteString.Builder
         vector-0.12.0.1:Data.Vector.Fusion.Bundle
         stm-2.4.5.0:Control.Monad.STM time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian
         transformers-0.5.2.0:Control.Monad.Trans.Error
         base-4.10.1.0:GHC.Float base-4.10.1.0:GHC.Base
family instance modules: adjunctions-4.4:Data.Functor.Rep
                         base-4.10.1.0:Control.Applicative base-4.10.1.0:Data.Complex
                         base-4.10.1.0:Data.Either base-4.10.1.0:Data.Functor.Compose
                         base-4.10.1.0:Data.Functor.Const
                         base-4.10.1.0:Data.Functor.Identity
                         base-4.10.1.0:Data.Functor.Product base-4.10.1.0:Data.Functor.Sum
                         base-4.10.1.0:Data.List.NonEmpty base-4.10.1.0:Data.Monoid
                         base-4.10.1.0:Data.Semigroup base-4.10.1.0:Data.Type.Equality
                         base-4.10.1.0:Data.Version base-4.10.1.0:Data.Void
                         base-4.10.1.0:GHC.Exts base-4.10.1.0:GHC.Generics
                         base-4.10.1.0:GHC.IO.Exception base-4.10.1.0:GHC.TypeLits
                         base-4.10.1.0:GHC.TypeNats bifunctors-5.5.2:Data.Bifunctor.Biff
                         bifunctors-5.5.2:Data.Bifunctor.Clown
                         bifunctors-5.5.2:Data.Bifunctor.Fix
                         bifunctors-5.5.2:Data.Bifunctor.Flip
                         bifunctors-5.5.2:Data.Bifunctor.Join
                         bifunctors-5.5.2:Data.Bifunctor.Joker
                         bifunctors-5.5.2:Data.Bifunctor.Product
                         bifunctors-5.5.2:Data.Bifunctor.Sum
                         bifunctors-5.5.2:Data.Bifunctor.Tannen
                         bifunctors-5.5.2:Data.Bifunctor.Wrapped bytes-0.15.4:Data.Bytes.Get
                         bytes-0.15.4:Data.Bytes.Signed bytes-0.15.4:Data.Bytes.VarInt
                         clock-0.7.2:System.Clock containers-0.5.10.2:Data.IntMap.Internal
                         containers-0.5.10.2:Data.IntSet.Internal
                         containers-0.5.10.2:Data.Map.Internal
                         containers-0.5.10.2:Data.Sequence.Internal
                         containers-0.5.10.2:Data.Set.Internal containers-0.5.10.2:Data.Tree
                         free-5.0.2:Control.Comonad.Cofree
                         free-5.0.2:Control.Comonad.Trans.Cofree
                         free-5.0.2:Control.Monad.Free free-5.0.2:Control.Monad.Trans.Free
                         ghc-boot-th-8.2.2:GHC.ForeignSrcLang.Type
                         ghc-boot-th-8.2.2:GHC.LanguageExtensions.Type
                         kan-extensions-5.1:Data.Functor.Day
                         kan-extensions-5.1:Data.Functor.Yoneda lens-4.16.1:Control.Lens.At
                         lens-4.16.1:Control.Lens.Internal.Indexed
                         lens-4.16.1:Control.Lens.Reified lens-4.16.1:Control.Lens.Tuple
                         lens-4.16.1:Control.Lens.Wrapped lens-4.16.1:Control.Lens.Zoom
                         linear-1.20.7:Linear.Affine linear-1.20.7:Linear.Plucker
                         linear-1.20.7:Linear.Quaternion linear-1.20.7:Linear.V
                         linear-1.20.7:Linear.V0 linear-1.20.7:Linear.V1
                         linear-1.20.7:Linear.V2 linear-1.20.7:Linear.V3
                         linear-1.20.7:Linear.V4
                         monad-control-1.0.2.3:Control.Monad.Trans.Control
                         pretty-1.1.3.3:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.3:Text.PrettyPrint.HughesPJ
                         primitive-0.6.3.0:Control.Monad.Primitive
                         primitive-0.6.3.0:Data.Primitive.Array
                         primitive-0.6.3.0:Data.Primitive.ByteArray
                         profunctors-5.2.2:Data.Profunctor.Composition
                         profunctors-5.2.2:Data.Profunctor.Rep sdl2-2.4.0.1:SDL.Audio
                         sdl2-2.4.0.1:SDL.Event sdl2-2.4.0.1:SDL.Exception
                         sdl2-2.4.0.1:SDL.Hint sdl2-2.4.0.1:SDL.Init
                         sdl2-2.4.0.1:SDL.Input.GameController
                         sdl2-2.4.0.1:SDL.Input.Joystick sdl2-2.4.0.1:SDL.Input.Keyboard
                         sdl2-2.4.0.1:SDL.Input.Keyboard.Codes sdl2-2.4.0.1:SDL.Input.Mouse
                         sdl2-2.4.0.1:SDL.Internal.Types sdl2-2.4.0.1:SDL.Power
                         sdl2-2.4.0.1:SDL.Time sdl2-2.4.0.1:SDL.Video
                         sdl2-2.4.0.1:SDL.Video.OpenGL sdl2-2.4.0.1:SDL.Video.Renderer
                         sdl2-ttf-2.0.2:SDL.Font tagged-0.8.5:Data.Tagged
                         template-haskell-2.12.0.0:Language.Haskell.TH.Syntax
                         text-1.2.3.0:Data.Text text-1.2.3.0:Data.Text.Lazy
                         th-abstraction-0.2.6.0:Language.Haskell.TH.Datatype
                         unordered-containers-0.2.9.0:Data.HashMap.Base
                         unordered-containers-0.2.9.0:Data.HashSet
                         vector-0.12.0.1:Data.Vector vector-0.12.0.1:Data.Vector.Primitive
                         vector-0.12.0.1:Data.Vector.Storable
                         vector-0.12.0.1:Data.Vector.Unboxed
                         vector-0.12.0.1:Data.Vector.Unboxed.Base
import  -/  StateVar-1.1.1.0:Data.StateVar e298ac6d18dc5cb4525ddce72dbe03f7
import  -/  base-4.10.1.0:Control.Monad.IO.Class 9d78cd0f73a837f3c00753bd212b9f2c
import  -/  base-4.10.1.0:Data.Foldable 9ed87455d68e87ff2b5b8725eae9897e
import  -/  base-4.10.1.0:Data.Functor 2ffda4f936b8f474394d93205750aff3
import  -/  base-4.10.1.0:Data.Traversable 60ea7c2973e63de7d08d5d0269f96e67
import  -/  base-4.10.1.0:Foreign.C.Types 936c0db027291520097b61fd8686710a
import  -/  base-4.10.1.0:GHC.Base 782fd99b5e36f3698a26179a49afca64
import  -/  base-4.10.1.0:GHC.Num 6e1dc5d36d99a802edb39b92bb1923b8
import  -/  base-4.10.1.0:GHC.Real 3c62834bc25e762eabc44149c4cc142d
import  -/  base-4.10.1.0:GHC.Show 0a8ce2b5e533d1c2cfb7954e6736be45
import  -/  base-4.10.1.0:GHC.Word c6a98ee069a5b8600d1939e40e62ef27
import  -/  base-4.10.1.0:Prelude 31945b7d0084063347fc52506d3a4020
import  -/  clock-0.7.2:System.Clock 056d9486cb81fc87e6657deb7d2591d2
import  -/  lens-4.16.1:Control.Lens d35b54db874b2147b5ffe1d3cd39d59d
import  -/  lens-4.16.1:Control.Lens.Getter be8fceadc62581701bcf558f995a8aa3
import  -/  linear-1.20.7:Linear.Affine f4ed1aa58b28d63beac82829593554b3
import  -/  linear-1.20.7:Linear.V2 ee409e3e067ada9faf9fdda331749bf4
import  -/  linear-1.20.7:Linear.V4 316a77d05c749a3da274eba99cc77a95
import  -/  Animations ed8ac26f601711059133f19a17b8411f
  exports: 1b514af753d69c9c6476a9810faf24f0
  srcRect bec91fea7b73f18603dba410b765ef72
import  -/  AnimationsManager cbf8705999ca4b50005279e8fbbfc640
  exports: 870ab299162042bfa1955a3278127f9e
  AnimationsManager c8e0f589a92aeed99bff1d8d3702265e
  getPlayerAnimationSrc a25b00ce3c6e97fc998f22047cd06dc9
import  -/  Buttons 3ec218fc829f1172505d8f13038748ce
  exports: 2f3907c0af37ac9fc752c2492d57e9d5
  ButtonAttr 6b0715224ad83cf733833a908fe45de8
  rect 6b0715224ad83cf733833a908fe45de8
  texture 6b0715224ad83cf733833a908fe45de8
import  -/  CameraManager bce9939a6263a138be09bdc9e4ab2fc0
  exports: 112cd2acaa8c34d282eabc28f7fedc85
  CameraManager 5fbacda7e44e96481f0ac368d7f1045a
  getCameraPos 49e821156ec414ae5318b78a81350101
import  -/  GameVars 95546c61036798381255e3d7e11311b2
  exports: bffadec9649d88993fa5a790487d46e7
  Config e44e7628e39bfe67c0571be38f0cb139
  MahppyBird fb5607b55373083b420634b0454a4ddb
  Vars 5829ea20be4fb9a24ab87f3fe067aa3c
  bgTexture 642f73193f978c436801ce2ebd59a6b5
  botWallTexture 6f8bd2811ad274409063068a8fc901cd
  cFont e63f249dad0873111769c015a8e72b91
  cRenderer e44e7628e39bfe67c0571be38f0cb139
  cResources e678b7b654c8cae60a2d1262461e631a
  cTextures 21cea555a8a5370bdd5412add72ac161
  cWindow e44e7628e39bfe67c0571be38f0cb139
  playerSpriteSheet 531aea2e3a195004bf38c1639a63131a
  scoreFont 5f2633e933d68e24238ace640a6fb545
  topWallTexture 9bea67624e5412c0cb11d1c829f76474
import  -/  GuiTransforms 45bb5f8eff3ca1d177e51377a93f20f5
  exports: f9dcd83a9df04834bf7cc3c940782a98
  GuiTransforms bdcfe4d5d5dcc377f267d071dde75fe1
  getWindowSize 74ba2797e87dbac12ed1847ef73e1a64
  xCenterRectangle 3b89eda481da69e2689350f81ab32ef0
  yCenterRectangle 184ccb8c7752491b064f7aec4da8f5ae
import  -/  Logger de91407b46dc2af6570ae0f0d44f5bb4
  exports: c7f6c47792388de1970a4c43887f8fdc
  Logger 77ad9183556b8f37f2d10bd5f3bb788c
import  -/  PlayerManager 6410674bd76f72a678b626b327e31876
  exports: 90666d388c993bafd900a62a82f9ea2a
  PlayerManager 848ee61a9056a9b20a824f25f60c47da
  getPlayerAngle 96fcfcec8e816e67dbc74ef17c6ff23a
  getPlayerAttributes 40f27cec19b2593a7db141807769f391
import  -/  ScoreManager 0955763b12813388df618f32aee1a497
  exports: 3f42ff92e5da3f9a7eb6a2cabff3ca72
  ScoreManager 6c33549276da942a8ff8f7c07d85fd2b
  getScore b425a5a0ad100e893dd6d7442dbde8d1
import  -/  TimeManager c5a6185a6f35cba82cca87bc7827c727
  exports: 8b2c0f72e07dc8e418f06d3a9f6510ae
  TimeManager 11f819b14b751ed055082b44f160b76d
  getRealTime 59f73b0eb62d3e22760cfa13fd446ede
  setdt 455dc350fda73416a1ca42367620cbee
  threadDelay cbc6cb1912846eaa35ccd30a4d1e9569
import  -/  Util 04dd18c408cec1d861350946bb6e7df1
  exports: 01755414b1287618f45750309b35edae
  convertToSeconds 64f234d3f86665d369be3b594eceb7c4
  roundV2 0d8151353e8580dd1c39b2d8ab7106b2
import  -/  WallManager b5bd3d99322415f51ede188af63e5727
  exports: 67e9f1c1c7089cdef3d6912a9d52dd41
  WallManager 0af5d5681a31766b019ff90b35f67036
  getWallsInScreen c16cf44d31d212610c6e5d054402ff82
import  -/  Walls b13a13e2c4e3ef97855d945c5af1fb26
  exports: 9a82a9ead6771cc6b661267f6167d45d
  Wall 0489472b2e8cbbdc29c5c06003041655
  gap 0489472b2e8cbbdc29c5c06003041655
  lowerWall 0489472b2e8cbbdc29c5c06003041655
  upperWall 0489472b2e8cbbdc29c5c06003041655
  wallWidth 0489472b2e8cbbdc29c5c06003041655
  xPos 0489472b2e8cbbdc29c5c06003041655
import  -/  mtl-2.2.2:Control.Monad.Reader 8d63edf5dfaf25ad085eae4468bdd77e
import  -/  mtl-2.2.2:Control.Monad.Reader.Class 6d33756d93a5919f9374afec232249f4
import  -/  mtl-2.2.2:Control.Monad.State 4acb2e6037f370fa4b91900d626e6406
import  -/  mtl-2.2.2:Control.Monad.State.Class de8813e114276746770717ab3ee06916
import  -/  sdl2-2.4.0.1:SDL 24b907aeafb5c6d95ad8ce8f19ccd6b3
import  -/  sdl2-2.4.0.1:SDL.Internal.Types 33bcd4dfeb623e9b827ced1113c3cf88
import  -/  sdl2-2.4.0.1:SDL.Video.OpenGL 59b5238e510eda4d79d17333257db7d7
import  -/  sdl2-2.4.0.1:SDL.Video.Renderer 05fa9f919fc1b42de89d6ed9d3439937
import  -/  sdl2-ttf-2.0.2:SDL.Font 44c9d73e1da8a9f90d50e498341d19f1
import  -/  text-1.2.3.0:Data.Text 0519455f2b04d2a7315c2959461dd14e
import  -/  text-1.2.3.0:Data.Text.Internal 5d98ec4bb692174ed69de0b9299773d5
185eee8bdf18b8e33e3728180dd1fc7b
  $fRendererMahppyBird :: Renderer.Renderer GameVars.MahppyBird
  DFunId
  {- Inline: CONLIKE,
     Unfolding: DFun:.
                  @ GameVars.MahppyBird
                  GameVars.$fMonadMahppyBird
                  Renderer.$fRendererMahppyBird27
                    `cast`
                  (<[GameVars.MahppyBird ()]>_R
                   ->_R Trans
                            (<GameVars.Config>_R
                             ->_R Trans
                                      (<GameVars.Vars>_R
                                       ->_R Sym (GHC.Types.N:IO[0] <((), GameVars.Vars)>_R))
                                      (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                <GameVars.Vars>_N <GHC.Types.IO>_R <()>_N)))
                            (Trans
                                 (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                           <*>_N
                                           <GameVars.Config>_R
                                           <Control.Monad.Trans.State.Lazy.StateT
                                              GameVars.Vars GHC.Types.IO>_R
                                           <()>_N))
                                 (Sym (GameVars.N:MahppyBird[0]) <()>_N)))
                  Renderer.$fRendererMahppyBird26
                    `cast`
                  (<[GameVars.MahppyBird ()]>_R
                   ->_R Trans
                            (<GameVars.Config>_R
                             ->_R Trans
                                      (<GameVars.Vars>_R
                                       ->_R Sym (GHC.Types.N:IO[0] <((), GameVars.Vars)>_R))
                                      (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                <GameVars.Vars>_N <GHC.Types.IO>_R <()>_N)))
                            (Trans
                                 (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                           <*>_N
                                           <GameVars.Config>_R
                                           <Control.Monad.Trans.State.Lazy.StateT
                                              GameVars.Vars GHC.Types.IO>_R
                                           <()>_N))
                                 (Sym (GameVars.N:MahppyBird[0]) <()>_N)))
                  Renderer.$fRendererMahppyBird25
                    `cast`
                  (Trans
                       (<GameVars.Config>_R
                        ->_R Trans
                                 (<GameVars.Vars>_R
                                  ->_R Sym (GHC.Types.N:IO[0] <((), GameVars.Vars)>_R))
                                 (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                           <GameVars.Vars>_N <GHC.Types.IO>_R <()>_N)))
                       (Trans
                            (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                      <*>_N
                                      <GameVars.Config>_R
                                      <Control.Monad.Trans.State.Lazy.StateT
                                         GameVars.Vars GHC.Types.IO>_R
                                      <()>_N))
                            (Sym (GameVars.N:MahppyBird[0]) <()>_N)))
                  Renderer.$fRendererMahppyBird23
                    `cast`
                  (Trans
                       (<GameVars.Config>_R
                        ->_R Trans
                                 (<GameVars.Vars>_R
                                  ->_R Sym (GHC.Types.N:IO[0] <((), GameVars.Vars)>_R))
                                 (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                           <GameVars.Vars>_N <GHC.Types.IO>_R <()>_N)))
                       (Trans
                            (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                      <*>_N
                                      <GameVars.Config>_R
                                      <Control.Monad.Trans.State.Lazy.StateT
                                         GameVars.Vars GHC.Types.IO>_R
                                      <()>_N))
                            (Sym (GameVars.N:MahppyBird[0]) <()>_N)))
                  Renderer.$fRendererMahppyBird15
                    `cast`
                  (Trans
                       (<GameVars.Config>_R
                        ->_R Trans
                                 (<GameVars.Vars>_R
                                  ->_R Sym (GHC.Types.N:IO[0] <((), GameVars.Vars)>_R))
                                 (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                           <GameVars.Vars>_N <GHC.Types.IO>_R <()>_N)))
                       (Trans
                            (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                      <*>_N
                                      <GameVars.Config>_R
                                      <Control.Monad.Trans.State.Lazy.StateT
                                         GameVars.Vars GHC.Types.IO>_R
                                      <()>_N))
                            (Sym (GameVars.N:MahppyBird[0]) <()>_N)))
                  Renderer.$fRendererMahppyBird13
                    `cast`
                  (Trans
                       (<GameVars.Config>_R
                        ->_R Trans
                                 (<GameVars.Vars>_R
                                  ->_R Sym (GHC.Types.N:IO[0] <((), GameVars.Vars)>_R))
                                 (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                           <GameVars.Vars>_N <GHC.Types.IO>_R <()>_N)))
                       (Trans
                            (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                      <*>_N
                                      <GameVars.Config>_R
                                      <Control.Monad.Trans.State.Lazy.StateT
                                         GameVars.Vars GHC.Types.IO>_R
                                      <()>_N))
                            (Sym (GameVars.N:MahppyBird[0]) <()>_N)))
                  Renderer.$fRendererMahppyBird12
                    `cast`
                  (<Walls.Wall>_R
                   ->_R Trans
                            (<GameVars.Config>_R
                             ->_R Trans
                                      (<GameVars.Vars>_R
                                       ->_R Sym (GHC.Types.N:IO[0]
                                                     <((SDL.Video.Renderer.Rectangle
                                                          Foreign.C.Types.CInt,
                                                        SDL.Video.Renderer.Rectangle
                                                          Foreign.C.Types.CInt),
                                                       GameVars.Vars)>_R))
                                      (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                <GameVars.Vars>_N
                                                <GHC.Types.IO>_R
                                                <(SDL.Video.Renderer.Rectangle Foreign.C.Types.CInt,
                                                  SDL.Video.Renderer.Rectangle
                                                    Foreign.C.Types.CInt)>_N)))
                            (Trans
                                 (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                           <*>_N
                                           <GameVars.Config>_R
                                           <Control.Monad.Trans.State.Lazy.StateT
                                              GameVars.Vars GHC.Types.IO>_R
                                           <(SDL.Video.Renderer.Rectangle Foreign.C.Types.CInt,
                                             SDL.Video.Renderer.Rectangle Foreign.C.Types.CInt)>_N))
                                 (Sym (GameVars.N:MahppyBird[0]) <(SDL.Video.Renderer.Rectangle
                                                                     Foreign.C.Types.CInt,
                                                                   SDL.Video.Renderer.Rectangle
                                                                     Foreign.C.Types.CInt)>_N)))
                  Renderer.$fRendererMahppyBird9
                    `cast`
                  (<Linear.V4.V4 GHC.Word.Word8>_R
                   ->_R Trans
                            (<GameVars.Config>_R
                             ->_R Trans
                                      (<GameVars.Vars>_R
                                       ->_R Sym (GHC.Types.N:IO[0] <((), GameVars.Vars)>_R))
                                      (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                <GameVars.Vars>_N <GHC.Types.IO>_R <()>_N)))
                            (Trans
                                 (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                           <*>_N
                                           <GameVars.Config>_R
                                           <Control.Monad.Trans.State.Lazy.StateT
                                              GameVars.Vars GHC.Types.IO>_R
                                           <()>_N))
                                 (Sym (GameVars.N:MahppyBird[0]) <()>_N)))
                  Renderer.$fRendererMahppyBird5
                    `cast`
                  (<SDL.Video.Renderer.Rectangle GHC.Types.Float>_R
                   ->_R Trans
                            (<GameVars.Config>_R
                             ->_R Trans
                                      (<GameVars.Vars>_R
                                       ->_R Sym (GHC.Types.N:IO[0] <((), GameVars.Vars)>_R))
                                      (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                <GameVars.Vars>_N <GHC.Types.IO>_R <()>_N)))
                            (Trans
                                 (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                           <*>_N
                                           <GameVars.Config>_R
                                           <Control.Monad.Trans.State.Lazy.StateT
                                              GameVars.Vars GHC.Types.IO>_R
                                           <()>_N))
                                 (Sym (GameVars.N:MahppyBird[0]) <()>_N)))
                  Renderer.$fRendererMahppyBird4
                    `cast`
                  (<SDL.Font.Font>_R
                   ->_R <Data.Text.Internal.Text>_R
                   ->_R <Linear.Affine.Point Linear.V2.V2 GHC.Types.Float>_R
                   ->_R <Linear.V4.V4 GHC.Word.Word8>_R
                   ->_R <SDL.Video.Renderer.Rectangle GHC.Types.Float
                         -> GameVars.MahppyBird
                              (SDL.Video.Renderer.Rectangle GHC.Types.Float)>_R
                   ->_R Trans
                            (<GameVars.Config>_R
                             ->_R Trans
                                      (<GameVars.Vars>_R
                                       ->_R Sym (GHC.Types.N:IO[0] <((), GameVars.Vars)>_R))
                                      (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                <GameVars.Vars>_N <GHC.Types.IO>_R <()>_N)))
                            (Trans
                                 (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                           <*>_N
                                           <GameVars.Config>_R
                                           <Control.Monad.Trans.State.Lazy.StateT
                                              GameVars.Vars GHC.Types.IO>_R
                                           <()>_N))
                                 (Sym (GameVars.N:MahppyBird[0]) <()>_N)))
                  Renderer.$fRendererMahppyBird3
                    `cast`
                  (<Buttons.ButtonAttr>_R
                   ->_R Trans
                            (<GameVars.Config>_R
                             ->_R Trans
                                      (<GameVars.Vars>_R
                                       ->_R Sym (GHC.Types.N:IO[0] <((), GameVars.Vars)>_R))
                                      (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                <GameVars.Vars>_N <GHC.Types.IO>_R <()>_N)))
                            (Trans
                                 (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                           <*>_N
                                           <GameVars.Config>_R
                                           <Control.Monad.Trans.State.Lazy.StateT
                                              GameVars.Vars GHC.Types.IO>_R
                                           <()>_N))
                                 (Sym (GameVars.N:MahppyBird[0]) <()>_N)))
                  Renderer.$fRendererMahppyBird2
                    `cast`
                  (<SDL.Video.Renderer.Rectangle GHC.Types.Float>_R
                   ->_R <SDL.Video.Renderer.Texture>_R
                   ->_R Trans
                            (<GameVars.Config>_R
                             ->_R Trans
                                      (<GameVars.Vars>_R
                                       ->_R Sym (GHC.Types.N:IO[0] <((), GameVars.Vars)>_R))
                                      (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                <GameVars.Vars>_N <GHC.Types.IO>_R <()>_N)))
                            (Trans
                                 (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                           <*>_N
                                           <GameVars.Config>_R
                                           <Control.Monad.Trans.State.Lazy.StateT
                                              GameVars.Vars GHC.Types.IO>_R
                                           <()>_N))
                                 (Sym (GameVars.N:MahppyBird[0]) <()>_N)))
                  Renderer.$fRendererMahppyBird1
                    `cast`
                  (Trans
                       (<GameVars.Config>_R
                        ->_R Trans
                                 (<GameVars.Vars>_R
                                  ->_R Sym (GHC.Types.N:IO[0] <((), GameVars.Vars)>_R))
                                 (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                           <GameVars.Vars>_N <GHC.Types.IO>_R <()>_N)))
                       (Trans
                            (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                      <*>_N
                                      <GameVars.Config>_R
                                      <Control.Monad.Trans.State.Lazy.StateT
                                         GameVars.Vars GHC.Types.IO>_R
                                      <()>_N))
                            (Sym (GameVars.N:MahppyBird[0]) <()>_N)))
                  Renderer.$fRendererMahppyBird_$ctoScreenCord
                  Renderer.$fRendererMahppyBird_$ctoScreenRect -}
957a8a07a2a224255653431cf30e0239
  $fRendererMahppyBird1 ::
    GameVars.Config
    -> GameVars.Vars
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, ((), GameVars.Vars) #)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(LS(S)L),1*U(A,1*U(U),A)><L,U><S,U>,
     Unfolding: InlineRule (3, True, False)
                (\ (r1 :: GameVars.Config)
                   (eta :: GameVars.Vars)
                   (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case r1 of wild { GameVars.Config ds1 ds2 ds3 ->
                 case ds2
                        `cast`
                      (Nth:2
                           (Trans
                                (<SDL.Internal.Types.Renderer>_R
                                 ->_R Sym (GameVars.N:MahppyBird[0]) <()>_N)
                                (SDL.Internal.Types.N:Renderer[0]
                                 ->_R <GameVars.MahppyBird ()>_R))) of ds { GHC.Ptr.Ptr ds4 ->
                 case {__pkg_ccall_GC sdl2-2.4.0.1 GHC.Prim.Addr#
                                                   -> GHC.Prim.State# GHC.Prim.RealWorld
                                                   -> (# GHC.Prim.State# GHC.Prim.RealWorld #)}
                        ds4
                        eta1 of wild1 { Unit# ds5 ->
                 (# ds5, (GHC.Tuple.(), eta) #) } } }) -}
f934e42e20238e6632af99c17775a294
  $fRendererMahppyBird10 :: Linear.V2.V2 Foreign.C.Types.CInt
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (Linear.V2.V2
                   @ Foreign.C.Types.CInt
                   Renderer.$fRendererMahppyBird11
                     `cast`
                   (Sym (Foreign.C.Types.N:CInt[0]))
                   Renderer.$fRendererMahppyBird11
                     `cast`
                   (Sym (Foreign.C.Types.N:CInt[0]))) -}
aee68fbbc3bc4dff984a67980575323e
  $fRendererMahppyBird11 :: GHC.Int.Int32
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Int.I32# 0#) -}
faee01ad8000815cad09864dba7c1cc7
  $fRendererMahppyBird12 ::
    Walls.Wall
    -> GameVars.Config
    -> GameVars.Vars
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((SDL.Video.Renderer.Rectangle Foreign.C.Types.CInt,
            SDL.Video.Renderer.Rectangle Foreign.C.Types.CInt),
           GameVars.Vars) #)
  {- Arity: 4,
     Strictness: <L,U(1*U(U),U(U),1*U(U),U(U),1*U(U))><L,U(U(U),U,U)><L,U><S,U>,
     Unfolding: (\ (wall :: Walls.Wall)
                   (eta :: GameVars.Config)
                   (eta1 :: GameVars.Vars)
                   (eta2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case (((SDL.Video.OpenGL.glGetDrawableSize
                           @ GameVars.MahppyBird
                           GameVars.$fMonadIOMahppyBird
                           (case eta of wild { GameVars.Config ds1 ds2 ds3 -> ds1 }))
                          `cast`
                        (Trans
                             (GameVars.N:MahppyBird[0] <Linear.V2.V2 Foreign.C.Types.CInt>_N)
                             (Control.Monad.Trans.Reader.N:ReaderT[0]
                                  <*>_N
                                  <GameVars.Config>_R
                                  <Control.Monad.Trans.State.Lazy.StateT
                                     GameVars.Vars GHC.Types.IO>_R
                                  <Linear.V2.V2 Foreign.C.Types.CInt>_N))
                          eta)
                         `cast`
                       (Trans
                            (Nth:2
                                 (Nth:3
                                      (Trans
                                           (<Linear.V2.V2 Foreign.C.Types.CInt
                                             -> Linear.V2.V2 Foreign.C.Types.CInt>_R
                                            ->_R <Control.Monad.Trans.State.Lazy.StateT
                                                    GameVars.Vars
                                                    GHC.Types.IO
                                                    (Linear.V2.V2 Foreign.C.Types.CInt)>_R
                                            ->_R Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                     <GameVars.Vars>_N
                                                     <GHC.Types.IO>_R
                                                     <Linear.V2.V2 Foreign.C.Types.CInt>_N)
                                           (<Linear.V2.V2 Foreign.C.Types.CInt
                                             -> Linear.V2.V2 Foreign.C.Types.CInt>_R
                                            ->_R <Control.Monad.Trans.State.Lazy.StateT
                                                    GameVars.Vars
                                                    GHC.Types.IO
                                                    (Linear.V2.V2 Foreign.C.Types.CInt)>_R
                                            ->_R <GameVars.Vars>_R
                                            ->_R GHC.Types.N:IO[0]
                                                     <(Linear.V2.V2 Foreign.C.Types.CInt,
                                                       GameVars.Vars)>_R))))
                            (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                 <GameVars.Vars>_N
                                 <GHC.Types.IO>_R
                                 <Linear.V2.V2 Foreign.C.Types.CInt>_N))
                         eta1)
                        `cast`
                      (GHC.Types.N:IO[0]
                           <(Linear.V2.V2 Foreign.C.Types.CInt, GameVars.Vars)>_R)
                        eta2 of ds { (#,#) ipv ipv1 ->
                 case ipv1 of wild { (,) a1 s' ->
                 case a1 of wild1 { Linear.V2.V2 ds1 wallheight ->
                 (# ipv,
                    (let {
                       lengths :: Linear.V2.V2 Foreign.C.Types.CInt
                       = case wall of wild2 { Walls.Wall ds2 ds3 ds4 ds5 ds6 ->
                         case ds6 of ww { GHC.Types.F# ww1 ->
                         case (GHC.Float.$w$cround1
                                 @ Foreign.C.Types.CInt
                                 Foreign.C.Types.$fIntegralCInt
                                 ww1)
                                `cast`
                              (Foreign.C.Types.N:CInt[0]) of nt { GHC.Int.I32# ipv2 ->
                         Linear.V2.V2
                           @ Foreign.C.Types.CInt
                           nt `cast` (Sym (Foreign.C.Types.N:CInt[0]))
                           wallheight } } }
                     } in
                     (SDL.Video.Renderer.Rectangle
                        @ Foreign.C.Types.CInt
                        (case wall of wild2 { Walls.Wall ds2 ds3 ds4 ds5 ds6 ->
                         case ds5 of dt { GHC.Types.F# ipv2 ->
                         case ds3 of wild3 { GHC.Types.F# x ->
                         case ds4 of wild4 { GHC.Types.F# y ->
                         case GHC.Float.$w$cround1
                                @ GHC.Types.Int
                                GHC.Real.$fIntegralInt
                                ipv2 of wild5 { GHC.Types.I# x# ->
                         case GHC.Float.$w$cround1
                                @ GHC.Types.Int
                                GHC.Real.$fIntegralInt
                                (GHC.Prim.minusFloat#
                                   0.0#
                                   (GHC.Prim.plusFloat# x y)) of wild6 { GHC.Types.I# x#1 ->
                         case s' of wild7 { GameVars.Vars x1 x2 x3 x4 dt1 dt2 ->
                         case x3 of wild8 { GameVars.RenderingVars x7 dt4 dt5 dt3 dt6 dt7 ->
                         case dt4
                                `cast`
                              (Foreign.C.Types.N:CInt[0]) of wild9 { GHC.Int.I32# y# ->
                         case dt5
                                `cast`
                              (Foreign.C.Types.N:CInt[0]) of wild10 { GHC.Int.I32# y#1 ->
                         (Linear.V2.V2
                            @ Foreign.C.Types.CInt
                            (GHC.Int.I32#
                               (GHC.Prim.narrow32Int#
                                  (GHC.Prim.-# (GHC.Prim.narrow32Int# x#) y#)))
                              `cast`
                            (Sym (Foreign.C.Types.N:CInt[0]))
                            (GHC.Int.I32#
                               (GHC.Prim.narrow32Int#
                                  (GHC.Prim.-# (GHC.Prim.narrow32Int# x#1) y#1)))
                              `cast`
                            (Sym (Foreign.C.Types.N:CInt[0])))
                           `cast`
                         (Trans
                              (Sym (Linear.Affine.N:Point[0]
                                        <Linear.V2.V2>_R) <Foreign.C.Types.CInt>_N)
                              (Nth:2
                                   (Trans
                                        (<Linear.Affine.Point Linear.V2.V2 Foreign.C.Types.CInt>_R
                                         ->_R GameVars.N:MahppyBird[0] <Linear.Affine.Point
                                                                          Linear.V2.V2
                                                                          Foreign.C.Types.CInt>_N)
                                        (<Linear.Affine.Point Linear.V2.V2 Foreign.C.Types.CInt>_R
                                         ->_R Trans
                                                  (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                       <*>_N
                                                       <GameVars.Config>_R
                                                       <Control.Monad.Trans.State.Lazy.StateT
                                                          GameVars.Vars GHC.Types.IO>_R
                                                       <Linear.Affine.Point
                                                          Linear.V2.V2 Foreign.C.Types.CInt>_N)
                                                  (<GameVars.Config>_R
                                                   ->_R Trans
                                                            (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                 <GameVars.Vars>_N
                                                                 <GHC.Types.IO>_R
                                                                 <Linear.Affine.Point
                                                                    Linear.V2.V2
                                                                    Foreign.C.Types.CInt>_N)
                                                            (<GameVars.Vars>_R
                                                             ->_R GHC.Types.N:IO[0]
                                                                      <(Linear.Affine.Point
                                                                          Linear.V2.V2
                                                                          Foreign.C.Types.CInt,
                                                                        GameVars.Vars)>_R)))))) } } } } } } } } } })
                        lengths,
                      SDL.Video.Renderer.Rectangle
                        @ Foreign.C.Types.CInt
                        (case wall of wild2 { Walls.Wall ds2 ds3 ds4 ds5 ds6 ->
                         case ds5 of dt { GHC.Types.F# ipv2 ->
                         case ds2 of wild3 { GHC.Types.F# x ->
                         case ds3 of wild4 { GHC.Types.F# y ->
                         case GHC.Float.$w$cround1
                                @ GHC.Types.Int
                                GHC.Real.$fIntegralInt
                                ipv2 of wild5 { GHC.Types.I# x# ->
                         case GHC.Float.$w$cround1
                                @ GHC.Types.Int
                                GHC.Real.$fIntegralInt
                                (GHC.Prim.plusFloat# x y) of wild6 { GHC.Types.I# x#1 ->
                         case s' of wild7 { GameVars.Vars x1 x2 x3 x4 dt1 dt2 ->
                         case x3 of wild8 { GameVars.RenderingVars x7 dt4 dt5 dt3 dt6 dt7 ->
                         case dt4
                                `cast`
                              (Foreign.C.Types.N:CInt[0]) of wild9 { GHC.Int.I32# y# ->
                         case dt5
                                `cast`
                              (Foreign.C.Types.N:CInt[0]) of wild10 { GHC.Int.I32# y#1 ->
                         (Linear.V2.V2
                            @ Foreign.C.Types.CInt
                            (GHC.Int.I32#
                               (GHC.Prim.narrow32Int#
                                  (GHC.Prim.-# (GHC.Prim.narrow32Int# x#) y#)))
                              `cast`
                            (Sym (Foreign.C.Types.N:CInt[0]))
                            (GHC.Int.I32#
                               (GHC.Prim.narrow32Int#
                                  (GHC.Prim.-# (GHC.Prim.narrow32Int# x#1) y#1)))
                              `cast`
                            (Sym (Foreign.C.Types.N:CInt[0])))
                           `cast`
                         (Trans
                              (Sym (Linear.Affine.N:Point[0]
                                        <Linear.V2.V2>_R) <Foreign.C.Types.CInt>_N)
                              (Nth:2
                                   (Trans
                                        (<Linear.Affine.Point Linear.V2.V2 Foreign.C.Types.CInt>_R
                                         ->_R GameVars.N:MahppyBird[0] <Linear.Affine.Point
                                                                          Linear.V2.V2
                                                                          Foreign.C.Types.CInt>_N)
                                        (<Linear.Affine.Point Linear.V2.V2 Foreign.C.Types.CInt>_R
                                         ->_R Trans
                                                  (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                       <*>_N
                                                       <GameVars.Config>_R
                                                       <Control.Monad.Trans.State.Lazy.StateT
                                                          GameVars.Vars GHC.Types.IO>_R
                                                       <Linear.Affine.Point
                                                          Linear.V2.V2 Foreign.C.Types.CInt>_N)
                                                  (<GameVars.Config>_R
                                                   ->_R Trans
                                                            (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                 <GameVars.Vars>_N
                                                                 <GHC.Types.IO>_R
                                                                 <Linear.Affine.Point
                                                                    Linear.V2.V2
                                                                    Foreign.C.Types.CInt>_N)
                                                            (<GameVars.Vars>_R
                                                             ->_R GHC.Types.N:IO[0]
                                                                      <(Linear.Affine.Point
                                                                          Linear.V2.V2
                                                                          Foreign.C.Types.CInt,
                                                                        GameVars.Vars)>_R)))))) } } } } } } } } } })
                        lengths),
                     s') #) } } }) -}
3c48b24e9e0bcb303e936de8aaea77c4
  $fRendererMahppyBird13 ::
    GameVars.Config
    -> GameVars.Vars
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, ((), GameVars.Vars) #)
  {- Arity: 3,
     Strictness: <L,U(U(U),U(U),U(U,U(U,U,U(U),U(U),U),U,U))><L,U><S,U>,
     Unfolding: (\ (r1 :: GameVars.Config)
                   (eta :: GameVars.Vars)
                   (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case WallManager.$fWallManagerMahppyBird7
                        r1
                        eta
                        eta1 of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of wild { (,) a1 s' ->
                 case Renderer.$fRendererMahppyBird14
                        a1
                        r1
                        s'
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case ipv3 of wild1 { (,) a2 s'1 ->
                 let {
                   renderer :: SDL.Internal.Types.Renderer
                   = case r1 of wild2 { GameVars.Config ds3 ds4 ds5 -> ds4 }
                 } in
                 let {
                   ipv4 :: Data.Functor.Const.Const
                             SDL.Video.Renderer.Texture GameVars.Config
                   = case r1 of wild2 { GameVars.Config x1 x2 x3 ->
                     case x3 of wild3 { GameVars.Resources x4 x5 x6 x7 ->
                     case x5 of wild4 { GameVars.Textures x8 x9 x10 x11 x12 ->
                     x11
                       `cast`
                     (Sym (Data.Functor.Const.N:Const[0]
                               <*>_N <SDL.Video.Renderer.Texture>_R <GameVars.Config>_P)) } } }
                 } in
                 let {
                   ipv5 :: Data.Functor.Const.Const
                             SDL.Video.Renderer.Texture GameVars.Config
                   = case r1 of wild2 { GameVars.Config x1 x2 x3 ->
                     case x3 of wild3 { GameVars.Resources x4 x5 x6 x7 ->
                     case x5 of wild4 { GameVars.Textures x8 x9 x10 x11 x12 ->
                     x10
                       `cast`
                     (Sym (Data.Functor.Const.N:Const[0]
                               <*>_N <SDL.Video.Renderer.Texture>_R <GameVars.Config>_P)) } } }
                 } in
                 letrec {
                   go :: [(SDL.Video.Renderer.Rectangle Foreign.C.Types.CInt,
                           SDL.Video.Renderer.Rectangle Foreign.C.Types.CInt)]
                         -> GameVars.Config
                         -> GameVars.Vars
                         -> GHC.Prim.State# GHC.Prim.RealWorld
                         -> (# GHC.Prim.State# GHC.Prim.RealWorld, ((), GameVars.Vars) #)
                     <join 4> {- Arity: 4, Strictness: <S,1*U><L,U><L,U><S,U> -}
                   = \ (ds :: [(SDL.Video.Renderer.Rectangle Foreign.C.Types.CInt,
                                SDL.Video.Renderer.Rectangle Foreign.C.Types.CInt)])
                       (eta2 :: GameVars.Config)
                       (eta3 :: GameVars.Vars)
                       (eta4 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                     case ds of wild2 {
                       [] -> (# eta4, (GHC.Tuple.(), eta3) #)
                       : y ys
                       -> case y of wild3 { (,) top bot ->
                          case (((SDL.Video.Renderer.copy
                                    @ GameVars.MahppyBird
                                    GameVars.$fMonadIOMahppyBird
                                    renderer
                                    ipv4
                                      `cast`
                                    (Data.Functor.Const.N:Const[0]
                                         <*>_N <SDL.Video.Renderer.Texture>_R <GameVars.Config>_P)
                                    (GHC.Base.Nothing
                                       @ (SDL.Video.Renderer.Rectangle Foreign.C.Types.CInt))
                                    (GHC.Base.Just
                                       @ (SDL.Video.Renderer.Rectangle Foreign.C.Types.CInt)
                                       top))
                                   `cast`
                                 (Trans
                                      (GameVars.N:MahppyBird[0] <()>_N)
                                      (Control.Monad.Trans.Reader.N:ReaderT[0]
                                           <*>_N
                                           <GameVars.Config>_R
                                           <Control.Monad.Trans.State.Lazy.StateT
                                              GameVars.Vars GHC.Types.IO>_R
                                           <()>_N))
                                   eta2)
                                  `cast`
                                (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                     <GameVars.Vars>_N <GHC.Types.IO>_R <()>_N)
                                  eta3)
                                 `cast`
                               (GHC.Types.N:IO[0] <((), GameVars.Vars)>_R)
                                 eta4 of ds3 { (#,#) ipv6 ipv7 ->
                          case (((SDL.Video.Renderer.copy
                                    @ GameVars.MahppyBird
                                    GameVars.$fMonadIOMahppyBird
                                    renderer
                                    ipv5
                                      `cast`
                                    (Data.Functor.Const.N:Const[0]
                                         <*>_N <SDL.Video.Renderer.Texture>_R <GameVars.Config>_P)
                                    (GHC.Base.Nothing
                                       @ (SDL.Video.Renderer.Rectangle Foreign.C.Types.CInt))
                                    (GHC.Base.Just
                                       @ (SDL.Video.Renderer.Rectangle Foreign.C.Types.CInt)
                                       bot))
                                   `cast`
                                 (Trans
                                      (GameVars.N:MahppyBird[0] <()>_N)
                                      (Control.Monad.Trans.Reader.N:ReaderT[0]
                                           <*>_N
                                           <GameVars.Config>_R
                                           <Control.Monad.Trans.State.Lazy.StateT
                                              GameVars.Vars GHC.Types.IO>_R
                                           <()>_N))
                                   eta2)
                                  `cast`
                                (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                     <GameVars.Vars>_N <GHC.Types.IO>_R <()>_N)
                                  (case ipv7 of wild4 { (,) a3 s'2 -> s'2 }))
                                 `cast`
                               (GHC.Types.N:IO[0] <((), GameVars.Vars)>_R)
                                 ipv6 of ds4 { (#,#) ipv8 ipv9 ->
                          go ys eta2 (case ipv9 of wild4 { (,) a3 s'2 -> s'2 }) ipv8 } } } }
                 } in
                 go a2 r1 s'1 ipv2 } } } }) -}
e05d488748377870555085024e02b140
  $fRendererMahppyBird14 ::
    [Walls.Wall]
    -> GameVars.Config
    -> GameVars.Vars
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ([(SDL.Video.Renderer.Rectangle Foreign.C.Types.CInt,
             SDL.Video.Renderer.Rectangle Foreign.C.Types.CInt)],
           GameVars.Vars) #)
  {- Arity: 4, Strictness: <S,1*U><L,U(U(U),U,U)><L,U><S,U> -}
9b941d6b50a93b9c7e81464375230f34
  $fRendererMahppyBird15 ::
    GameVars.Config
    -> GameVars.Vars
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, ((), GameVars.Vars) #)
  {- Arity: 3,
     Strictness: <L,U(U,U(U),U(U(U(U),U),U,U,U))><L,U(U,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U),U,U,U,U)><S,U>,
     Unfolding: (\ (r1 :: GameVars.Config)
                   (eta :: GameVars.Vars)
                   (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 Renderer.$fRendererMahppyBird4
                   (case r1 of wild { GameVars.Config x1 x2 x3 ->
                    case x3 of wild1 { GameVars.Resources x4 x5 x6 x7 ->
                    case x4 of wild2 { GameVars.Fonts x8 x9 -> x8 } } })
                   (case eta of wild { GameVars.Vars x1 x2 x3 x4 dt1 dt2 ->
                    case x2 of wild1 { GameVars.PlayVars dt4 dt5 dt3 dt6 dt7 dt8 dt9 x7 dt10 dt11 dt12 dt13 dt14 dt15 dt16 dt17 dt18 dt19 ->
                    case GHC.Show.$wshowSignedInt
                           0#
                           dt19
                           (GHC.Types.[] @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                    case GHC.Magic.runRW#
                           @ ('GHC.Types.TupleRep
                                '['GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                           @ (# GHC.Prim.State# GHC.Prim.RealWorld, Data.Text.Internal.Text #)
                           (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                            case GHC.Prim.newByteArray#
                                   @ GHC.Prim.RealWorld
                                   10#
                                   s1 of ds1 { (#,#) ipv ipv1 ->
                            Renderer.$wouter
                              ipv1
                              4#
                              (GHC.Types.: @ GHC.Types.Char ww5 ww6)
                              0#
                              ipv }) of ds1 { (#,#) ipv ipv1 ->
                    ipv1 } } } })
                   Renderer.$fRendererMahppyBird21
                     `cast`
                   (Sym (Linear.Affine.N:Point[0]
                             <Linear.V2.V2>_R) <GHC.Types.Float>_N)
                   Renderer.$fRendererMahppyBird17
                   Renderer.$fRendererMahppyBird16
                     `cast`
                   (<SDL.Video.Renderer.Rectangle GHC.Types.Float>_R
                    ->_R Trans
                             (<GameVars.Config>_R
                              ->_R Trans
                                       (<GameVars.Vars>_R
                                        ->_R Sym (GHC.Types.N:IO[0]
                                                      <(SDL.Video.Renderer.Rectangle
                                                          GHC.Types.Float,
                                                        GameVars.Vars)>_R))
                                       (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                 <GameVars.Vars>_N
                                                 <GHC.Types.IO>_R
                                                 <SDL.Video.Renderer.Rectangle GHC.Types.Float>_N)))
                             (Trans
                                  (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                            <*>_N
                                            <GameVars.Config>_R
                                            <Control.Monad.Trans.State.Lazy.StateT
                                               GameVars.Vars GHC.Types.IO>_R
                                            <SDL.Video.Renderer.Rectangle GHC.Types.Float>_N))
                                  (Sym (GameVars.N:MahppyBird[0]) <SDL.Video.Renderer.Rectangle
                                                                     GHC.Types.Float>_N)))
                   r1
                   eta
                   eta1) -}
fbfc05cedbf59a4402a7bc0d35d40132
  $fRendererMahppyBird16 ::
    SDL.Video.Renderer.Rectangle GHC.Types.Float
    -> GameVars.Config
    -> GameVars.Vars
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          (SDL.Video.Renderer.Rectangle GHC.Types.Float, GameVars.Vars) #)
  {- Arity: 4,
     Strictness: <L,1*U(1*U(A,U(U)),1*U(U(U),U(U)))><L,U(U(U),U,U)><L,U><S,U>,
     Unfolding: InlineRule (4, True, False)
                (\ (rect :: SDL.Video.Renderer.Rectangle GHC.Types.Float)
                   (eta :: GameVars.Config)
                   (eta1 :: GameVars.Vars)
                   (eta2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case GuiTransforms.$fGuiTransformsMahppyBird7
                        rect
                        eta
                        eta1
                        eta2 of ds1 { (#,#) ipv ipv1 ->
                 GuiTransforms.$fGuiTransformsMahppyBird6
                   (case ipv1 of wild { (,) a1 s' -> a1 })
                   eta
                   (case ipv1 of wild { (,) a1 s' -> s' })
                   ipv }) -}
bbf5c978900d9e96c42fb58bbb9a5373
  $fRendererMahppyBird17 :: Linear.V4.V4 GHC.Word.Word8
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (Linear.V4.V4
                   @ GHC.Word.Word8
                   Renderer.$fRendererMahppyBird20
                   Renderer.$fRendererMahppyBird19
                   Renderer.$fRendererMahppyBird18
                   Renderer.$fRendererMahppyBird7) -}
6eaafad3dbd827bccf5a587d2001333c
  $fRendererMahppyBird18 :: GHC.Word.Word8
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Word.W8# 74##) -}
62d8577277f3c2a8f105a40490744ac1
  $fRendererMahppyBird19 :: GHC.Word.Word8
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Word.W8# 55##) -}
4e53188297e27957c78b79405928eafe
  $fRendererMahppyBird2 ::
    SDL.Video.Renderer.Rectangle GHC.Types.Float
    -> SDL.Video.Renderer.Texture
    -> GameVars.Config
    -> GameVars.Vars
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, ((), GameVars.Vars) #)
  {- Arity: 5,
     Strictness: <L,1*U(1*U(U(U),U(U)),1*U(U(U),U(U)))><L,U(U)><L,U(U,U(U),U)><L,U><S,U>,
     Unfolding: InlineRule (5, True, False)
                (\ (rect :: SDL.Video.Renderer.Rectangle GHC.Types.Float)
                   (texture :: SDL.Video.Renderer.Texture)
                   (eta :: GameVars.Config)
                   (eta1 :: GameVars.Vars)
                   (eta2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 (((SDL.Video.Renderer.copy
                      @ GameVars.MahppyBird
                      GameVars.$fMonadIOMahppyBird
                      (case eta of wild { GameVars.Config ds1 ds2 ds3 -> ds2 })
                      texture
                      (GHC.Base.Nothing
                         @ (SDL.Video.Renderer.Rectangle Foreign.C.Types.CInt))
                      (GHC.Base.Just
                         @ (SDL.Video.Renderer.Rectangle Foreign.C.Types.CInt)
                         (Renderer.roundSDLRect rect)))
                     `cast`
                   (Trans
                        (GameVars.N:MahppyBird[0] <()>_N)
                        (Control.Monad.Trans.Reader.N:ReaderT[0]
                             <*>_N
                             <GameVars.Config>_R
                             <Control.Monad.Trans.State.Lazy.StateT
                                GameVars.Vars GHC.Types.IO>_R
                             <()>_N))
                     eta)
                    `cast`
                  (Control.Monad.Trans.State.Lazy.N:StateT[0]
                       <GameVars.Vars>_N <GHC.Types.IO>_R <()>_N)
                    eta1)
                   `cast`
                 (GHC.Types.N:IO[0] <((), GameVars.Vars)>_R)
                   eta2) -}
c4690010c40c550ea02bc665c0879086
  $fRendererMahppyBird20 :: GHC.Word.Word8
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Word.W8# 54##) -}
ab5997352092c867d9694a0004ee5275
  $fRendererMahppyBird21 :: Linear.V2.V2 GHC.Types.Float
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (Linear.V2.V2
                   @ GHC.Types.Float
                   Renderer.$fRendererMahppyBird22
                   Renderer.$fRendererMahppyBird22) -}
7701030af7ed5022e18cd974b9d580e4
  $fRendererMahppyBird22 :: GHC.Types.Float
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.F# 0.0#) -}
02c633ae3ae133d29ad8ec9e068a8a89
  $fRendererMahppyBird23 ::
    GameVars.Config
    -> GameVars.Vars
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, ((), GameVars.Vars) #)
  {- Arity: 3,
     Strictness: <L,U(U,U(U),U(U,U(U,U(U),U,U,U),U,U))><S(LSLLLL),1*U(U,U(U(U(U),U(U)),U(U(U),U(U)),U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U),U(U(U(U(U,U),U),U,U),U(U),U(U),U,U,U),U,U,U)><S,U>,
     Unfolding: (\ (r1 :: GameVars.Config)
                   (eta :: GameVars.Vars)
                   (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case eta of wild { GameVars.Vars x1 x2 x3 x4 dt1 dt2 ->
                 case x2 of wild1 { GameVars.PlayVars dt4 dt5 dt3 dt6 dt7 dt8 dt9 x7 dt10 dt11 dt12 dt13 dt14 dt15 dt16 dt17 dt18 dt19 ->
                 (((SDL.Video.Renderer.copyEx
                      @ GameVars.MahppyBird
                      GameVars.$fMonadIOMahppyBird
                      (case r1 of wild2 { GameVars.Config ds1 ds2 ds3 -> ds2 })
                      (case r1 of wild2 { GameVars.Config x11 x12 x13 ->
                       case x13 of wild3 { GameVars.Resources x14 x15 x16 x17 ->
                       case x15 of wild4 { GameVars.Textures x18 x19 x20 x21 x5 ->
                       x19 } } })
                      (GHC.Base.Just
                         @ (SDL.Video.Renderer.Rectangle Foreign.C.Types.CInt)
                         (case x3 of wild2 { GameVars.RenderingVars x11 dt22 dt23 dt24 dt25 dt26 ->
                          case x11 of wild3 { Animations.AnimationHandler ds ds1 ds2 ->
                          case ds of wild4 { Data.Stream.Cons x8 ds3 ->
                          case x8 of wild5 { Animations.AnimationSrcRect ds4 ds5 ->
                          ds4 } } } }))
                      (GHC.Base.Just
                         @ (SDL.Video.Renderer.Rectangle Foreign.C.Types.CInt)
                         (SDL.Video.Renderer.Rectangle
                            @ Foreign.C.Types.CInt
                            (case dt4
                                    `cast`
                                  (Linear.Affine.N:Point[0]
                                       <Linear.V2.V2>_R <GHC.Types.Float>_N) of ww { Linear.V2.V2 ww1 ww2 ->
                             case ww1 of ww3 { GHC.Types.F# ww4 ->
                             case ww2 of ww5 { GHC.Types.F# ww6 ->
                             case GHC.Float.$w$cround1
                                    @ GHC.Types.Int
                                    GHC.Real.$fIntegralInt
                                    ww4 of wild2 { GHC.Types.I# x# ->
                             case GHC.Float.$w$cround1
                                    @ GHC.Types.Int
                                    GHC.Real.$fIntegralInt
                                    ww6 of wild3 { GHC.Types.I# x#1 ->
                             case x3 of wild4 { GameVars.RenderingVars x11 dt22 dt23 dt24 dt25 dt26 ->
                             case dt22
                                    `cast`
                                  (Foreign.C.Types.N:CInt[0]) of wild5 { GHC.Int.I32# y# ->
                             case dt23
                                    `cast`
                                  (Foreign.C.Types.N:CInt[0]) of wild6 { GHC.Int.I32# y#1 ->
                             (Linear.V2.V2
                                @ Foreign.C.Types.CInt
                                (GHC.Int.I32#
                                   (GHC.Prim.narrow32Int#
                                      (GHC.Prim.-# (GHC.Prim.narrow32Int# x#) y#)))
                                  `cast`
                                (Sym (Foreign.C.Types.N:CInt[0]))
                                (GHC.Int.I32#
                                   (GHC.Prim.narrow32Int#
                                      (GHC.Prim.-# (GHC.Prim.narrow32Int# x#1) y#1)))
                                  `cast`
                                (Sym (Foreign.C.Types.N:CInt[0])))
                               `cast`
                             (Trans
                                  (Sym (Linear.Affine.N:Point[0]
                                            <Linear.V2.V2>_R) <Foreign.C.Types.CInt>_N)
                                  (Nth:2
                                       (Trans
                                            (<Linear.Affine.Point
                                                Linear.V2.V2 Foreign.C.Types.CInt>_R
                                             ->_R GameVars.N:MahppyBird[0] <Linear.Affine.Point
                                                                              Linear.V2.V2
                                                                              Foreign.C.Types.CInt>_N)
                                            (<Linear.Affine.Point
                                                Linear.V2.V2 Foreign.C.Types.CInt>_R
                                             ->_R Trans
                                                      (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                           <*>_N
                                                           <GameVars.Config>_R
                                                           <Control.Monad.Trans.State.Lazy.StateT
                                                              GameVars.Vars GHC.Types.IO>_R
                                                           <Linear.Affine.Point
                                                              Linear.V2.V2 Foreign.C.Types.CInt>_N)
                                                      (<GameVars.Config>_R
                                                       ->_R Trans
                                                                (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                     <GameVars.Vars>_N
                                                                     <GHC.Types.IO>_R
                                                                     <Linear.Affine.Point
                                                                        Linear.V2.V2
                                                                        Foreign.C.Types.CInt>_N)
                                                                (<GameVars.Vars>_R
                                                                 ->_R GHC.Types.N:IO[0]
                                                                          <(Linear.Affine.Point
                                                                              Linear.V2.V2
                                                                              Foreign.C.Types.CInt,
                                                                            GameVars.Vars)>_R)))))) } } } } } } } })
                            (Util.roundV2 dt5)))
                      (GHC.Types.D# dt9) `cast` (Sym (Foreign.C.Types.N:CDouble[0]))
                      (GHC.Base.Nothing
                         @ (Linear.Affine.Point Linear.V2.V2 Foreign.C.Types.CInt))
                      Renderer.$fRendererMahppyBird24)
                     `cast`
                   (Trans
                        (GameVars.N:MahppyBird[0] <()>_N)
                        (Control.Monad.Trans.Reader.N:ReaderT[0]
                             <*>_N
                             <GameVars.Config>_R
                             <Control.Monad.Trans.State.Lazy.StateT
                                GameVars.Vars GHC.Types.IO>_R
                             <()>_N))
                     r1)
                    `cast`
                  (Control.Monad.Trans.State.Lazy.N:StateT[0]
                       <GameVars.Vars>_N <GHC.Types.IO>_R <()>_N)
                    wild)
                   `cast`
                 (GHC.Types.N:IO[0] <((), GameVars.Vars)>_R)
                   eta1 } }) -}
e31ecd59bb039ae12e03f9a7f80211ba
  $fRendererMahppyBird24 :: Linear.V2.V2 GHC.Types.Bool
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (Linear.V2.V2
                   @ GHC.Types.Bool
                   GHC.Types.False
                   GHC.Types.False) -}
eb348203ee7c823532be055cb960b60b
  $fRendererMahppyBird25 ::
    GameVars.Config
    -> GameVars.Vars
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, ((), GameVars.Vars) #)
  {- Arity: 3,
     Strictness: <L,U(U,U(U),U(U,U(U(U),U,U,U,U),U,U))><L,U><S,U>,
     Unfolding: (\ (r1 :: GameVars.Config)
                   (eta :: GameVars.Vars)
                   (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 (((SDL.Video.Renderer.copy
                      @ GameVars.MahppyBird
                      GameVars.$fMonadIOMahppyBird
                      (case r1 of wild { GameVars.Config ds1 ds2 ds3 -> ds2 })
                      (case r1 of wild { GameVars.Config x1 x2 x3 ->
                       case x3 of wild1 { GameVars.Resources x4 x5 x6 x7 ->
                       case x5 of wild2 { GameVars.Textures x8 x9 x10 x11 x12 -> x8 } } })
                      (GHC.Base.Nothing
                         @ (SDL.Video.Renderer.Rectangle Foreign.C.Types.CInt))
                      (GHC.Base.Nothing
                         @ (SDL.Video.Renderer.Rectangle Foreign.C.Types.CInt)))
                     `cast`
                   (Trans
                        (GameVars.N:MahppyBird[0] <()>_N)
                        (Control.Monad.Trans.Reader.N:ReaderT[0]
                             <*>_N
                             <GameVars.Config>_R
                             <Control.Monad.Trans.State.Lazy.StateT
                                GameVars.Vars GHC.Types.IO>_R
                             <()>_N))
                     r1)
                    `cast`
                  (Control.Monad.Trans.State.Lazy.N:StateT[0]
                       <GameVars.Vars>_N <GHC.Types.IO>_R <()>_N)
                    eta)
                   `cast`
                 (GHC.Types.N:IO[0] <((), GameVars.Vars)>_R)
                   eta1) -}
a8cbc6726ffc8df9263e52f632e9688a
  $fRendererMahppyBird26 ::
    [GameVars.MahppyBird ()]
    -> GameVars.Config
    -> GameVars.Vars
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, ((), GameVars.Vars) #)
  {- Arity: 4, Strictness: <L,1*U><L,U(U,U(U),U)><L,U><S,U>,
     Unfolding: (\ (drawactions :: [GameVars.MahppyBird ()])
                   (eta :: GameVars.Config)
                   (eta1 :: GameVars.Vars)
                   (eta2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case System.Clock.$w$j1 0# eta2 of ds1 { (#,#) ipv ipv1 ->
                 case Renderer.$fRendererMahppyBird27
                        drawactions
                        eta
                        eta1
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case System.Clock.$w$j1 0# ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                 (# ipv4,
                    (GHC.Tuple.(),
                     case ipv3 of wild { (,) a1 s' ->
                     case s' of wild1 { GameVars.Vars x1 x2 x3 x4 dt1 dt2 ->
                     case ipv5 of wild2 { System.Clock.TimeSpec dt dt4 ->
                     case ipv1 of wild3 { System.Clock.TimeSpec dt5 dt3 ->
                     let {
                       ww2 :: GHC.Prim.Int# = GHC.Prim.-# dt4 dt3
                     } in
                     let {
                       ww1 :: GHC.Prim.Int# = GHC.Prim.-# dt dt5
                     } in
                     let {
                       $j :: GHC.Prim.Int# -> GHC.Prim.Int# -> GameVars.Vars
                         <join 2> {- Arity: 2, Strictness: <S,U><S,U>m -}
                       = \ (ww4 :: GHC.Prim.Int#)[OneShot]
                           (ww5 :: GHC.Prim.Int#)[OneShot] ->
                         case System.Clock.$w$cabs ww4 ww5 of ww3 { (#,#) ww6 ww7 ->
                         case GHC.Integer.Type.doubleFromInteger
                                (System.Clock.$wtoNanoSecs ww6 ww7) of wild4 { DEFAULT ->
                         GameVars.Vars
                           x1
                           x2
                           x3
                           x4
                           (GHC.Prim.divideFloat# (GHC.Prim.double2Float# wild4) 1.0e9#)
                           dt2 } }
                     } in
                     let {
                       $j1 :: GameVars.Vars <join 0> {- Strictness: m -}
                       = case System.Clock.$fEqTimeSpec1 of ww3 { GHC.Int.I64# ww4 ->
                         case GHC.Int.$w$cdivMod2 ww2 ww4 of ww5 { (#,#) ww6 ww7 ->
                         case ww6 of wild4 { GHC.Int.I64# y# ->
                         case ww7 of dt6 { GHC.Int.I64# dt7 ->
                         $j (GHC.Prim.+# ww1 y#) dt7 } } } }
                     } in
                     case GHC.Prim.tagToEnum#
                            @ GHC.Types.Bool
                            (GHC.Prim.<# ww2 0#) of wild4 {
                       GHC.Types.False
                       -> case System.Clock.$fEqTimeSpec1 of wild5 { GHC.Int.I64# y ->
                          case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.>=# ww2 y) of wild6 {
                            GHC.Types.False -> $j ww1 ww2 GHC.Types.True -> $j1 } }
                       GHC.Types.True -> $j1 } } } } }) #) } } }) -}
7b702b20900278108f755deda99e3f65
  $fRendererMahppyBird27 ::
    [GameVars.MahppyBird ()]
    -> GameVars.Config
    -> GameVars.Vars
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, ((), GameVars.Vars) #)
  {- Arity: 4, Strictness: <L,1*U><L,U(U,U(U),U)><L,U><L,U>,
     Unfolding: (\ (drawactions :: [GameVars.MahppyBird ()])
                   (eta :: GameVars.Config)
                   (eta1 :: GameVars.Vars)
                   (eta2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case {__pkg_ccall base-4.10.1.0 GHC.Prim.State# GHC.Prim.RealWorld
                                                 -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                       GHC.Prim.Int# #)}
                        GHC.Prim.realWorld# of wild { (#,#) ds ds1 ->
                 case ds1 of wild1 {
                   DEFAULT
                   -> case GHC.Event.Thread.threadDelay1
                             Renderer.$fRendererMahppyBird_x
                             eta2 of ds2 { (#,#) ipv ipv1 ->
                      case Renderer.$fRendererMahppyBird28
                             drawactions
                             eta
                             eta1
                             ipv of ds4 { (#,#) ipv2 ipv3 ->
                      case eta of wild2 { GameVars.Config ds5 ds6 ds3 ->
                      case ds6
                             `cast`
                           (Nth:2
                                (Trans
                                     (<SDL.Internal.Types.Renderer>_R
                                      ->_R Sym (GameVars.N:MahppyBird[0]) <()>_N)
                                     (SDL.Internal.Types.N:Renderer[0]
                                      ->_R <GameVars.MahppyBird ()>_R))) of ds7 { GHC.Ptr.Ptr ds8 ->
                      case {__pkg_ccall_GC sdl2-2.4.0.1 GHC.Prim.Addr#
                                                        -> GHC.Prim.State# GHC.Prim.RealWorld
                                                        -> (# GHC.Prim.State# GHC.Prim.RealWorld #)}
                             ds8
                             ipv2 of wild3 { Unit# ds9 ->
                      (# ds9,
                         (GHC.Tuple.(), case ipv3 of wild4 { (,) a1 s' -> s' }) #) } } } } }
                   0#
                   -> case GHC.Prim.delay#
                             @ GHC.Prim.RealWorld
                             2000#
                             eta2 of s' { DEFAULT ->
                      case Renderer.$fRendererMahppyBird28
                             drawactions
                             eta
                             eta1
                             s' of ds2 { (#,#) ipv ipv1 ->
                      case eta of wild2 { GameVars.Config ds3 ds4 ds5 ->
                      case ds4
                             `cast`
                           (Nth:2
                                (Trans
                                     (<SDL.Internal.Types.Renderer>_R
                                      ->_R Sym (GameVars.N:MahppyBird[0]) <()>_N)
                                     (SDL.Internal.Types.N:Renderer[0]
                                      ->_R <GameVars.MahppyBird ()>_R))) of ds6 { GHC.Ptr.Ptr ds7 ->
                      case {__pkg_ccall_GC sdl2-2.4.0.1 GHC.Prim.Addr#
                                                        -> GHC.Prim.State# GHC.Prim.RealWorld
                                                        -> (# GHC.Prim.State# GHC.Prim.RealWorld #)}
                             ds7
                             ipv of wild3 { Unit# ds8 ->
                      (# ds8,
                         (GHC.Tuple.(),
                          case ipv1 of wild4 { (,) a1 s'1 -> s'1 }) #) } } } } } } }) -}
caf53d2f170e8f5c7d7fed53fd4ca891
  $fRendererMahppyBird28 ::
    [GameVars.MahppyBird ()]
    -> GameVars.Config
    -> GameVars.Vars
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, ((), GameVars.Vars) #)
  {- Arity: 4, HasNoCafRefs, Strictness: <S,1*U><L,U><L,U><S,U> -}
bc4a9bb9d1e2f4fa8d48b10874761e0b
  $fRendererMahppyBird3 ::
    Buttons.ButtonAttr
    -> GameVars.Config
    -> GameVars.Vars
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, ((), GameVars.Vars) #)
  {- Arity: 4,
     Strictness: <L,U(1*U(1*U(U(U),U(U)),1*U(U(U),U(U))),A,1*U(U))><L,U(U,U(U),U)><L,U><S,U>,
     Unfolding: (\ (btnattr :: Buttons.ButtonAttr)
                   (eta :: GameVars.Config)
                   (eta1 :: GameVars.Vars)
                   (eta2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 (((SDL.Video.Renderer.copy
                      @ GameVars.MahppyBird
                      GameVars.$fMonadIOMahppyBird
                      (case eta of wild { GameVars.Config ds1 ds2 ds3 -> ds2 })
                      (case btnattr of wild { Buttons.ButtonAttr ds1 ds2 ds3 -> ds3 })
                      (GHC.Base.Nothing
                         @ (SDL.Video.Renderer.Rectangle Foreign.C.Types.CInt))
                      (GHC.Base.Just
                         @ (SDL.Video.Renderer.Rectangle Foreign.C.Types.CInt)
                         (case btnattr of wild { Buttons.ButtonAttr ds1 ds2 ds3 ->
                          case ds1 of ww { SDL.Video.Renderer.Rectangle ww1 ww2 ->
                          case ww1
                                 `cast`
                               (Linear.Affine.N:Point[0]
                                    <Linear.V2.V2>_R <GHC.Types.Float>_N) of ww3 { Linear.V2.V2 ww4 ww5 ->
                          case ww4 of ww6 { GHC.Types.F# ww7 ->
                          case ww5 of ww8 { GHC.Types.F# ww9 ->
                          case ww2 of ww10 { Linear.V2.V2 ww11 ww12 ->
                          case ww11 of ww13 { GHC.Types.F# ww14 ->
                          case ww12 of ww15 { GHC.Types.F# ww16 ->
                          case Renderer.$wroundSDLRect
                                 ww7
                                 ww9
                                 ww14
                                 ww16 of ww17 { (#,#) ww18 ww19 ->
                          SDL.Video.Renderer.Rectangle
                            @ Foreign.C.Types.CInt
                            ww18
                            ww19 } } } } } } } } })))
                     `cast`
                   (Trans
                        (GameVars.N:MahppyBird[0] <()>_N)
                        (Control.Monad.Trans.Reader.N:ReaderT[0]
                             <*>_N
                             <GameVars.Config>_R
                             <Control.Monad.Trans.State.Lazy.StateT
                                GameVars.Vars GHC.Types.IO>_R
                             <()>_N))
                     eta)
                    `cast`
                  (Control.Monad.Trans.State.Lazy.N:StateT[0]
                       <GameVars.Vars>_N <GHC.Types.IO>_R <()>_N)
                    eta1)
                   `cast`
                 (GHC.Types.N:IO[0] <((), GameVars.Vars)>_R)
                   eta2) -}
c75798f66798de0e391beffdf1572539
  $fRendererMahppyBird4 ::
    SDL.Font.Font
    -> Data.Text.Internal.Text
    -> Linear.Affine.Point Linear.V2.V2 GHC.Types.Float
    -> Linear.V4.V4 GHC.Word.Word8
    -> (SDL.Video.Renderer.Rectangle GHC.Types.Float
        -> GameVars.MahppyBird
             (SDL.Video.Renderer.Rectangle GHC.Types.Float))
    -> GameVars.Config
    -> GameVars.Vars
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, ((), GameVars.Vars) #)
  {- Arity: 8,
     Strictness: <L,U(U)><L,U(U,U,U)><L,U><S(S(S)S(S)S(S)S(S)),1*U(U(U),U(U),U(U),U(U))><L,1*C1(C1(C1(C1(U(U,1*U(1*U(1*U(U(U),U(U)),1*U(U(U),U(U))),U))))))><L,U(U,U(U),U)><L,U><S,U>,
     Unfolding: (\ (font :: SDL.Font.Font)
                   (str :: Data.Text.Internal.Text)
                   (pos :: Linear.Affine.Point Linear.V2.V2 GHC.Types.Float)
                   (color :: Linear.V4.V4 GHC.Word.Word8)
                   (f :: SDL.Video.Renderer.Rectangle GHC.Types.Float
                         -> GameVars.MahppyBird
                              (SDL.Video.Renderer.Rectangle GHC.Types.Float))
                   (eta :: GameVars.Config)
                   (eta1 :: GameVars.Vars)
                   (eta2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case color of ww { Linear.V4.V4 ww1 ww2 ww3 ww4 ->
                 case ww1 of ww5 { GHC.Word.W8# ww6 ->
                 case ww2 of ww7 { GHC.Word.W8# ww8 ->
                 case ww3 of ww9 { GHC.Word.W8# ww10 ->
                 case ww4 of ww11 { GHC.Word.W8# ww12 ->
                 case (((SDL.Font.$wblended
                           @ GameVars.MahppyBird
                           GameVars.$fMonadIOMahppyBird
                           font
                           ww6
                           ww8
                           ww10
                           ww12
                           str)
                          `cast`
                        (Trans
                             (GameVars.N:MahppyBird[0] <SDL.Video.Renderer.Surface>_N)
                             (Control.Monad.Trans.Reader.N:ReaderT[0]
                                  <*>_N
                                  <GameVars.Config>_R
                                  <Control.Monad.Trans.State.Lazy.StateT
                                     GameVars.Vars GHC.Types.IO>_R
                                  <SDL.Video.Renderer.Surface>_N))
                          eta)
                         `cast`
                       (Trans
                            (Nth:2
                                 (Trans
                                      (<Control.Monad.Trans.State.Lazy.StateT
                                          GameVars.Vars GHC.Types.IO SDL.Video.Renderer.Surface>_R
                                       ->_R <SDL.Video.Renderer.Surface
                                             -> Control.Monad.Trans.State.Lazy.StateT
                                                  GameVars.Vars
                                                  GHC.Types.IO
                                                  SDL.Video.Renderer.Texture>_R
                                       ->_R Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                <GameVars.Vars>_N
                                                <GHC.Types.IO>_R
                                                <SDL.Video.Renderer.Texture>_N)
                                      (<Control.Monad.Trans.State.Lazy.StateT
                                          GameVars.Vars GHC.Types.IO SDL.Video.Renderer.Surface>_R
                                       ->_R <SDL.Video.Renderer.Surface
                                             -> Control.Monad.Trans.State.Lazy.StateT
                                                  GameVars.Vars
                                                  GHC.Types.IO
                                                  SDL.Video.Renderer.Texture>_R
                                       ->_R <GameVars.Vars>_R
                                       ->_R GHC.Types.N:IO[0]
                                                <(SDL.Video.Renderer.Texture, GameVars.Vars)>_R)))
                            (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                 <GameVars.Vars>_N <GHC.Types.IO>_R <SDL.Video.Renderer.Surface>_N))
                         eta1)
                        `cast`
                      (GHC.Types.N:IO[0] <(SDL.Video.Renderer.Surface, GameVars.Vars)>_R)
                        eta2 of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of wild { (,) a1 s' ->
                 case a1 of ww16 { SDL.Video.Renderer.Surface ww17 ww18 ->
                 let {
                   renderer :: SDL.Internal.Types.Renderer
                   = case eta of wild1 { GameVars.Config ds2 ds3 ds4 -> ds3 }
                 } in
                 case (((SDL.Video.Renderer.$wcreateTextureFromSurface
                           @ GameVars.MahppyBird
                           GameVars.$fMonadIOMahppyBird
                           renderer
                           ww17)
                          `cast`
                        (Trans
                             (GameVars.N:MahppyBird[0] <SDL.Video.Renderer.Texture>_N)
                             (Control.Monad.Trans.Reader.N:ReaderT[0]
                                  <*>_N
                                  <GameVars.Config>_R
                                  <Control.Monad.Trans.State.Lazy.StateT
                                     GameVars.Vars GHC.Types.IO>_R
                                  <SDL.Video.Renderer.Texture>_N))
                          eta)
                         `cast`
                       (Control.Monad.Trans.State.Lazy.N:StateT[0]
                            <GameVars.Vars>_N <GHC.Types.IO>_R <SDL.Video.Renderer.Texture>_N)
                         s')
                        `cast`
                      (GHC.Types.N:IO[0] <(SDL.Video.Renderer.Texture, GameVars.Vars)>_R)
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case (((SDL.Font.size
                           @ GameVars.MahppyBird
                           GameVars.$fMonadIOMahppyBird
                           font
                           str)
                          `cast`
                        (Trans
                             (GameVars.N:MahppyBird[0] <(GHC.Types.Int, GHC.Types.Int)>_N)
                             (Control.Monad.Trans.Reader.N:ReaderT[0]
                                  <*>_N
                                  <GameVars.Config>_R
                                  <Control.Monad.Trans.State.Lazy.StateT
                                     GameVars.Vars GHC.Types.IO>_R
                                  <(GHC.Types.Int, GHC.Types.Int)>_N))
                          eta)
                         `cast`
                       (Trans
                            (Nth:2
                                 (Nth:3
                                      (Trans
                                           (<(GHC.Types.Int, GHC.Types.Int)
                                             -> (GHC.Types.Float, GHC.Types.Float)>_R
                                            ->_R <Control.Monad.Trans.State.Lazy.StateT
                                                    GameVars.Vars
                                                    GHC.Types.IO
                                                    (GHC.Types.Int, GHC.Types.Int)>_R
                                            ->_R Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                     <GameVars.Vars>_N
                                                     <GHC.Types.IO>_R
                                                     <(GHC.Types.Float, GHC.Types.Float)>_N)
                                           (<(GHC.Types.Int, GHC.Types.Int)
                                             -> (GHC.Types.Float, GHC.Types.Float)>_R
                                            ->_R <Control.Monad.Trans.State.Lazy.StateT
                                                    GameVars.Vars
                                                    GHC.Types.IO
                                                    (GHC.Types.Int, GHC.Types.Int)>_R
                                            ->_R <GameVars.Vars>_R
                                            ->_R GHC.Types.N:IO[0]
                                                     <((GHC.Types.Float, GHC.Types.Float),
                                                       GameVars.Vars)>_R))))
                            (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                 <GameVars.Vars>_N
                                 <GHC.Types.IO>_R
                                 <(GHC.Types.Int, GHC.Types.Int)>_N))
                         (case ipv3 of wild1 { (,) a2 s'1 -> s'1 }))
                        `cast`
                      (GHC.Types.N:IO[0]
                           <((GHC.Types.Int, GHC.Types.Int), GameVars.Vars)>_R)
                        ipv2 of ds { (#,#) ipv4 ipv5 ->
                 case ipv5 of wild1 { (,) a2 s'1 ->
                 case a2 of wild2 { (,) a b ->
                 case (((f (SDL.Video.Renderer.Rectangle
                              @ GHC.Types.Float
                              pos
                              (case a of wild3 { GHC.Types.I# i ->
                               case b of wild4 { GHC.Types.I# i1 ->
                               Linear.V2.V2
                                 @ GHC.Types.Float
                                 (GHC.Types.F# (GHC.Prim.int2Float# i))
                                 (GHC.Types.F# (GHC.Prim.int2Float# i1)) } })))
                          `cast`
                        (Trans
                             (GameVars.N:MahppyBird[0] <SDL.Video.Renderer.Rectangle
                                                          GHC.Types.Float>_N)
                             (Control.Monad.Trans.Reader.N:ReaderT[0]
                                  <*>_N
                                  <GameVars.Config>_R
                                  <Control.Monad.Trans.State.Lazy.StateT
                                     GameVars.Vars GHC.Types.IO>_R
                                  <SDL.Video.Renderer.Rectangle GHC.Types.Float>_N))
                          eta)
                         `cast`
                       (Trans
                            (Nth:2
                                 (Trans
                                      (<Control.Monad.Trans.State.Lazy.StateT
                                          GameVars.Vars
                                          GHC.Types.IO
                                          (SDL.Video.Renderer.Rectangle GHC.Types.Float)>_R
                                       ->_R <SDL.Video.Renderer.Rectangle GHC.Types.Float
                                             -> Control.Monad.Trans.State.Lazy.StateT
                                                  GameVars.Vars GHC.Types.IO ()>_R
                                       ->_R Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                <GameVars.Vars>_N <GHC.Types.IO>_R <()>_N)
                                      (<Control.Monad.Trans.State.Lazy.StateT
                                          GameVars.Vars
                                          GHC.Types.IO
                                          (SDL.Video.Renderer.Rectangle GHC.Types.Float)>_R
                                       ->_R <SDL.Video.Renderer.Rectangle GHC.Types.Float
                                             -> Control.Monad.Trans.State.Lazy.StateT
                                                  GameVars.Vars GHC.Types.IO ()>_R
                                       ->_R <GameVars.Vars>_R
                                       ->_R GHC.Types.N:IO[0] <((), GameVars.Vars)>_R)))
                            (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                 <GameVars.Vars>_N
                                 <GHC.Types.IO>_R
                                 <SDL.Video.Renderer.Rectangle GHC.Types.Float>_N))
                         s'1)
                        `cast`
                      (GHC.Types.N:IO[0]
                           <(SDL.Video.Renderer.Rectangle GHC.Types.Float, GameVars.Vars)>_R)
                        ipv4 of ds3 { (#,#) ipv6 ipv7 ->
                 case ipv7 of wild3 { (,) a3 s'2 ->
                 case a3 of wild4 { SDL.Video.Renderer.Rectangle ds4 lengths ->
                 (((SDL.Video.Renderer.copy
                      @ GameVars.MahppyBird
                      GameVars.$fMonadIOMahppyBird
                      renderer
                      (case ipv3 of wild5 { (,) a4 s'3 -> a4 })
                      (GHC.Base.Nothing
                         @ (SDL.Video.Renderer.Rectangle Foreign.C.Types.CInt))
                      (GHC.Base.Just
                         @ (SDL.Video.Renderer.Rectangle Foreign.C.Types.CInt)
                         (SDL.Video.Renderer.Rectangle
                            @ Foreign.C.Types.CInt
                            (Util.roundV2
                               ds4
                                 `cast`
                               (Linear.Affine.N:Point[0] <Linear.V2.V2>_R <GHC.Types.Float>_N))
                              `cast`
                            (Sym (Linear.Affine.N:Point[0]
                                      <Linear.V2.V2>_R) <Foreign.C.Types.CInt>_N)
                            (Util.roundV2 lengths))))
                     `cast`
                   (Trans
                        (GameVars.N:MahppyBird[0] <()>_N)
                        (Control.Monad.Trans.Reader.N:ReaderT[0]
                             <*>_N
                             <GameVars.Config>_R
                             <Control.Monad.Trans.State.Lazy.StateT
                                GameVars.Vars GHC.Types.IO>_R
                             <()>_N))
                     eta)
                    `cast`
                  (Control.Monad.Trans.State.Lazy.N:StateT[0]
                       <GameVars.Vars>_N <GHC.Types.IO>_R <()>_N)
                    s'2)
                   `cast`
                 (GHC.Types.N:IO[0] <((), GameVars.Vars)>_R)
                   ipv6 } } } } } } } } } } } } } } }) -}
2af194a869e078422141bf1aa5805922
  $fRendererMahppyBird5 ::
    SDL.Video.Renderer.Rectangle GHC.Types.Float
    -> GameVars.Config
    -> GameVars.Vars
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, ((), GameVars.Vars) #)
  {- Arity: 4,
     Strictness: <S,1*U(1*U(U(U),U(U)),1*U(U(U),U(U)))><L,U(U,U(U),U)><L,U><S,U>,
     Inline: [0],
     Unfolding: InlineRule (4, True, False)
                (\ (w :: SDL.Video.Renderer.Rectangle GHC.Types.Float)
                   (w1 :: GameVars.Config)
                   (w2 :: GameVars.Vars)
                   (w3 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case w of ww { SDL.Video.Renderer.Rectangle ww1 ww2 ->
                 Renderer.$w$cdrawRectToScreen ww1 ww2 w1 w2 w3 }) -}
824accbce9a38d17298e00019a45d4ed
  $fRendererMahppyBird6 :: Linear.V4.V4 GHC.Word.Word8
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (Linear.V4.V4
                   @ GHC.Word.Word8
                   Renderer.$fRendererMahppyBird8
                   Renderer.$fRendererMahppyBird8
                   Renderer.$fRendererMahppyBird7
                   Renderer.$fRendererMahppyBird7) -}
207d65034e6c3551ece6a7f1b0f9048a
  $fRendererMahppyBird7 :: GHC.Word.Word8
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Word.W8# 255##) -}
626d2e96c689f096c0ebf2fbea40bddc
  $fRendererMahppyBird8 :: GHC.Word.Word8
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Word.W8# 0##) -}
7f6e1854b2ceb7fbfd48de7c2599c066
  $fRendererMahppyBird9 ::
    Linear.V4.V4 GHC.Word.Word8
    -> GameVars.Config
    -> GameVars.Vars
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, ((), GameVars.Vars) #)
  {- Arity: 4, Strictness: <L,U><L,U(U(U),U(U),U)><L,U><S,U>,
     Unfolding: (\ (color :: Linear.V4.V4 GHC.Word.Word8)
                   (eta :: GameVars.Config)
                   (eta1 :: GameVars.Vars)
                   (eta2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case GuiTransforms.$fGuiTransformsMahppyBird1
                        eta
                        eta1
                        eta2 of ds { (#,#) ipv ipv1 ->
                 let {
                   renderer :: SDL.Internal.Types.Renderer
                   = case eta of wild { GameVars.Config ds1 ds2 ds3 -> ds2 }
                 } in
                 case SDL.Video.Renderer.$wrendererDrawColor
                        renderer of ww { (#,#) ww1 ww2 ->
                 case (ww2 color)
                        `cast`
                      (Trans
                           (Nth:2
                                (Trans
                                     (<GHC.Types.IO ()>_R ->_R GameVars.N:MahppyBird[0] <()>_N)
                                     (<GHC.Types.IO ()>_R
                                      ->_R Trans
                                               (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                    <*>_N
                                                    <GameVars.Config>_R
                                                    <Control.Monad.Trans.State.Lazy.StateT
                                                       GameVars.Vars GHC.Types.IO>_R
                                                    <()>_N)
                                               (<GameVars.Config>_R
                                                ->_R Trans
                                                         (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                              <GameVars.Vars>_N
                                                              <GHC.Types.IO>_R
                                                              <()>_N)
                                                         (<GameVars.Vars>_R
                                                          ->_R GHC.Types.N:IO[0]
                                                                   <((), GameVars.Vars)>_R)))))
                           (GHC.Types.N:IO[0] <()>_R))
                        ipv of ds1 { (#,#) ipv2 ipv3 ->
                 (((SDL.Video.Renderer.fillRect
                      @ GameVars.MahppyBird
                      GameVars.$fMonadIOMahppyBird
                      renderer
                      (GHC.Base.Just
                         @ (SDL.Video.Renderer.Rectangle Foreign.C.Types.CInt)
                         (SDL.Video.Renderer.Rectangle
                            @ Foreign.C.Types.CInt
                            Renderer.$fRendererMahppyBird10
                              `cast`
                            (Sym (Linear.Affine.N:Point[0]
                                      <Linear.V2.V2>_R) <Foreign.C.Types.CInt>_N)
                            (case ipv1 of wild { (,) a1 s' -> Util.roundV2 a1 }))))
                     `cast`
                   (Trans
                        (GameVars.N:MahppyBird[0] <()>_N)
                        (Control.Monad.Trans.Reader.N:ReaderT[0]
                             <*>_N
                             <GameVars.Config>_R
                             <Control.Monad.Trans.State.Lazy.StateT
                                GameVars.Vars GHC.Types.IO>_R
                             <()>_N))
                     eta)
                    `cast`
                  (Control.Monad.Trans.State.Lazy.N:StateT[0]
                       <GameVars.Vars>_N <GHC.Types.IO>_R <()>_N)
                    (case ipv1 of wild { (,) a1 s' -> s' }))
                   `cast`
                 (GHC.Types.N:IO[0] <((), GameVars.Vars)>_R)
                   ipv2 } } }) -}
4bff7527266d763e41982645ac659e1e
  $fRendererMahppyBird_$ctoScreenCord ::
    Linear.Affine.Point Linear.V2.V2 GHC.Types.Float
    -> GameVars.MahppyBird
         (Linear.Affine.Point Linear.V2.V2 Foreign.C.Types.CInt)
  {- Arity: 1, Strictness: <L,1*U(U(U),U(U))>,
     Unfolding: (\ (ds :: Linear.Affine.Point
                            Linear.V2.V2 GHC.Types.Float) ->
                 let {
                   pos' :: Linear.V2.V2 Foreign.C.Types.CInt
                   = case ds
                            `cast`
                          (Linear.Affine.N:Point[0]
                               <Linear.V2.V2>_R <GHC.Types.Float>_N) of ww { Linear.V2.V2 ww1 ww2 ->
                     case ww1 of ww3 { GHC.Types.F# ww4 ->
                     case ww2 of ww5 { GHC.Types.F# ww6 ->
                     case GHC.Float.$w$cround1
                            @ GHC.Types.Int
                            GHC.Real.$fIntegralInt
                            ww4 of wild { GHC.Types.I# x# ->
                     case GHC.Float.$w$cround1
                            @ GHC.Types.Int
                            GHC.Real.$fIntegralInt
                            ww6 of wild1 { GHC.Types.I# x#1 ->
                     Linear.V2.V2
                       @ Foreign.C.Types.CInt
                       (GHC.Int.I32# (GHC.Prim.narrow32Int# x#))
                         `cast`
                       (Sym (Foreign.C.Types.N:CInt[0]))
                       (GHC.Int.I32# (GHC.Prim.narrow32Int# x#1))
                         `cast`
                       (Sym (Foreign.C.Types.N:CInt[0])) } } } } }
                 } in
                 (\ (r1 :: GameVars.Config)
                    (eta :: GameVars.Vars)
                    (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                  (# eta1,
                     (case pos' of wild { Linear.V2.V2 a1 b1 ->
                      case a1
                             `cast`
                           (Foreign.C.Types.N:CInt[0]) of wild1 { GHC.Int.I32# x# ->
                      case b1
                             `cast`
                           (Foreign.C.Types.N:CInt[0]) of wild2 { GHC.Int.I32# x#1 ->
                      case eta of wild3 { GameVars.Vars x1 x2 x3 x4 dt1 dt2 ->
                      case x3 of wild4 { GameVars.RenderingVars x7 dt4 dt5 dt3 dt6 dt7 ->
                      case dt4
                             `cast`
                           (Foreign.C.Types.N:CInt[0]) of wild5 { GHC.Int.I32# y# ->
                      case dt5
                             `cast`
                           (Foreign.C.Types.N:CInt[0]) of wild6 { GHC.Int.I32# y#1 ->
                      (Linear.V2.V2
                         @ Foreign.C.Types.CInt
                         (GHC.Int.I32# (GHC.Prim.narrow32Int# (GHC.Prim.-# x# y#)))
                           `cast`
                         (Sym (Foreign.C.Types.N:CInt[0]))
                         (GHC.Int.I32# (GHC.Prim.narrow32Int# (GHC.Prim.-# x#1 y#1)))
                           `cast`
                         (Sym (Foreign.C.Types.N:CInt[0])))
                        `cast`
                      (Trans
                           (Sym (Linear.Affine.N:Point[0]
                                     <Linear.V2.V2>_R) <Foreign.C.Types.CInt>_N)
                           (Nth:2
                                (Trans
                                     (<Linear.Affine.Point Linear.V2.V2 Foreign.C.Types.CInt>_R
                                      ->_R GameVars.N:MahppyBird[0] <Linear.Affine.Point
                                                                       Linear.V2.V2
                                                                       Foreign.C.Types.CInt>_N)
                                     (<Linear.Affine.Point Linear.V2.V2 Foreign.C.Types.CInt>_R
                                      ->_R Trans
                                               (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                    <*>_N
                                                    <GameVars.Config>_R
                                                    <Control.Monad.Trans.State.Lazy.StateT
                                                       GameVars.Vars GHC.Types.IO>_R
                                                    <Linear.Affine.Point
                                                       Linear.V2.V2 Foreign.C.Types.CInt>_N)
                                               (<GameVars.Config>_R
                                                ->_R Trans
                                                         (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                              <GameVars.Vars>_N
                                                              <GHC.Types.IO>_R
                                                              <Linear.Affine.Point
                                                                 Linear.V2.V2
                                                                 Foreign.C.Types.CInt>_N)
                                                         (<GameVars.Vars>_R
                                                          ->_R GHC.Types.N:IO[0]
                                                                   <(Linear.Affine.Point
                                                                       Linear.V2.V2
                                                                       Foreign.C.Types.CInt,
                                                                     GameVars.Vars)>_R)))))) } } } } } } },
                      eta) #))
                   `cast`
                 (Trans
                      (<GameVars.Config>_R
                       ->_R Trans
                                (<GameVars.Vars>_R
                                 ->_R Sym (GHC.Types.N:IO[0]
                                               <(Linear.Affine.Point
                                                   Linear.V2.V2 Foreign.C.Types.CInt,
                                                 GameVars.Vars)>_R))
                                (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                          <GameVars.Vars>_N
                                          <GHC.Types.IO>_R
                                          <Linear.Affine.Point
                                             Linear.V2.V2 Foreign.C.Types.CInt>_N)))
                      (Trans
                           (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                     <*>_N
                                     <GameVars.Config>_R
                                     <Control.Monad.Trans.State.Lazy.StateT
                                        GameVars.Vars GHC.Types.IO>_R
                                     <Linear.Affine.Point Linear.V2.V2 Foreign.C.Types.CInt>_N))
                           (Sym (GameVars.N:MahppyBird[0]) <Linear.Affine.Point
                                                              Linear.V2.V2
                                                              Foreign.C.Types.CInt>_N)))) -}
fa1e58da64c11a46a7954e3e554d1179
  $fRendererMahppyBird_$ctoScreenRect ::
    SDL.Video.Renderer.Rectangle GHC.Types.Float
    -> GameVars.MahppyBird
         (SDL.Video.Renderer.Rectangle Foreign.C.Types.CInt)
  {- Arity: 1, Strictness: <S,1*U(1*U(U(U),U(U)),1*U(U(U),U(U)))>,
     Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: SDL.Video.Renderer.Rectangle GHC.Types.Float) ->
                 case w of ww { SDL.Video.Renderer.Rectangle ww1 ww2 ->
                 Renderer.$w$ctoScreenRect ww1 ww2 }) -}
61a7f731404638c712776c32734c453b
  $fRendererMahppyBird_x :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 2000#) -}
004886caee130075225124f323487878
  $tc'C:Renderer :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11503016702312260166##
                   7595865281187843967##
                   Renderer.$trModule
                   Renderer.$tc'C:Renderer2
                   1#
                   Renderer.$tc'C:Renderer1) -}
d0322a2e7fa7a568d3f9764069f4d447
  $tc'C:Renderer1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
985116ad8c44278aef01db19e57ec4ff
  $tc'C:Renderer2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Renderer.$tc'C:Renderer3) -}
169060cb9eaa6b37cf9b1928f437229c
  $tc'C:Renderer3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'C:Renderer"#) -}
37df85e7918a835b8874e63ab716e278
  $tcRenderer :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3634858521700879879##
                   17035216356111501170##
                   Renderer.$trModule
                   Renderer.$trModule1
                   0#
                   Renderer.$tcRenderer1) -}
663d4e4c083b23888b2e8573143e897e
  $tcRenderer1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
0e2832ebeda36b318c9904793a21195d
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Renderer.$trModule3
                   Renderer.$trModule1) -}
1d40db344231786ff17e9b7ad9e8159a
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Renderer.$trModule2) -}
e9be862cb33317f06e572e42e6c46b3e
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Renderer"#) -}
e29bdf84f3996480183357d54b57cbe7
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Renderer.$trModule4) -}
7c072f779f4bf5efbfe0294e3e0a4719
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("main"#) -}
6bc938feab5d7c122b83367705fbc860
  $w$cdrawRectToScreen ::
    Linear.Affine.Point Linear.V2.V2 GHC.Types.Float
    -> Linear.V2.V2 GHC.Types.Float
    -> GameVars.Config
    -> GameVars.Vars
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, ((), GameVars.Vars) #)
  {- Arity: 5,
     Strictness: <L,1*U(U(U),U(U))><L,1*U(U(U),U(U))><L,U(U,U(U),U)><L,U><S,U>,
     Inline: [0],
     Unfolding: (\ (ww :: Linear.Affine.Point
                            Linear.V2.V2 GHC.Types.Float)
                   (ww1 :: Linear.V2.V2 GHC.Types.Float)
                   (w :: GameVars.Config)
                   (w1 :: GameVars.Vars)
                   (w2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 let {
                   renderer :: SDL.Internal.Types.Renderer
                   = case w of wild { GameVars.Config ds1 ds2 ds3 -> ds2 }
                 } in
                 case SDL.Video.Renderer.$wrendererDrawColor
                        renderer of ww2 { (#,#) ww3 ww4 ->
                 case (ww4 Renderer.$fRendererMahppyBird6)
                        `cast`
                      (Trans
                           (Nth:2
                                (Trans
                                     (<GHC.Types.IO ()>_R ->_R GameVars.N:MahppyBird[0] <()>_N)
                                     (<GHC.Types.IO ()>_R
                                      ->_R Trans
                                               (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                    <*>_N
                                                    <GameVars.Config>_R
                                                    <Control.Monad.Trans.State.Lazy.StateT
                                                       GameVars.Vars GHC.Types.IO>_R
                                                    <()>_N)
                                               (<GameVars.Config>_R
                                                ->_R Trans
                                                         (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                              <GameVars.Vars>_N
                                                              <GHC.Types.IO>_R
                                                              <()>_N)
                                                         (<GameVars.Vars>_R
                                                          ->_R GHC.Types.N:IO[0]
                                                                   <((), GameVars.Vars)>_R)))))
                           (GHC.Types.N:IO[0] <()>_R))
                        w2 of ds1 { (#,#) ipv ipv1 ->
                 (((SDL.Video.Renderer.fillRect
                      @ GameVars.MahppyBird
                      GameVars.$fMonadIOMahppyBird
                      renderer
                      (GHC.Base.Just
                         @ (SDL.Video.Renderer.Rectangle Foreign.C.Types.CInt)
                         (SDL.Video.Renderer.Rectangle
                            @ Foreign.C.Types.CInt
                            (Util.roundV2
                               ww
                                 `cast`
                               (Linear.Affine.N:Point[0] <Linear.V2.V2>_R <GHC.Types.Float>_N))
                              `cast`
                            (Sym (Linear.Affine.N:Point[0]
                                      <Linear.V2.V2>_R) <Foreign.C.Types.CInt>_N)
                            (Util.roundV2 ww1))))
                     `cast`
                   (Trans
                        (GameVars.N:MahppyBird[0] <()>_N)
                        (Control.Monad.Trans.Reader.N:ReaderT[0]
                             <*>_N
                             <GameVars.Config>_R
                             <Control.Monad.Trans.State.Lazy.StateT
                                GameVars.Vars GHC.Types.IO>_R
                             <()>_N))
                     w)
                    `cast`
                  (Control.Monad.Trans.State.Lazy.N:StateT[0]
                       <GameVars.Vars>_N <GHC.Types.IO>_R <()>_N)
                    w1)
                   `cast`
                 (GHC.Types.N:IO[0] <((), GameVars.Vars)>_R)
                   ipv } }) -}
2162045ac4385b7ed6ecfdde72e2e8ec
  $w$ctoScreenRect ::
    Linear.Affine.Point Linear.V2.V2 GHC.Types.Float
    -> Linear.V2.V2 GHC.Types.Float
    -> GameVars.MahppyBird
         (SDL.Video.Renderer.Rectangle Foreign.C.Types.CInt)
  {- Arity: 2, Strictness: <L,1*U(U(U),U(U))><L,1*U(U(U),U(U))>,
     Inline: [0],
     Unfolding: (\ (ww :: Linear.Affine.Point
                            Linear.V2.V2 GHC.Types.Float)
                   (ww1 :: Linear.V2.V2 GHC.Types.Float) ->
                 let {
                   lvl :: Linear.V2.V2 Foreign.C.Types.CInt
                   = case ww1 of ww2 { Linear.V2.V2 ww3 ww4 ->
                     case ww3 of ww5 { GHC.Types.F# ww6 ->
                     case ww4 of ww7 { GHC.Types.F# ww8 ->
                     case GHC.Float.$w$cround1
                            @ GHC.Types.Int
                            GHC.Real.$fIntegralInt
                            ww6 of wild { GHC.Types.I# x# ->
                     case GHC.Float.$w$cround1
                            @ GHC.Types.Int
                            GHC.Real.$fIntegralInt
                            ww8 of wild1 { GHC.Types.I# x#1 ->
                     Linear.V2.V2
                       @ Foreign.C.Types.CInt
                       (GHC.Int.I32# (GHC.Prim.narrow32Int# x#))
                         `cast`
                       (Sym (Foreign.C.Types.N:CInt[0]))
                       (GHC.Int.I32# (GHC.Prim.narrow32Int# x#1))
                         `cast`
                       (Sym (Foreign.C.Types.N:CInt[0])) } } } } }
                 } in
                 let {
                   m1 :: GameVars.MahppyBird
                           (Linear.Affine.Point Linear.V2.V2 Foreign.C.Types.CInt)
                   = Renderer.$fRendererMahppyBird_$ctoScreenCord ww
                 } in
                 (\ (r1 :: GameVars.Config) ->
                  let {
                    m2 :: Control.Monad.Trans.State.Lazy.StateT
                            GameVars.Vars
                            GHC.Types.IO
                            (Linear.Affine.Point Linear.V2.V2 Foreign.C.Types.CInt)
                    = m1
                        `cast`
                      (Trans
                           (GameVars.N:MahppyBird[0] <Linear.Affine.Point
                                                        Linear.V2.V2 Foreign.C.Types.CInt>_N)
                           (Control.Monad.Trans.Reader.N:ReaderT[0]
                                <*>_N
                                <GameVars.Config>_R
                                <Control.Monad.Trans.State.Lazy.StateT
                                   GameVars.Vars GHC.Types.IO>_R
                                <Linear.Affine.Point Linear.V2.V2 Foreign.C.Types.CInt>_N))
                        r1
                  } in
                  (\ (s1 :: GameVars.Vars)
                     (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                   case (m2
                           `cast`
                         (Trans
                              (Nth:2
                                   (Trans
                                        (<Control.Monad.Trans.State.Lazy.StateT
                                            GameVars.Vars
                                            GHC.Types.IO
                                            (Linear.Affine.Point
                                               Linear.V2.V2 Foreign.C.Types.CInt)>_R
                                         ->_R <Linear.Affine.Point Linear.V2.V2 Foreign.C.Types.CInt
                                               -> Control.Monad.Trans.State.Lazy.StateT
                                                    GameVars.Vars
                                                    GHC.Types.IO
                                                    (SDL.Video.Renderer.Rectangle
                                                       Foreign.C.Types.CInt)>_R
                                         ->_R Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                  <GameVars.Vars>_N
                                                  <GHC.Types.IO>_R
                                                  <SDL.Video.Renderer.Rectangle
                                                     Foreign.C.Types.CInt>_N)
                                        (<Control.Monad.Trans.State.Lazy.StateT
                                            GameVars.Vars
                                            GHC.Types.IO
                                            (Linear.Affine.Point
                                               Linear.V2.V2 Foreign.C.Types.CInt)>_R
                                         ->_R <Linear.Affine.Point Linear.V2.V2 Foreign.C.Types.CInt
                                               -> Control.Monad.Trans.State.Lazy.StateT
                                                    GameVars.Vars
                                                    GHC.Types.IO
                                                    (SDL.Video.Renderer.Rectangle
                                                       Foreign.C.Types.CInt)>_R
                                         ->_R <GameVars.Vars>_R
                                         ->_R GHC.Types.N:IO[0]
                                                  <(SDL.Video.Renderer.Rectangle
                                                      Foreign.C.Types.CInt,
                                                    GameVars.Vars)>_R)))
                              (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                   <GameVars.Vars>_N
                                   <GHC.Types.IO>_R
                                   <Linear.Affine.Point Linear.V2.V2 Foreign.C.Types.CInt>_N))
                           s1)
                          `cast`
                        (GHC.Types.N:IO[0]
                             <(Linear.Affine.Point Linear.V2.V2 Foreign.C.Types.CInt,
                               GameVars.Vars)>_R)
                          s of ds1 { (#,#) ipv ipv1 ->
                   (# ipv,
                      (SDL.Video.Renderer.Rectangle
                         @ Foreign.C.Types.CInt
                         (case ipv1 of wild { (,) a1 s' -> a1 })
                         lvl,
                       case ipv1 of wild { (,) a1 s' -> s' }) #) })
                    `cast`
                  (Nth:3
                       (Nth:3
                            (Trans
                                 (<Control.Monad.Trans.State.Lazy.StateT
                                     GameVars.Vars
                                     GHC.Types.IO
                                     (Linear.Affine.Point Linear.V2.V2 Foreign.C.Types.CInt)>_R
                                  ->_R <Linear.Affine.Point Linear.V2.V2 Foreign.C.Types.CInt
                                        -> Control.Monad.Trans.State.Lazy.StateT
                                             GameVars.Vars
                                             GHC.Types.IO
                                             (SDL.Video.Renderer.Rectangle Foreign.C.Types.CInt)>_R
                                  ->_R <GameVars.Vars>_R
                                  ->_R Sym (GHC.Types.N:IO[0]
                                                <(SDL.Video.Renderer.Rectangle Foreign.C.Types.CInt,
                                                  GameVars.Vars)>_R))
                                 (<Control.Monad.Trans.State.Lazy.StateT
                                     GameVars.Vars
                                     GHC.Types.IO
                                     (Linear.Affine.Point Linear.V2.V2 Foreign.C.Types.CInt)>_R
                                  ->_R <Linear.Affine.Point Linear.V2.V2 Foreign.C.Types.CInt
                                        -> Control.Monad.Trans.State.Lazy.StateT
                                             GameVars.Vars
                                             GHC.Types.IO
                                             (SDL.Video.Renderer.Rectangle Foreign.C.Types.CInt)>_R
                                  ->_R Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                <GameVars.Vars>_N
                                                <GHC.Types.IO>_R
                                                <SDL.Video.Renderer.Rectangle
                                                   Foreign.C.Types.CInt>_N))))))
                   `cast`
                 (Trans
                      (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                <*>_N
                                <GameVars.Config>_R
                                <Control.Monad.Trans.State.Lazy.StateT
                                   GameVars.Vars GHC.Types.IO>_R
                                <SDL.Video.Renderer.Rectangle Foreign.C.Types.CInt>_N))
                      (Sym (GameVars.N:MahppyBird[0]) <SDL.Video.Renderer.Rectangle
                                                         Foreign.C.Types.CInt>_N))) -}
954488f5d410faad75e1ec6c8095c114
  $wouter ::
    GHC.Prim.MutableByteArray# GHC.Prim.RealWorld
    -> GHC.Prim.Int#
    -> [GHC.Types.Char]
    -> GHC.Prim.Int#
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 5, Strictness: <L,U><S,U><S,1*U><S,U><S,U>,
     Inline: [0] -}
06a8e382140d6ff54e61b12c137a9e52
  $wroundSDLRect ::
    GHC.Prim.Float#
    -> GHC.Prim.Float#
    -> GHC.Prim.Float#
    -> GHC.Prim.Float#
    -> (# Linear.Affine.Point Linear.V2.V2 Foreign.C.Types.CInt,
          Linear.V2.V2 Foreign.C.Types.CInt #)
  {- Arity: 4, Strictness: <L,U><L,U><L,U><L,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Float#)
                   (ww1 :: GHC.Prim.Float#)
                   (ww2 :: GHC.Prim.Float#)
                   (ww3 :: GHC.Prim.Float#) ->
                 (# case (GHC.Float.$w$cround1
                            @ Foreign.C.Types.CInt
                            Foreign.C.Types.$fIntegralCInt
                            ww)
                           `cast`
                         (Foreign.C.Types.N:CInt[0]) of nt { GHC.Int.I32# ipv ->
                    case (GHC.Float.$w$cround1
                            @ Foreign.C.Types.CInt
                            Foreign.C.Types.$fIntegralCInt
                            ww1)
                           `cast`
                         (Foreign.C.Types.N:CInt[0]) of nt1 { GHC.Int.I32# ipv1 ->
                    (Linear.V2.V2
                       @ Foreign.C.Types.CInt
                       nt `cast` (Sym (Foreign.C.Types.N:CInt[0]))
                       nt1 `cast` (Sym (Foreign.C.Types.N:CInt[0])))
                      `cast`
                    (Sym (Linear.Affine.N:Point[0]
                              <Linear.V2.V2>_R) <Foreign.C.Types.CInt>_N) } },
                    case (GHC.Float.$w$cround1
                            @ Foreign.C.Types.CInt
                            Foreign.C.Types.$fIntegralCInt
                            ww2)
                           `cast`
                         (Foreign.C.Types.N:CInt[0]) of nt { GHC.Int.I32# ipv ->
                    case (GHC.Float.$w$cround1
                            @ Foreign.C.Types.CInt
                            Foreign.C.Types.$fIntegralCInt
                            ww3)
                           `cast`
                         (Foreign.C.Types.N:CInt[0]) of nt1 { GHC.Int.I32# ipv1 ->
                    Linear.V2.V2
                      @ Foreign.C.Types.CInt
                      nt `cast` (Sym (Foreign.C.Types.N:CInt[0]))
                      nt1 `cast` (Sym (Foreign.C.Types.N:CInt[0])) } } #)) -}
185eee8bdf18b8e33e3728180dd1fc7b
  class GHC.Base.Monad m => Renderer (m :: * -> *) where
    drawObjects :: [m ()] -> m ()
    drawObjectsWithDt :: [m ()] -> m ()
    drawBg :: m ()
    drawPlayer :: m ()
    drawScore :: m ()
    drawWalls :: m ()
    wallToSDLRect :: Walls.Wall
                     -> m (SDL.Video.Renderer.Rectangle Foreign.C.Types.CInt,
                           SDL.Video.Renderer.Rectangle Foreign.C.Types.CInt)
    drawScreenOverlay :: Linear.V4.V4 GHC.Word.Word8 -> m ()
    drawRectToScreen :: SDL.Video.Renderer.Rectangle GHC.Types.Float
                        -> m ()
    drawTextToScreen :: SDL.Font.Font
                        -> Data.Text.Internal.Text
                        -> Linear.Affine.Point Linear.V2.V2 GHC.Types.Float
                        -> Linear.V4.V4 GHC.Word.Word8
                        -> (SDL.Video.Renderer.Rectangle GHC.Types.Float
                            -> m (SDL.Video.Renderer.Rectangle GHC.Types.Float))
                        -> m ()
    drawBtnToScreen :: Buttons.ButtonAttr -> m ()
    drawTextureToScreen :: SDL.Video.Renderer.Rectangle GHC.Types.Float
                           -> SDL.Video.Renderer.Texture -> m ()
    presentRenderer :: m ()
    toScreenCord :: Linear.Affine.Point Linear.V2.V2 GHC.Types.Float
                    -> m (Linear.Affine.Point Linear.V2.V2 Foreign.C.Types.CInt)
    toScreenRect :: SDL.Video.Renderer.Rectangle GHC.Types.Float
                    -> m (SDL.Video.Renderer.Rectangle Foreign.C.Types.CInt)
    {-# MINIMAL drawObjects, drawObjectsWithDt, drawBg, drawPlayer,
                drawScore, drawWalls, wallToSDLRect, drawScreenOverlay,
                drawRectToScreen, drawTextToScreen, drawBtnToScreen,
                drawTextureToScreen, presentRenderer, toScreenCord,
                toScreenRect #-}
27678d2132faed5cd5ee83f1ad9ea678
  roundSDLRect ::
    SDL.Video.Renderer.Rectangle GHC.Types.Float
    -> SDL.Video.Renderer.Rectangle Foreign.C.Types.CInt
  {- Arity: 1,
     Strictness: <S(S(S(S)S(S))S(S(S)S(S))),1*U(1*U(U(U),U(U)),1*U(U(U),U(U)))>m,
     Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: SDL.Video.Renderer.Rectangle GHC.Types.Float) ->
                 case w of ww { SDL.Video.Renderer.Rectangle ww1 ww2 ->
                 case ww1
                        `cast`
                      (Linear.Affine.N:Point[0]
                           <Linear.V2.V2>_R <GHC.Types.Float>_N) of ww3 { Linear.V2.V2 ww4 ww5 ->
                 case ww4 of ww6 { GHC.Types.F# ww7 ->
                 case ww5 of ww8 { GHC.Types.F# ww9 ->
                 case ww2 of ww10 { Linear.V2.V2 ww11 ww12 ->
                 case ww11 of ww13 { GHC.Types.F# ww14 ->
                 case ww12 of ww15 { GHC.Types.F# ww16 ->
                 case Renderer.$wroundSDLRect
                        ww7
                        ww9
                        ww14
                        ww16 of ww17 { (#,#) ww18 ww19 ->
                 SDL.Video.Renderer.Rectangle
                   @ Foreign.C.Types.CInt
                   ww18
                   ww19 } } } } } } } }) -}
instance Renderer.Renderer [GameVars.MahppyBird]
  = Renderer.$fRendererMahppyBird
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

