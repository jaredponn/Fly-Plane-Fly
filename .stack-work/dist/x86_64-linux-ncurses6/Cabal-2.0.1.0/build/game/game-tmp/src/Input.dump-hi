
==================== FINAL INTERFACE ====================
2018-06-05 00:36:02.905045836 UTC

interface main:Input 8022
  interface hash: 653714ce496279c900bf4217097931ba
  ABI hash: 56e539d2b22425f97c9c19a695bc89a3
  export-list hash: 05cbb0277d9c9d8e0986644624bd40b0
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: fbfc9b4f0124b3a129b4a2321798f29f
  sig of: Nothing
  used TH splices: False
  where
exports:
  Input.isMouseTap
  Input.isSpaceTap
  Input.keyEventIs
  Input.HasInput{Input.getInput Input.setInput Input.updateInput}
module dependencies: Animations GameVars Walls
package dependencies: QuickCheck-2.10.1 Stack-0.3.2
                      StateVar-1.1.1.0 Stream-0.4.7.2 adjunctions-4.4 array-0.5.2.0
                      base-4.10.1.0 base-orphans-0.7 bifunctors-5.5.2 binary-0.8.5.1
                      bytes-0.15.4 bytestring-0.10.8.2 call-stack-0.1.0 cereal-0.5.5.0
                      comonad-5.0.3 containers-0.5.10.2 contravariant-1.4.1
                      data-default-class-0.1.2.0 deepseq-1.4.3.0 distributive-0.5.3
                      exceptions-0.8.3 free-5.0.2 ghc-boot-th-8.2.2 ghc-prim-0.5.1.1
                      hashable-1.2.7.0 integer-gmp-1.0.1.0 integer-logarithms-1.0.2.1
                      kan-extensions-5.1 lazysmallcheck-0.6 lens-4.16.1
                      lifted-base-0.2.3.12 linear-1.20.7 monad-control-1.0.2.3 mtl-2.2.2
                      pretty-1.1.3.3 primitive-0.6.3.0 profunctors-5.2.2 random-1.1
                      reflection-2.1.3 scientific-0.3.6.0 sdl2-2.4.0.1 sdl2-mixer-1.1.0
                      sdl2-ttf-2.0.2 semigroupoids-5.2.2 stm-2.4.5.0 tagged-0.8.5
                      template-haskell-2.12.0.0 text-1.2.3.0 tf-random-0.5
                      th-abstraction-0.2.6.0 time-1.8.0.2 transformers-0.5.2.0
                      transformers-base-0.4.4 transformers-compat-0.5.1.4
                      unordered-containers-0.2.9.0 vector-0.12.0.1
orphans: time-1.8.0.2:Data.Time.Clock.TAI
         reflection-2.1.3:Data.Reflection
         vector-0.12.0.1:Data.Vector.Unboxed
         hashable-1.2.7.0:Data.Hashable.Generic text-1.2.3.0:Data.Text.Lazy
         linear-1.20.7:Linear.Instances base-orphans-0.7:Data.Orphans
         text-1.2.3.0:Data.Text binary-0.8.5.1:Data.Binary.Generic
         text-1.2.3.0:Data.Text.Show
         bytestring-0.10.8.2:Data.ByteString.Builder
         vector-0.12.0.1:Data.Vector.Fusion.Bundle
         stm-2.4.5.0:Control.Monad.STM time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian
         transformers-0.5.2.0:Control.Monad.Trans.Error
         base-4.10.1.0:GHC.Float base-4.10.1.0:GHC.Base
family instance modules: adjunctions-4.4:Data.Functor.Rep
                         base-4.10.1.0:Control.Applicative base-4.10.1.0:Data.Complex
                         base-4.10.1.0:Data.Either base-4.10.1.0:Data.Functor.Compose
                         base-4.10.1.0:Data.Functor.Const
                         base-4.10.1.0:Data.Functor.Identity
                         base-4.10.1.0:Data.Functor.Product base-4.10.1.0:Data.Functor.Sum
                         base-4.10.1.0:Data.List.NonEmpty base-4.10.1.0:Data.Monoid
                         base-4.10.1.0:Data.Semigroup base-4.10.1.0:Data.Type.Equality
                         base-4.10.1.0:Data.Version base-4.10.1.0:Data.Void
                         base-4.10.1.0:GHC.Exts base-4.10.1.0:GHC.Generics
                         base-4.10.1.0:GHC.IO.Exception base-4.10.1.0:GHC.TypeLits
                         base-4.10.1.0:GHC.TypeNats bifunctors-5.5.2:Data.Bifunctor.Biff
                         bifunctors-5.5.2:Data.Bifunctor.Clown
                         bifunctors-5.5.2:Data.Bifunctor.Fix
                         bifunctors-5.5.2:Data.Bifunctor.Flip
                         bifunctors-5.5.2:Data.Bifunctor.Join
                         bifunctors-5.5.2:Data.Bifunctor.Joker
                         bifunctors-5.5.2:Data.Bifunctor.Product
                         bifunctors-5.5.2:Data.Bifunctor.Sum
                         bifunctors-5.5.2:Data.Bifunctor.Tannen
                         bifunctors-5.5.2:Data.Bifunctor.Wrapped bytes-0.15.4:Data.Bytes.Get
                         bytes-0.15.4:Data.Bytes.Signed bytes-0.15.4:Data.Bytes.VarInt
                         containers-0.5.10.2:Data.IntMap.Internal
                         containers-0.5.10.2:Data.IntSet.Internal
                         containers-0.5.10.2:Data.Map.Internal
                         containers-0.5.10.2:Data.Sequence.Internal
                         containers-0.5.10.2:Data.Set.Internal containers-0.5.10.2:Data.Tree
                         free-5.0.2:Control.Comonad.Cofree
                         free-5.0.2:Control.Comonad.Trans.Cofree
                         free-5.0.2:Control.Monad.Free free-5.0.2:Control.Monad.Trans.Free
                         ghc-boot-th-8.2.2:GHC.ForeignSrcLang.Type
                         ghc-boot-th-8.2.2:GHC.LanguageExtensions.Type
                         kan-extensions-5.1:Data.Functor.Day
                         kan-extensions-5.1:Data.Functor.Yoneda lens-4.16.1:Control.Lens.At
                         lens-4.16.1:Control.Lens.Internal.Indexed
                         lens-4.16.1:Control.Lens.Reified lens-4.16.1:Control.Lens.Tuple
                         lens-4.16.1:Control.Lens.Wrapped lens-4.16.1:Control.Lens.Zoom
                         linear-1.20.7:Linear.Affine linear-1.20.7:Linear.Plucker
                         linear-1.20.7:Linear.Quaternion linear-1.20.7:Linear.V
                         linear-1.20.7:Linear.V0 linear-1.20.7:Linear.V1
                         linear-1.20.7:Linear.V2 linear-1.20.7:Linear.V3
                         linear-1.20.7:Linear.V4
                         monad-control-1.0.2.3:Control.Monad.Trans.Control
                         pretty-1.1.3.3:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.3:Text.PrettyPrint.HughesPJ
                         primitive-0.6.3.0:Control.Monad.Primitive
                         primitive-0.6.3.0:Data.Primitive.Array
                         primitive-0.6.3.0:Data.Primitive.ByteArray
                         profunctors-5.2.2:Data.Profunctor.Composition
                         profunctors-5.2.2:Data.Profunctor.Rep sdl2-2.4.0.1:SDL.Audio
                         sdl2-2.4.0.1:SDL.Event sdl2-2.4.0.1:SDL.Exception
                         sdl2-2.4.0.1:SDL.Hint sdl2-2.4.0.1:SDL.Init
                         sdl2-2.4.0.1:SDL.Input.GameController
                         sdl2-2.4.0.1:SDL.Input.Joystick sdl2-2.4.0.1:SDL.Input.Keyboard
                         sdl2-2.4.0.1:SDL.Input.Keyboard.Codes sdl2-2.4.0.1:SDL.Input.Mouse
                         sdl2-2.4.0.1:SDL.Internal.Types sdl2-2.4.0.1:SDL.Power
                         sdl2-2.4.0.1:SDL.Time sdl2-2.4.0.1:SDL.Video
                         sdl2-2.4.0.1:SDL.Video.OpenGL sdl2-2.4.0.1:SDL.Video.Renderer
                         sdl2-ttf-2.0.2:SDL.Font tagged-0.8.5:Data.Tagged
                         template-haskell-2.12.0.0:Language.Haskell.TH.Syntax
                         text-1.2.3.0:Data.Text text-1.2.3.0:Data.Text.Lazy
                         th-abstraction-0.2.6.0:Language.Haskell.TH.Datatype
                         unordered-containers-0.2.9.0:Data.HashMap.Base
                         unordered-containers-0.2.9.0:Data.HashSet
                         vector-0.12.0.1:Data.Vector vector-0.12.0.1:Data.Vector.Primitive
                         vector-0.12.0.1:Data.Vector.Storable
                         vector-0.12.0.1:Data.Vector.Unboxed
                         vector-0.12.0.1:Data.Vector.Unboxed.Base
import  -/  base-4.10.1.0:Control.Monad.IO.Class 9d78cd0f73a837f3c00753bd212b9f2c
import  -/  base-4.10.1.0:Data.Foldable 9ed87455d68e87ff2b5b8725eae9897e
import  -/  base-4.10.1.0:Foreign.C.Types 936c0db027291520097b61fd8686710a
import  -/  base-4.10.1.0:GHC.Base 782fd99b5e36f3698a26179a49afca64
import  -/  base-4.10.1.0:Prelude 31945b7d0084063347fc52506d3a4020
import  -/  ghc-prim-0.5.1.1:GHC.Classes 93e2660065dce9329577e83d76d8f0d4
import  -/  lens-4.16.1:Control.Lens d35b54db874b2147b5ffe1d3cd39d59d
import  -/  lens-4.16.1:Control.Lens.Getter be8fceadc62581701bcf558f995a8aa3
import  -/  lens-4.16.1:Control.Lens.Setter 31b5ab0739c579bd36402b436aadb7a0
import  -/  linear-1.20.7:Linear.Affine f4ed1aa58b28d63beac82829593554b3
import  -/  GameVars c97b478d52eb65df6d94cfdf494ea2ce
  exports: 54748b09c2a15e9d35b796e54eb1daea
  Input 2b358ec8c687e8f33c55a4723db9e95a
  Input 14baa3ae6b26e7d8a8967e8549c7576d
  MahppyBird 1989f26957dc34ff4b450af06c2d546d
  Vars 5829ea20be4fb9a24ab87f3fe067aa3c
  _isEsc 14baa3ae6b26e7d8a8967e8549c7576d
  _isSpace 14baa3ae6b26e7d8a8967e8549c7576d
  _mousePos 14baa3ae6b26e7d8a8967e8549c7576d
  _mousePress 14baa3ae6b26e7d8a8967e8549c7576d
  kInput ef872176f9b53602ccf81a16a4b8db0e
import  -/  mtl-2.2.2:Control.Monad.Reader 8d63edf5dfaf25ad085eae4468bdd77e
import  -/  mtl-2.2.2:Control.Monad.State 4acb2e6037f370fa4b91900d626e6406
import  -/  mtl-2.2.2:Control.Monad.State.Class de8813e114276746770717ab3ee06916
import  -/  sdl2-2.4.0.1:SDL 24b907aeafb5c6d95ad8ce8f19ccd6b3
import  -/  sdl2-2.4.0.1:SDL.Event aa9ec7b765d277cb0619d5ae590748b4
import  -/  sdl2-2.4.0.1:SDL.Input.Keyboard 105c312429e53f56d62615f024ff8a66
import  -/  sdl2-2.4.0.1:SDL.Input.Keyboard.Codes 7090cc5797bf17ee2663487619600f20
import  -/  sdl2-2.4.0.1:SDL.Input.Mouse fa14812892af6cd814bcd15a9064fa6c
16315d0f5b666f9602f148cc4651e589
  $fHasInputMahppyBird :: Input.HasInput GameVars.MahppyBird
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ GameVars.MahppyBird
                  GameVars.$fMonadMahppyBird
                  Input.$fHasInputMahppyBird3
                    `cast`
                  (Trans
                       (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                 <*>_N
                                 <GameVars.Config>_R
                                 <Control.Monad.Trans.State.Lazy.StateT
                                    GameVars.Vars GHC.Types.IO>_R
                                 <()>_N))
                       (Sym (GameVars.N:MahppyBird[0]) <()>_N))
                  Input.$fHasInputMahppyBird2
                    `cast`
                  (<GameVars.Input>_R
                   ->_R Trans
                            (<GameVars.Config>_R
                             ->_R Trans
                                      (<GameVars.Vars>_R
                                       ->_R Sym (GHC.Types.N:IO[0] <((), GameVars.Vars)>_R))
                                      (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                <GameVars.Vars>_N <GHC.Types.IO>_R <()>_N)))
                            (Trans
                                 (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                           <*>_N
                                           <GameVars.Config>_R
                                           <Control.Monad.Trans.State.Lazy.StateT
                                              GameVars.Vars GHC.Types.IO>_R
                                           <()>_N))
                                 (Sym (GameVars.N:MahppyBird[0]) <()>_N)))
                  Input.$fHasInputMahppyBird1
                    `cast`
                  (Trans
                       (<GameVars.Config>_R
                        ->_R Trans
                                 (<GameVars.Vars>_R
                                  ->_R Sym (GHC.Types.N:IO[0] <(GameVars.Input, GameVars.Vars)>_R))
                                 (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                           <GameVars.Vars>_N <GHC.Types.IO>_R <GameVars.Input>_N)))
                       (Trans
                            (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                      <*>_N
                                      <GameVars.Config>_R
                                      <Control.Monad.Trans.State.Lazy.StateT
                                         GameVars.Vars GHC.Types.IO>_R
                                      <GameVars.Input>_N))
                            (Sym (GameVars.N:MahppyBird[0]) <GameVars.Input>_N))) -}
813e3c084942b097dfa7e39b092207be
  $fHasInputMahppyBird1 ::
    GameVars.Config
    -> GameVars.Vars
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          (GameVars.Input, GameVars.Vars) #)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,A><L,U(U,U,U,U,U,U)><S,U>,
     Unfolding: InlineRule (3, True, False)
                (\ (r1 :: GameVars.Config)
                   (eta :: GameVars.Vars)
                   (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 (# eta1,
                    (case eta of wild { GameVars.Vars x1 x2 x3 x4 dt1 dt2 -> x4 },
                     eta) #)) -}
0c15f0fcce0ec6316d698d1f1e29ea77
  $fHasInputMahppyBird2 ::
    GameVars.Input
    -> GameVars.Config
    -> GameVars.Vars
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, ((), GameVars.Vars) #)
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,U><L,A><L,1*U(U,U,U,A,U,U)><S,U>,
     Unfolding: InlineRule (4, True, False)
                (\ (input :: GameVars.Input)
                   (eta :: GameVars.Config)
                   (eta1 :: GameVars.Vars)
                   (eta2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 (# eta2,
                    (GHC.Tuple.(),
                     case eta1 of wild { GameVars.Vars x1 x2 x3 x4 dt1 dt2 ->
                     GameVars.Vars x1 x2 x3 input dt1 dt2 }) #)) -}
6cb40d7b9f6d60f75e150eefa1be14c2
  $fHasInputMahppyBird3 ::
    GameVars.Config
    -> Control.Monad.Trans.State.Lazy.StateT
         GameVars.Vars GHC.Types.IO ()
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ (r1 :: GameVars.Config) ->
                 let {
                   m2 :: Control.Monad.Trans.State.Lazy.StateT
                           GameVars.Vars GHC.Types.IO [SDL.Event.Event]
                   = Input.$fHasInputMahppyBird4
                       `cast`
                     (Trans
                          (GameVars.N:MahppyBird[0] <[SDL.Event.Event]>_N)
                          (Control.Monad.Trans.Reader.N:ReaderT[0]
                               <*>_N
                               <GameVars.Config>_R
                               <Control.Monad.Trans.State.Lazy.StateT
                                  GameVars.Vars GHC.Types.IO>_R
                               <[SDL.Event.Event]>_N))
                       r1
                 } in
                 (\ (s1 :: GameVars.Vars)
                    (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                  case (m2
                          `cast`
                        (Trans
                             (Nth:2
                                  (Trans
                                       (<Control.Monad.Trans.State.Lazy.StateT
                                           GameVars.Vars GHC.Types.IO [SDL.Event.Event]>_R
                                        ->_R <[SDL.Event.Event]
                                              -> Control.Monad.Trans.State.Lazy.StateT
                                                   GameVars.Vars GHC.Types.IO ()>_R
                                        ->_R Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                 <GameVars.Vars>_N <GHC.Types.IO>_R <()>_N)
                                       (<Control.Monad.Trans.State.Lazy.StateT
                                           GameVars.Vars GHC.Types.IO [SDL.Event.Event]>_R
                                        ->_R <[SDL.Event.Event]
                                              -> Control.Monad.Trans.State.Lazy.StateT
                                                   GameVars.Vars GHC.Types.IO ()>_R
                                        ->_R <GameVars.Vars>_R
                                        ->_R GHC.Types.N:IO[0] <((), GameVars.Vars)>_R)))
                             (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                  <GameVars.Vars>_N <GHC.Types.IO>_R <[SDL.Event.Event]>_N))
                          s1)
                         `cast`
                       (GHC.Types.N:IO[0] <([SDL.Event.Event], GameVars.Vars)>_R)
                         s of ds1 { (#,#) ipv ipv1 ->
                  case (Foreign.Marshal.Alloc.allocaBytesAligned
                          @ Foreign.C.Types.CInt
                          @ (Linear.Affine.Point Linear.V2.V2 Foreign.C.Types.CInt)
                          Foreign.Storable.$fStorableBool7
                          Foreign.Storable.$fStorableBool7
                          SDL.Input.Mouse.getAbsoluteMouseLocation2
                            `cast`
                          (<GHC.Ptr.Ptr Foreign.C.Types.CInt>_R
                           ->_R Sym (GHC.Types.N:IO[0]
                                         <Linear.Affine.Point
                                            Linear.V2.V2 Foreign.C.Types.CInt>_R)))
                         `cast`
                       (Trans
                            (Nth:2
                                 (Trans
                                      (<GHC.Types.IO
                                          (Linear.Affine.Point Linear.V2.V2 Foreign.C.Types.CInt)>_R
                                       ->_R GameVars.N:MahppyBird[0] <Linear.Affine.Point
                                                                        Linear.V2.V2
                                                                        Foreign.C.Types.CInt>_N)
                                      (<GHC.Types.IO
                                          (Linear.Affine.Point Linear.V2.V2 Foreign.C.Types.CInt)>_R
                                       ->_R Trans
                                                (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                     <*>_N
                                                     <GameVars.Config>_R
                                                     <Control.Monad.Trans.State.Lazy.StateT
                                                        GameVars.Vars GHC.Types.IO>_R
                                                     <Linear.Affine.Point
                                                        Linear.V2.V2 Foreign.C.Types.CInt>_N)
                                                (<GameVars.Config>_R
                                                 ->_R Trans
                                                          (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                               <GameVars.Vars>_N
                                                               <GHC.Types.IO>_R
                                                               <Linear.Affine.Point
                                                                  Linear.V2.V2
                                                                  Foreign.C.Types.CInt>_N)
                                                          (<GameVars.Vars>_R
                                                           ->_R GHC.Types.N:IO[0]
                                                                    <(Linear.Affine.Point
                                                                        Linear.V2.V2
                                                                        Foreign.C.Types.CInt,
                                                                      GameVars.Vars)>_R)))))
                            (GHC.Types.N:IO[0]
                                 <Linear.Affine.Point Linear.V2.V2 Foreign.C.Types.CInt>_R))
                         ipv of ds2 { (#,#) ipv2 ipv3 ->
                  (# ipv2,
                     (GHC.Tuple.(),
                      case ipv1 of wild { (,) a1 s' ->
                      case s' of wild1 { GameVars.Vars x1 x2 x3 x4 dt1 dt2 ->
                      GameVars.Vars
                        x1
                        x2
                        x3
                        (case ipv3
                                `cast`
                              (Linear.Affine.N:Point[0]
                                   <Linear.V2.V2>_R <Foreign.C.Types.CInt>_N) of dt { Linear.V2.V2 dt4 dt5 ->
                         letrec {
                           go :: [SDL.Event.Event] -> GameVars.Input
                             <join 1> {- Arity: 1, Strictness: <S,1*U>m -}
                           = \ (ds :: [SDL.Event.Event]) ->
                             case ds of wild2 {
                               []
                               -> GameVars.Input
                                    (Input.$fHasInputMahppyBird_go1 a1)
                                    (Input.$fHasInputMahppyBird_go a1)
                                    dt4
                                    dt5
                                    GHC.Types.False
                               : y ys
                               -> case y of wild3 { SDL.Event.Event ds3 ds4 ->
                                  case ds4 of wild4 {
                                    DEFAULT -> go ys
                                    SDL.Event.MouseButtonEvent mouseEvent
                                    -> case mouseEvent of wild5 { SDL.Event.MouseButtonEventData ds5 ds6 ds7 ds8 dt6 ds9 ->
                                       case ds6 of wild6 {
                                         SDL.Event.Released
                                         -> GameVars.Input
                                              (Input.$fHasInputMahppyBird_go1 a1)
                                              (Input.$fHasInputMahppyBird_go a1)
                                              dt4
                                              dt5
                                              GHC.Types.True
                                         SDL.Event.Pressed -> go ys } } } } }
                         } in
                         go a1 })
                        dt1
                        dt2 } }) #) } })
                   `cast`
                 (Nth:3
                      (Nth:3
                           (Trans
                                (<Control.Monad.Trans.State.Lazy.StateT
                                    GameVars.Vars GHC.Types.IO [SDL.Event.Event]>_R
                                 ->_R <[SDL.Event.Event]
                                       -> Control.Monad.Trans.State.Lazy.StateT
                                            GameVars.Vars GHC.Types.IO ()>_R
                                 ->_R <GameVars.Vars>_R
                                 ->_R Sym (GHC.Types.N:IO[0] <((), GameVars.Vars)>_R))
                                (<Control.Monad.Trans.State.Lazy.StateT
                                    GameVars.Vars GHC.Types.IO [SDL.Event.Event]>_R
                                 ->_R <[SDL.Event.Event]
                                       -> Control.Monad.Trans.State.Lazy.StateT
                                            GameVars.Vars GHC.Types.IO ()>_R
                                 ->_R Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                               <GameVars.Vars>_N <GHC.Types.IO>_R <()>_N)))))) -}
305e01542e54ae0e99eeac4b5017ce93
  $fHasInputMahppyBird4 :: GameVars.MahppyBird [SDL.Event.Event]
  {- Unfolding: (SDL.Event.$wpollEvents
                   @ GameVars.MahppyBird
                   GameVars.$fMonadIOMahppyBird) -}
ee2de75a75fdd96912e4bb0063973d21
  $fHasInputMahppyBird_go :: [SDL.Event.Event] -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
a4abb2c3fd7c59096da32731a74cf718
  $fHasInputMahppyBird_go1 :: [SDL.Event.Event] -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
a762c048d557a39fc76590aa90b9afe4
  $tc'C:HasInput :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17318645815098046304##
                   15183755136114290096##
                   Input.$trModule
                   Input.$tc'C:HasInput2
                   1#
                   Input.$tc'C:HasInput1) -}
622759ad47c4c5634e6ce884db529f83
  $tc'C:HasInput1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
12139238a80f2c64985dbdd94ea9d6b7
  $tc'C:HasInput2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Input.$tc'C:HasInput3) -}
e02dd3312c50f783ca5dde49470735dd
  $tc'C:HasInput3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'C:HasInput"#) -}
9e673679b9d9374f9dff128baa27ac01
  $tcHasInput :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2537927590637238007##
                   3661953666611197818##
                   Input.$trModule
                   Input.$tcHasInput2
                   0#
                   Input.$tcHasInput1) -}
98c3aa4515d4a152eaad4aa6c3176c12
  $tcHasInput1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
7d8ed3ae8d7d101005871562575bb440
  $tcHasInput2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Input.$tcHasInput3) -}
8a2426c15a59904c8a77da3e3ee5c4cf
  $tcHasInput3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("HasInput"#) -}
e020fcd4516f340774f177768fce53a8
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Input.$trModule3 Input.$trModule1) -}
979969caa70b8f90a31e3e69ba96f2f9
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Input.$trModule2) -}
737f2288831fb7303633061a155be77a
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Input"#) -}
4458cf948e2da8141f2aefb32572b9fb
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Input.$trModule4) -}
c20feb5968c06591d12cdc25d07c08c6
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("main"#) -}
1949aafb9e3655651db86746b4b7dfe6
  $wisSpaceTap :: SDL.Event.EventPayload -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>, Inline: [0],
     Unfolding: (\ (ww :: SDL.Event.EventPayload) ->
                 case ww of wild {
                   DEFAULT -> GHC.Types.False
                   SDL.Event.KeyboardEvent keyboardEvent
                   -> case keyboardEvent of wild1 { SDL.Event.KeyboardEventData ds1 ds2 ds3 ds4 ->
                      case ds4 of wild2 { SDL.Input.Keyboard.Keysym ds7 ds8 ds9 ->
                      case ds2 of wild3 {
                        SDL.Event.Released -> GHC.Types.False
                        SDL.Event.Pressed
                        -> case ds8
                                  `cast`
                                (SDL.Input.Keyboard.Codes.N:Keycode[0]) of wild4 { GHC.Int.I32# x ->
                           case x of wild5 {
                             DEFAULT -> GHC.Types.False
                             32#
                             -> case ds3 of wild6 {
                                  GHC.Types.False -> GHC.Types.True
                                  GHC.Types.True -> GHC.Types.False } } } } } } }) -}
b1e5047e03ae66c72fd258113e247707
  $wkeyEventIs ::
    SDL.Input.Keyboard.Codes.Keycode
    -> SDL.Event.EventPayload -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U(U)><S,1*U>,
     Inline: [0],
     Unfolding: (\ (w :: SDL.Input.Keyboard.Codes.Keycode)
                   (ww :: SDL.Event.EventPayload) ->
                 case ww of wild {
                   DEFAULT -> GHC.Types.False
                   SDL.Event.KeyboardEvent keyboardEvent
                   -> case keyboardEvent of wild1 { SDL.Event.KeyboardEventData ds1 ds2 ds3 ds4 ->
                      case ds4 of wild2 { SDL.Input.Keyboard.Keysym ds7 ds8 ds9 ->
                      case ds2 of wild3 {
                        SDL.Event.Released -> GHC.Types.False
                        SDL.Event.Pressed
                        -> GHC.Int.eqInt32
                             ds8 `cast` (SDL.Input.Keyboard.Codes.N:Keycode[0])
                             w `cast` (SDL.Input.Keyboard.Codes.N:Keycode[0]) } } } }) -}
16315d0f5b666f9602f148cc4651e589
  class GHC.Base.Monad m => HasInput (m :: * -> *) where
    updateInput :: m ()
    setInput :: GameVars.Input -> m ()
    getInput :: m GameVars.Input
    {-# MINIMAL updateInput, setInput, getInput #-}
b2fe0c09071f90781c9ccca1c3846c41
  isMouseTap :: SDL.Event.Event -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LS),1*U(A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (event :: SDL.Event.Event) ->
                 case event of wild { SDL.Event.Event ds1 ds2 ->
                 case ds2 of wild1 {
                   DEFAULT -> GHC.Types.False
                   SDL.Event.MouseButtonEvent mouseEvent
                   -> case mouseEvent of wild2 { SDL.Event.MouseButtonEventData ds4 ds5 ds3 ds6 dt ds7 ->
                      case ds5 of wild3 {
                        SDL.Event.Released -> GHC.Types.True
                        SDL.Event.Pressed -> GHC.Types.False } } } }) -}
813583105a2d40f2981b35c5acf64db7
  isSpaceTap :: SDL.Event.Event -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LS),1*U(A,1*U)>,
     Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: SDL.Event.Event) ->
                 case w of ww { SDL.Event.Event ww1 ww2 ->
                 Input.$wisSpaceTap ww2 }) -}
6b1669ecdaf26f676d59ae11be8ea298
  keyEventIs ::
    SDL.Input.Keyboard.Codes.Keycode
    -> SDL.Event.Event -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,1*U(U)><S(LS),1*U(A,1*U)>, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: SDL.Input.Keyboard.Codes.Keycode)
                   (w1 :: SDL.Event.Event) ->
                 case w1 of ww { SDL.Event.Event ww1 ww2 ->
                 Input.$wkeyEventIs w ww2 }) -}
instance Input.HasInput [GameVars.MahppyBird]
  = Input.$fHasInputMahppyBird
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

