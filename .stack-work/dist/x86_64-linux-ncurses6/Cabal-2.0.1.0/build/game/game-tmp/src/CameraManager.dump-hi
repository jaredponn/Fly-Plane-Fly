
==================== FINAL INTERFACE ====================
2018-06-05 00:36:03.533476781 UTC

interface main:CameraManager 8022
  interface hash: 4ffbde225f12a42662bc99ba835d562f
  ABI hash: 4a3629dcca1cd6a4a9a9befbf2188ae5
  export-list hash: 112cd2acaa8c34d282eabc28f7fedc85
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: fbfc9b4f0124b3a129b4a2321798f29f
  sig of: Nothing
  used TH splices: False
  where
exports:
  CameraManager.CameraManager{CameraManager.getCameraOffset CameraManager.getCameraPos CameraManager.moveCameraBy CameraManager.setCameraPos}
module dependencies: Aabb Animations GameVars Util Walls
package dependencies: QuickCheck-2.10.1 Stack-0.3.2
                      StateVar-1.1.1.0 Stream-0.4.7.2 adjunctions-4.4 array-0.5.2.0
                      base-4.10.1.0 base-orphans-0.7 bifunctors-5.5.2 binary-0.8.5.1
                      bytes-0.15.4 bytestring-0.10.8.2 call-stack-0.1.0 cereal-0.5.5.0
                      clock-0.7.2 comonad-5.0.3 containers-0.5.10.2 contravariant-1.4.1
                      data-default-class-0.1.2.0 deepseq-1.4.3.0 distributive-0.5.3
                      exceptions-0.8.3 free-5.0.2 ghc-boot-th-8.2.2 ghc-prim-0.5.1.1
                      hashable-1.2.7.0 integer-gmp-1.0.1.0 integer-logarithms-1.0.2.1
                      kan-extensions-5.1 lazysmallcheck-0.6 lens-4.16.1
                      lifted-base-0.2.3.12 linear-1.20.7 monad-control-1.0.2.3 mtl-2.2.2
                      pretty-1.1.3.3 primitive-0.6.3.0 profunctors-5.2.2 random-1.1
                      reflection-2.1.3 scientific-0.3.6.0 sdl2-2.4.0.1 sdl2-mixer-1.1.0
                      sdl2-ttf-2.0.2 semigroupoids-5.2.2 stm-2.4.5.0 tagged-0.8.5
                      template-haskell-2.12.0.0 text-1.2.3.0 tf-random-0.5
                      th-abstraction-0.2.6.0 time-1.8.0.2 transformers-0.5.2.0
                      transformers-base-0.4.4 transformers-compat-0.5.1.4
                      unordered-containers-0.2.9.0 vector-0.12.0.1
orphans: time-1.8.0.2:Data.Time.Clock.TAI
         time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian
         reflection-2.1.3:Data.Reflection
         vector-0.12.0.1:Data.Vector.Unboxed
         hashable-1.2.7.0:Data.Hashable.Generic text-1.2.3.0:Data.Text.Lazy
         linear-1.20.7:Linear.Instances base-orphans-0.7:Data.Orphans
         text-1.2.3.0:Data.Text binary-0.8.5.1:Data.Binary.Generic
         text-1.2.3.0:Data.Text.Show
         bytestring-0.10.8.2:Data.ByteString.Builder
         vector-0.12.0.1:Data.Vector.Fusion.Bundle
         stm-2.4.5.0:Control.Monad.STM
         transformers-0.5.2.0:Control.Monad.Trans.Error
         base-4.10.1.0:GHC.Float base-4.10.1.0:GHC.Base
family instance modules: adjunctions-4.4:Data.Functor.Rep
                         base-4.10.1.0:Control.Applicative base-4.10.1.0:Data.Complex
                         base-4.10.1.0:Data.Either base-4.10.1.0:Data.Functor.Compose
                         base-4.10.1.0:Data.Functor.Const
                         base-4.10.1.0:Data.Functor.Identity
                         base-4.10.1.0:Data.Functor.Product base-4.10.1.0:Data.Functor.Sum
                         base-4.10.1.0:Data.List.NonEmpty base-4.10.1.0:Data.Monoid
                         base-4.10.1.0:Data.Semigroup base-4.10.1.0:Data.Type.Equality
                         base-4.10.1.0:Data.Version base-4.10.1.0:Data.Void
                         base-4.10.1.0:GHC.Exts base-4.10.1.0:GHC.Generics
                         base-4.10.1.0:GHC.IO.Exception base-4.10.1.0:GHC.TypeLits
                         base-4.10.1.0:GHC.TypeNats bifunctors-5.5.2:Data.Bifunctor.Biff
                         bifunctors-5.5.2:Data.Bifunctor.Clown
                         bifunctors-5.5.2:Data.Bifunctor.Fix
                         bifunctors-5.5.2:Data.Bifunctor.Flip
                         bifunctors-5.5.2:Data.Bifunctor.Join
                         bifunctors-5.5.2:Data.Bifunctor.Joker
                         bifunctors-5.5.2:Data.Bifunctor.Product
                         bifunctors-5.5.2:Data.Bifunctor.Sum
                         bifunctors-5.5.2:Data.Bifunctor.Tannen
                         bifunctors-5.5.2:Data.Bifunctor.Wrapped bytes-0.15.4:Data.Bytes.Get
                         bytes-0.15.4:Data.Bytes.Signed bytes-0.15.4:Data.Bytes.VarInt
                         clock-0.7.2:System.Clock containers-0.5.10.2:Data.IntMap.Internal
                         containers-0.5.10.2:Data.IntSet.Internal
                         containers-0.5.10.2:Data.Map.Internal
                         containers-0.5.10.2:Data.Sequence.Internal
                         containers-0.5.10.2:Data.Set.Internal containers-0.5.10.2:Data.Tree
                         free-5.0.2:Control.Comonad.Cofree
                         free-5.0.2:Control.Comonad.Trans.Cofree
                         free-5.0.2:Control.Monad.Free free-5.0.2:Control.Monad.Trans.Free
                         ghc-boot-th-8.2.2:GHC.ForeignSrcLang.Type
                         ghc-boot-th-8.2.2:GHC.LanguageExtensions.Type
                         kan-extensions-5.1:Data.Functor.Day
                         kan-extensions-5.1:Data.Functor.Yoneda lens-4.16.1:Control.Lens.At
                         lens-4.16.1:Control.Lens.Internal.Indexed
                         lens-4.16.1:Control.Lens.Reified lens-4.16.1:Control.Lens.Tuple
                         lens-4.16.1:Control.Lens.Wrapped lens-4.16.1:Control.Lens.Zoom
                         linear-1.20.7:Linear.Affine linear-1.20.7:Linear.Plucker
                         linear-1.20.7:Linear.Quaternion linear-1.20.7:Linear.V
                         linear-1.20.7:Linear.V0 linear-1.20.7:Linear.V1
                         linear-1.20.7:Linear.V2 linear-1.20.7:Linear.V3
                         linear-1.20.7:Linear.V4
                         monad-control-1.0.2.3:Control.Monad.Trans.Control
                         pretty-1.1.3.3:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.3:Text.PrettyPrint.HughesPJ
                         primitive-0.6.3.0:Control.Monad.Primitive
                         primitive-0.6.3.0:Data.Primitive.Array
                         primitive-0.6.3.0:Data.Primitive.ByteArray
                         profunctors-5.2.2:Data.Profunctor.Composition
                         profunctors-5.2.2:Data.Profunctor.Rep sdl2-2.4.0.1:SDL.Audio
                         sdl2-2.4.0.1:SDL.Event sdl2-2.4.0.1:SDL.Exception
                         sdl2-2.4.0.1:SDL.Hint sdl2-2.4.0.1:SDL.Init
                         sdl2-2.4.0.1:SDL.Input.GameController
                         sdl2-2.4.0.1:SDL.Input.Joystick sdl2-2.4.0.1:SDL.Input.Keyboard
                         sdl2-2.4.0.1:SDL.Input.Keyboard.Codes sdl2-2.4.0.1:SDL.Input.Mouse
                         sdl2-2.4.0.1:SDL.Internal.Types sdl2-2.4.0.1:SDL.Power
                         sdl2-2.4.0.1:SDL.Time sdl2-2.4.0.1:SDL.Video
                         sdl2-2.4.0.1:SDL.Video.OpenGL sdl2-2.4.0.1:SDL.Video.Renderer
                         sdl2-ttf-2.0.2:SDL.Font tagged-0.8.5:Data.Tagged
                         template-haskell-2.12.0.0:Language.Haskell.TH.Syntax
                         text-1.2.3.0:Data.Text text-1.2.3.0:Data.Text.Lazy
                         th-abstraction-0.2.6.0:Language.Haskell.TH.Datatype
                         unordered-containers-0.2.9.0:Data.HashMap.Base
                         unordered-containers-0.2.9.0:Data.HashSet
                         vector-0.12.0.1:Data.Vector vector-0.12.0.1:Data.Vector.Primitive
                         vector-0.12.0.1:Data.Vector.Storable
                         vector-0.12.0.1:Data.Vector.Unboxed
                         vector-0.12.0.1:Data.Vector.Unboxed.Base
import  -/  base-4.10.1.0:Foreign.C.Types 936c0db027291520097b61fd8686710a
import  -/  base-4.10.1.0:GHC.Base 782fd99b5e36f3698a26179a49afca64
import  -/  base-4.10.1.0:GHC.Num 6e1dc5d36d99a802edb39b92bb1923b8
import  -/  base-4.10.1.0:Prelude 31945b7d0084063347fc52506d3a4020
import  -/  lens-4.16.1:Control.Lens d35b54db874b2147b5ffe1d3cd39d59d
import  -/  lens-4.16.1:Control.Lens.Getter be8fceadc62581701bcf558f995a8aa3
import  -/  lens-4.16.1:Control.Lens.Setter 31b5ab0739c579bd36402b436aadb7a0
import  -/  linear-1.20.7:Linear.Affine f4ed1aa58b28d63beac82829593554b3
import  -/  linear-1.20.7:Linear.V2 ee409e3e067ada9faf9fdda331749bf4
import  -/  GameVars c97b478d52eb65df6d94cfdf494ea2ce
  exports: 54748b09c2a15e9d35b796e54eb1daea
  MahppyBird 1989f26957dc34ff4b450af06c2d546d
  Vars 5829ea20be4fb9a24ab87f3fe067aa3c
  camOffset ed0bf55fc46a21b0b5f77c5461c4614c
  cameraPos fcc3502fbff7c1d4610130d0e0afa18d
  vRenderingVars 2d58b68e764b27d35775ee018d600077
import  -/  Util 04dd18c408cec1d861350946bb6e7df1
  exports: 01755414b1287618f45750309b35edae
  roundV2 0d8151353e8580dd1c39b2d8ab7106b2
import  -/  mtl-2.2.2:Control.Monad.Reader 8d63edf5dfaf25ad085eae4468bdd77e
import  -/  mtl-2.2.2:Control.Monad.State 4acb2e6037f370fa4b91900d626e6406
import  -/  mtl-2.2.2:Control.Monad.State.Class de8813e114276746770717ab3ee06916
import  -/  sdl2-2.4.0.1:SDL 24b907aeafb5c6d95ad8ce8f19ccd6b3
d16eef61f6af70903e3a612d17ffd25c
  $fCameraManagerMahppyBird ::
    CameraManager.CameraManager GameVars.MahppyBird
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ GameVars.MahppyBird
                  GameVars.$fMonadMahppyBird
                  CameraManager.$fCameraManagerMahppyBird3
                    `cast`
                  (Trans
                       (<GameVars.Config>_R
                        ->_R Trans
                                 (<GameVars.Vars>_R
                                  ->_R Sym (GHC.Types.N:IO[0]
                                                <(Linear.V2.V2 GHC.Types.Float, GameVars.Vars)>_R))
                                 (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                           <GameVars.Vars>_N
                                           <GHC.Types.IO>_R
                                           <Linear.V2.V2 GHC.Types.Float>_N)))
                       (Trans
                            (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                      <*>_N
                                      <GameVars.Config>_R
                                      <Control.Monad.Trans.State.Lazy.StateT
                                         GameVars.Vars GHC.Types.IO>_R
                                      <Linear.V2.V2 GHC.Types.Float>_N))
                            (Sym (GameVars.N:MahppyBird[0]) <Linear.V2.V2 GHC.Types.Float>_N)))
                  CameraManager.$fCameraManagerMahppyBird_$csetCameraPos
                  CameraManager.$fCameraManagerMahppyBird2
                    `cast`
                  (<Linear.V2.V2 Foreign.C.Types.CInt>_R
                   ->_R Trans
                            (<GameVars.Config>_R
                             ->_R Trans
                                      (<GameVars.Vars>_R
                                       ->_R Sym (GHC.Types.N:IO[0] <((), GameVars.Vars)>_R))
                                      (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                <GameVars.Vars>_N <GHC.Types.IO>_R <()>_N)))
                            (Trans
                                 (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                           <*>_N
                                           <GameVars.Config>_R
                                           <Control.Monad.Trans.State.Lazy.StateT
                                              GameVars.Vars GHC.Types.IO>_R
                                           <()>_N))
                                 (Sym (GameVars.N:MahppyBird[0]) <()>_N)))
                  CameraManager.$fCameraManagerMahppyBird1
                    `cast`
                  (Trans
                       (<GameVars.Config>_R
                        ->_R Trans
                                 (<GameVars.Vars>_R
                                  ->_R Sym (GHC.Types.N:IO[0]
                                                <(Linear.Affine.Point
                                                    Linear.V2.V2 Foreign.C.Types.CInt,
                                                  GameVars.Vars)>_R))
                                 (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                           <GameVars.Vars>_N
                                           <GHC.Types.IO>_R
                                           <Linear.Affine.Point
                                              Linear.V2.V2 Foreign.C.Types.CInt>_N)))
                       (Trans
                            (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                      <*>_N
                                      <GameVars.Config>_R
                                      <Control.Monad.Trans.State.Lazy.StateT
                                         GameVars.Vars GHC.Types.IO>_R
                                      <Linear.Affine.Point Linear.V2.V2 Foreign.C.Types.CInt>_N))
                            (Sym (GameVars.N:MahppyBird[0]) <Linear.Affine.Point
                                                               Linear.V2.V2
                                                               Foreign.C.Types.CInt>_N))) -}
86746c761d768ae75c740aa85b31ff57
  $fCameraManagerMahppyBird1 ::
    GameVars.Config
    -> GameVars.Vars
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          (Linear.Affine.Point Linear.V2.V2 Foreign.C.Types.CInt,
           GameVars.Vars) #)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,A><L,U(U,U,U(U,U,U,U,U,U),U,U,U)><S,U>,
     Unfolding: InlineRule (3, True, False)
                (\ (r1 :: GameVars.Config)
                   (eta :: GameVars.Vars)
                   (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 (# eta1,
                    (case eta of wild { GameVars.Vars x1 x2 x3 x4 dt1 dt2 ->
                     case x3 of wild1 { GameVars.RenderingVars x7 dt4 dt5 dt3 dt6 dt7 ->
                     (Linear.V2.V2 @ Foreign.C.Types.CInt dt4 dt5)
                       `cast`
                     (Sym (Linear.Affine.N:Point[0]
                               <Linear.V2.V2>_R) <Foreign.C.Types.CInt>_N) } },
                     eta) #)) -}
5b5c5c79f0939ad59cb60351a968676b
  $fCameraManagerMahppyBird2 ::
    Linear.V2.V2 Foreign.C.Types.CInt
    -> GameVars.Config
    -> GameVars.Vars
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, ((), GameVars.Vars) #)
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,1*U(U(U),U(U))><L,A><L,1*U(U,U,1*U(U,U(U),U(U),U,U,U),U,U,U)><S,U>,
     Inline: [0],
     Unfolding: InlineRule (4, True, True)
                (\ (w :: Linear.V2.V2 Foreign.C.Types.CInt)
                   (w1 :: GameVars.Config)
                   (w2 :: GameVars.Vars)
                   (w3 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 CameraManager.$w$cmoveCameraBy w w2 w3) -}
acd65fe15ef9653d295ad43fcae44655
  $fCameraManagerMahppyBird3 ::
    GameVars.Config
    -> GameVars.Vars
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          (Linear.V2.V2 GHC.Types.Float, GameVars.Vars) #)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,A><L,U(U,U,U(U,U,U,U,U,U),U,U,U)><S,U>,
     Unfolding: InlineRule (3, True, False)
                (\ (r1 :: GameVars.Config)
                   (eta :: GameVars.Vars)
                   (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 (# eta1,
                    (case eta of wild { GameVars.Vars x1 x2 x3 x4 dt1 dt2 ->
                     case x3 of wild1 { GameVars.RenderingVars x7 dt4 dt5 dt3 dt6 dt7 ->
                     Linear.V2.V2 @ GHC.Types.Float dt3 dt6 } },
                     eta) #)) -}
f774df5b8a15fb73ef605290387d10a6
  $fCameraManagerMahppyBird_$csetCameraPos ::
    Linear.Affine.Point Linear.V2.V2 GHC.Types.Float
    -> GameVars.MahppyBird ()
  {- Arity: 1, Strictness: <L,1*U(U(U),U(U))>,
     Unfolding: (\ (ds :: Linear.Affine.Point
                            Linear.V2.V2 GHC.Types.Float) ->
                 let {
                   b1 :: Linear.V2.V2 Foreign.C.Types.CInt
                   = case ds
                            `cast`
                          (Linear.Affine.N:Point[0]
                               <Linear.V2.V2>_R <GHC.Types.Float>_N) of ww { Linear.V2.V2 ww1 ww2 ->
                     case ww1 of ww3 { GHC.Types.F# ww4 ->
                     case ww2 of ww5 { GHC.Types.F# ww6 ->
                     case GHC.Float.$w$cround1
                            @ GHC.Types.Int
                            GHC.Real.$fIntegralInt
                            ww4 of wild { GHC.Types.I# x# ->
                     case GHC.Float.$w$cround1
                            @ GHC.Types.Int
                            GHC.Real.$fIntegralInt
                            ww6 of wild1 { GHC.Types.I# x#1 ->
                     Linear.V2.V2
                       @ Foreign.C.Types.CInt
                       (GHC.Int.I32# (GHC.Prim.narrow32Int# x#))
                         `cast`
                       (Sym (Foreign.C.Types.N:CInt[0]))
                       (GHC.Int.I32# (GHC.Prim.narrow32Int# x#1))
                         `cast`
                       (Sym (Foreign.C.Types.N:CInt[0])) } } } } }
                 } in
                 (\ (eta1 :: GameVars.Config)
                    (eta2 :: GameVars.Vars)
                    (eta3 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                  (# eta3,
                     (GHC.Tuple.(),
                      case eta2 of wild { GameVars.Vars x1 x2 x3 x4 dt1 dt2 ->
                      GameVars.Vars
                        x1
                        x2
                        (case x3 of wild1 { GameVars.RenderingVars x7 dt4 dt5 dt3 dt6 dt7 ->
                         case b1 of dt { Linear.V2.V2 dt8 dt9 ->
                         GameVars.RenderingVars x7 dt8 dt9 dt3 dt6 dt7 } })
                        x4
                        dt1
                        dt2 }) #))
                   `cast`
                 (Nth:3
                      (Trans
                           (<GameVars.Vars -> ((), GameVars.Vars)>_R
                            ->_R Trans
                                     (<GameVars.Config>_R
                                      ->_R Trans
                                               (<GameVars.Vars>_R
                                                ->_R Sym (GHC.Types.N:IO[0]
                                                              <((), GameVars.Vars)>_R))
                                               (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                         <GameVars.Vars>_N
                                                         <GHC.Types.IO>_R
                                                         <()>_N)))
                                     (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                               <*>_N
                                               <GameVars.Config>_R
                                               <Control.Monad.Trans.State.Lazy.StateT
                                                  GameVars.Vars GHC.Types.IO>_R
                                               <()>_N)))
                           (<GameVars.Vars -> ((), GameVars.Vars)>_R
                            ->_R Sym (GameVars.N:MahppyBird[0]) <()>_N)))) -}
2f921135277434bfa04a3c1dcf6e9c16
  $tc'C:CameraManager :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2281806932047554032##
                   2874567058951815635##
                   CameraManager.$trModule
                   CameraManager.$tc'C:CameraManager2
                   1#
                   CameraManager.$tc'C:CameraManager1) -}
9a0a221bc912a543b2ae5fe5f27c5fd5
  $tc'C:CameraManager1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
2c3bbf7c2d80de728d15730086906a8b
  $tc'C:CameraManager2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   CameraManager.$tc'C:CameraManager3) -}
8db218761a0c6964a8062d6fbeb17903
  $tc'C:CameraManager3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'C:CameraManager"#) -}
4fa549a2f44a0b63357e5cad54e2563b
  $tcCameraManager :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4580822836417042026##
                   12234447294946889047##
                   CameraManager.$trModule
                   CameraManager.$trModule1
                   0#
                   CameraManager.$tcCameraManager1) -}
2216225a0c1f787eb9d7a6fdff4ec7a9
  $tcCameraManager1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
6c41674ffc756e263e6224c887fbc35e
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   CameraManager.$trModule3
                   CameraManager.$trModule1) -}
cd3ecc324030f3592a844e92db547d8d
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS CameraManager.$trModule2) -}
490dfba7161ef73c287907e8eb7115f3
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("CameraManager"#) -}
6bc5d95f419bcae46e04babcd4646925
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS CameraManager.$trModule4) -}
f9ffb1bb3215dbf9a5769fa09a1f6a47
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("main"#) -}
e17718a7065710cfafeeb569aa63ac19
  $w$cmoveCameraBy ::
    Linear.V2.V2 Foreign.C.Types.CInt
    -> GameVars.Vars
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, ((), GameVars.Vars) #)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(U(U),U(U))><L,1*U(U,U,1*U(U,U(U),U(U),U,U,U),U,U,U)><S,U>,
     Inline: [0],
     Unfolding: (\ (w :: Linear.V2.V2 Foreign.C.Types.CInt)
                   (w1 :: GameVars.Vars)
                   (w2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 (# w2,
                    (GHC.Tuple.(),
                     case w1 of wild { GameVars.Vars x1 x2 x3 x4 dt1 dt2 ->
                     GameVars.Vars
                       x1
                       x2
                       (case x3 of wild1 { GameVars.RenderingVars x7 dt4 dt5 dt3 dt6 dt7 ->
                        case dt4
                               `cast`
                             (Foreign.C.Types.N:CInt[0]) of wild2 { GHC.Int.I32# x# ->
                        case dt5
                               `cast`
                             (Foreign.C.Types.N:CInt[0]) of wild3 { GHC.Int.I32# x#1 ->
                        case w of wild4 { Linear.V2.V2 d e ->
                        case d `cast`
                             (Foreign.C.Types.N:CInt[0]) of wild5 { GHC.Int.I32# y# ->
                        case e `cast`
                             (Foreign.C.Types.N:CInt[0]) of wild6 { GHC.Int.I32# y#1 ->
                        GameVars.RenderingVars
                          x7
                          (GHC.Int.I32# (GHC.Prim.narrow32Int# (GHC.Prim.+# x# y#)))
                            `cast`
                          (Sym (Foreign.C.Types.N:CInt[0]))
                          (GHC.Int.I32# (GHC.Prim.narrow32Int# (GHC.Prim.+# x#1 y#1)))
                            `cast`
                          (Sym (Foreign.C.Types.N:CInt[0]))
                          dt3
                          dt6
                          dt7 } } } } } })
                       x4
                       dt1
                       dt2 }) #)) -}
d16eef61f6af70903e3a612d17ffd25c
  class GHC.Base.Monad m => CameraManager (m :: * -> *) where
    getCameraOffset :: m (Linear.V2.V2 GHC.Types.Float)
    setCameraPos :: Linear.Affine.Point Linear.V2.V2 GHC.Types.Float
                    -> m ()
    moveCameraBy :: Linear.V2.V2 Foreign.C.Types.CInt -> m ()
    getCameraPos :: m (Linear.Affine.Point
                         Linear.V2.V2 Foreign.C.Types.CInt)
    {-# MINIMAL getCameraOffset, setCameraPos, moveCameraBy,
                getCameraPos #-}
instance CameraManager.CameraManager [GameVars.MahppyBird]
  = CameraManager.$fCameraManagerMahppyBird
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

