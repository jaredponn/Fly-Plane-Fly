
==================== FINAL INTERFACE ====================
2018-06-05 00:36:00.047552729 UTC

interface main:GameVars 8022
  interface hash: 9873706c27f982a9c3511fd14d13c23a
  ABI hash: c97b478d52eb65df6d94cfdf494ea2ce
  export-list hash: 54748b09c2a15e9d35b796e54eb1daea
  orphan hash: 28316747aa4b432175e9a21af98ed300
  flag hash: cbff3560d053af8dd0d5e41e681edbe6
  sig of: Nothing
  used TH splices: True
  where
exports:
  GameVars.angle
  GameVars.attributes
  GameVars.bgMusicChannel
  GameVars.bgTexture
  GameVars.botWallTexture
  GameVars.cAnimations
  GameVars.cFont
  GameVars.cGrav
  GameVars.cJumpHeight
  GameVars.cResources
  GameVars.cSound
  GameVars.cTextures
  GameVars.cWallConf
  GameVars.camOffset
  GameVars.cameraPos
  GameVars.crashFx
  GameVars.dt
  GameVars.gameOverWindowTexture
  GameVars.guiTextures
  GameVars.highScore
  GameVars.highScoreFont
  GameVars.isEsc
  GameVars.isPassingWall
  GameVars.isSpace
  GameVars.jumpFx
  GameVars.kInput
  GameVars.mousePos
  GameVars.mousePress
  GameVars.muteTexture
  GameVars.mutedTexture
  GameVars.playAgainBtnTexture
  GameVars.playBtnTexture
  GameVars.player
  GameVars.playerAnimationHandler
  GameVars.playerDeathAnimation
  GameVars.playerIdleAnimation
  GameVars.playerJumpAnimation
  GameVars.playerSpriteSheet
  GameVars.pressSpacetoJumpTexture
  GameVars.quitBtnTexture
  GameVars.quitGameOverBtnTexture
  GameVars.score
  GameVars.scoreFont
  GameVars.titleScreenbg
  GameVars.topWallTexture
  GameVars.transitionOpacity
  GameVars.vGameStateStack
  GameVars.vPlayVars
  GameVars.vRenderingVars
  GameVars.wallStream
  GameVars.xvel
  GameVars.yvel
  GameVars.Animations{GameVars.Animations _playerDeathAnimation _playerIdleAnimation _playerJumpAnimation}
  GameVars.Config{GameVars.Config _cResources cRenderer cWindow}
  GameVars.Fonts{GameVars.Fonts _highScoreFont _scoreFont}
  GameVars.GUITextures{GameVars.GUITextures _gameOverWindowTexture _muteTexture _mutedTexture _playAgainBtnTexture _playBtnTexture _pressSpacetoJumpTexture _quitBtnTexture _quitGameOverBtnTexture _titleScreenbg}
  GameVars.GameStack
  GameVars.GameState{GameVars.GameOver GameVars.Menu GameVars.Pause GameVars.Play GameVars.PrePlay GameVars.Quit}
  GameVars.Input{GameVars.Input _isEsc _isSpace _mousePos _mousePress}
  GameVars.MahppyBird{GameVars.MahppyBird}
  GameVars.PlayVars{GameVars.PlayVars _cGrav _cWallConf _player _score _wallStream}
  GameVars.Player{GameVars.Player _angle _attributes _cJumpHeight _isPassingWall _xvel _yvel}
  GameVars.RenderingVars{GameVars.RenderingVars _camOffset _cameraPos _playerAnimationHandler _transitionOpacity}
  GameVars.Resources{GameVars.Resources _cAnimations _cFont _cSound _cTextures}
  GameVars.Sound{GameVars.Sound _bgMusicChannel _crashFx _jumpFx}
  GameVars.Textures{GameVars.Textures _bgTexture _botWallTexture _guiTextures _playerSpriteSheet _topWallTexture}
  GameVars.Vars{GameVars.Vars _dt _highScore _kInput _vGameStateStack _vPlayVars _vRenderingVars}
module dependencies: Animations Walls
package dependencies: QuickCheck-2.10.1 Stack-0.3.2
                      StateVar-1.1.1.0 Stream-0.4.7.2 adjunctions-4.4 array-0.5.2.0
                      base-4.10.1.0 base-orphans-0.7 bifunctors-5.5.2 binary-0.8.5.1
                      bytes-0.15.4 bytestring-0.10.8.2 call-stack-0.1.0 cereal-0.5.5.0
                      comonad-5.0.3 containers-0.5.10.2 contravariant-1.4.1
                      data-default-class-0.1.2.0 deepseq-1.4.3.0 distributive-0.5.3
                      exceptions-0.8.3 free-5.0.2 ghc-boot-th-8.2.2 ghc-prim-0.5.1.1
                      hashable-1.2.7.0 integer-gmp-1.0.1.0 integer-logarithms-1.0.2.1
                      kan-extensions-5.1 lazysmallcheck-0.6 lens-4.16.1
                      lifted-base-0.2.3.12 linear-1.20.7 monad-control-1.0.2.3 mtl-2.2.2
                      pretty-1.1.3.3 primitive-0.6.3.0 profunctors-5.2.2 random-1.1
                      reflection-2.1.3 scientific-0.3.6.0 sdl2-2.4.0.1 sdl2-mixer-1.1.0
                      sdl2-ttf-2.0.2 semigroupoids-5.2.2 stm-2.4.5.0 tagged-0.8.5
                      template-haskell-2.12.0.0 text-1.2.3.0 tf-random-0.5
                      th-abstraction-0.2.6.0 time-1.8.0.2 transformers-0.5.2.0
                      transformers-base-0.4.4 transformers-compat-0.5.1.4
                      unordered-containers-0.2.9.0 vector-0.12.0.1
orphans: time-1.8.0.2:Data.Time.Clock.TAI
         reflection-2.1.3:Data.Reflection
         vector-0.12.0.1:Data.Vector.Unboxed
         hashable-1.2.7.0:Data.Hashable.Generic text-1.2.3.0:Data.Text.Lazy
         linear-1.20.7:Linear.Instances base-orphans-0.7:Data.Orphans
         text-1.2.3.0:Data.Text binary-0.8.5.1:Data.Binary.Generic
         text-1.2.3.0:Data.Text.Show
         bytestring-0.10.8.2:Data.ByteString.Builder
         vector-0.12.0.1:Data.Vector.Fusion.Bundle
         stm-2.4.5.0:Control.Monad.STM time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian
         transformers-0.5.2.0:Control.Monad.Trans.Error
         base-4.10.1.0:GHC.Float base-4.10.1.0:GHC.Base
family instance modules: adjunctions-4.4:Data.Functor.Rep
                         base-4.10.1.0:Control.Applicative base-4.10.1.0:Data.Complex
                         base-4.10.1.0:Data.Either base-4.10.1.0:Data.Functor.Compose
                         base-4.10.1.0:Data.Functor.Const
                         base-4.10.1.0:Data.Functor.Identity
                         base-4.10.1.0:Data.Functor.Product base-4.10.1.0:Data.Functor.Sum
                         base-4.10.1.0:Data.List.NonEmpty base-4.10.1.0:Data.Monoid
                         base-4.10.1.0:Data.Semigroup base-4.10.1.0:Data.Type.Equality
                         base-4.10.1.0:Data.Version base-4.10.1.0:Data.Void
                         base-4.10.1.0:GHC.Exts base-4.10.1.0:GHC.Generics
                         base-4.10.1.0:GHC.IO.Exception base-4.10.1.0:GHC.TypeLits
                         base-4.10.1.0:GHC.TypeNats bifunctors-5.5.2:Data.Bifunctor.Biff
                         bifunctors-5.5.2:Data.Bifunctor.Clown
                         bifunctors-5.5.2:Data.Bifunctor.Fix
                         bifunctors-5.5.2:Data.Bifunctor.Flip
                         bifunctors-5.5.2:Data.Bifunctor.Join
                         bifunctors-5.5.2:Data.Bifunctor.Joker
                         bifunctors-5.5.2:Data.Bifunctor.Product
                         bifunctors-5.5.2:Data.Bifunctor.Sum
                         bifunctors-5.5.2:Data.Bifunctor.Tannen
                         bifunctors-5.5.2:Data.Bifunctor.Wrapped bytes-0.15.4:Data.Bytes.Get
                         bytes-0.15.4:Data.Bytes.Signed bytes-0.15.4:Data.Bytes.VarInt
                         containers-0.5.10.2:Data.IntMap.Internal
                         containers-0.5.10.2:Data.IntSet.Internal
                         containers-0.5.10.2:Data.Map.Internal
                         containers-0.5.10.2:Data.Sequence.Internal
                         containers-0.5.10.2:Data.Set.Internal containers-0.5.10.2:Data.Tree
                         free-5.0.2:Control.Comonad.Cofree
                         free-5.0.2:Control.Comonad.Trans.Cofree
                         free-5.0.2:Control.Monad.Free free-5.0.2:Control.Monad.Trans.Free
                         ghc-boot-th-8.2.2:GHC.ForeignSrcLang.Type
                         ghc-boot-th-8.2.2:GHC.LanguageExtensions.Type
                         kan-extensions-5.1:Data.Functor.Day
                         kan-extensions-5.1:Data.Functor.Yoneda lens-4.16.1:Control.Lens.At
                         lens-4.16.1:Control.Lens.Internal.Indexed
                         lens-4.16.1:Control.Lens.Reified lens-4.16.1:Control.Lens.Tuple
                         lens-4.16.1:Control.Lens.Wrapped lens-4.16.1:Control.Lens.Zoom
                         linear-1.20.7:Linear.Affine linear-1.20.7:Linear.Plucker
                         linear-1.20.7:Linear.Quaternion linear-1.20.7:Linear.V
                         linear-1.20.7:Linear.V0 linear-1.20.7:Linear.V1
                         linear-1.20.7:Linear.V2 linear-1.20.7:Linear.V3
                         linear-1.20.7:Linear.V4
                         monad-control-1.0.2.3:Control.Monad.Trans.Control
                         pretty-1.1.3.3:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.3:Text.PrettyPrint.HughesPJ
                         primitive-0.6.3.0:Control.Monad.Primitive
                         primitive-0.6.3.0:Data.Primitive.Array
                         primitive-0.6.3.0:Data.Primitive.ByteArray
                         profunctors-5.2.2:Data.Profunctor.Composition
                         profunctors-5.2.2:Data.Profunctor.Rep sdl2-2.4.0.1:SDL.Audio
                         sdl2-2.4.0.1:SDL.Event sdl2-2.4.0.1:SDL.Exception
                         sdl2-2.4.0.1:SDL.Hint sdl2-2.4.0.1:SDL.Init
                         sdl2-2.4.0.1:SDL.Input.GameController
                         sdl2-2.4.0.1:SDL.Input.Joystick sdl2-2.4.0.1:SDL.Input.Keyboard
                         sdl2-2.4.0.1:SDL.Input.Keyboard.Codes sdl2-2.4.0.1:SDL.Input.Mouse
                         sdl2-2.4.0.1:SDL.Internal.Types sdl2-2.4.0.1:SDL.Power
                         sdl2-2.4.0.1:SDL.Time sdl2-2.4.0.1:SDL.Video
                         sdl2-2.4.0.1:SDL.Video.OpenGL sdl2-2.4.0.1:SDL.Video.Renderer
                         sdl2-ttf-2.0.2:SDL.Font tagged-0.8.5:Data.Tagged
                         template-haskell-2.12.0.0:Language.Haskell.TH.Syntax
                         text-1.2.3.0:Data.Text text-1.2.3.0:Data.Text.Lazy
                         th-abstraction-0.2.6.0:Language.Haskell.TH.Datatype
                         unordered-containers-0.2.9.0:Data.HashMap.Base
                         unordered-containers-0.2.9.0:Data.HashSet
                         vector-0.12.0.1:Data.Vector vector-0.12.0.1:Data.Vector.Primitive
                         vector-0.12.0.1:Data.Vector.Storable
                         vector-0.12.0.1:Data.Vector.Unboxed
                         vector-0.12.0.1:Data.Vector.Unboxed.Base
import  -/  Stack-0.3.2:Data.Stack e7f704bd11627e1a734f5ce5c24b374a
import  -/  Stream-0.4.7.2:Data.Stream 31cb8ae1d25bf69d02bfbc06a9a73871
import  -/  base-4.10.1.0:Control.Monad.IO.Class 9d78cd0f73a837f3c00753bd212b9f2c
import  -/  base-4.10.1.0:Foreign.C.Types 936c0db027291520097b61fd8686710a
import  -/  base-4.10.1.0:GHC.Base 782fd99b5e36f3698a26179a49afca64
import  -/  base-4.10.1.0:GHC.Show 0a8ce2b5e533d1c2cfb7954e6736be45
import  -/  base-4.10.1.0:GHC.Word c6a98ee069a5b8600d1939e40e62ef27
import  -/  base-4.10.1.0:Prelude 31945b7d0084063347fc52506d3a4020
import  -/  ghc-prim-0.5.1.1:GHC.Classes 93e2660065dce9329577e83d76d8f0d4
import  -/  ghc-prim-0.5.1.1:GHC.Types b1fd0716441595db508c1a74387bf394
import  -/  lens-4.16.1:Control.Lens d35b54db874b2147b5ffe1d3cd39d59d
import  -/  lens-4.16.1:Control.Lens.TH 67bb2657b5e163badd8489feeb4c8ac4
import  -/  lens-4.16.1:Control.Lens.Type c70010fce6919a1c7cc491e67b0fedf9
import  -/  linear-1.20.7:Linear.Affine f4ed1aa58b28d63beac82829593554b3
import  -/  linear-1.20.7:Linear.V2 ee409e3e067ada9faf9fdda331749bf4
import  -/  Animations ed8ac26f601711059133f19a17b8411f
  exports: 1b514af753d69c9c6476a9810faf24f0
  AnimationHandler 1499031fdb5c91f6a039f5191b75a238
  AnimationSrcRect bec91fea7b73f18603dba410b765ef72
import  -/  Walls b13a13e2c4e3ef97855d945c5af1fb26
  exports: 9a82a9ead6771cc6b661267f6167d45d
  Wall 0489472b2e8cbbdc29c5c06003041655
  WallConfig 15ef4e0e6139268899ada48c6bd61c62
import  -/  mtl-2.2.2:Control.Monad.Reader 8d63edf5dfaf25ad085eae4468bdd77e
import  -/  mtl-2.2.2:Control.Monad.Reader.Class 6d33756d93a5919f9374afec232249f4
import  -/  mtl-2.2.2:Control.Monad.State 4acb2e6037f370fa4b91900d626e6406
import  -/  mtl-2.2.2:Control.Monad.State.Class de8813e114276746770717ab3ee06916
import  -/  sdl2-2.4.0.1:SDL 24b907aeafb5c6d95ad8ce8f19ccd6b3
import  -/  sdl2-2.4.0.1:SDL.Internal.Types 33bcd4dfeb623e9b827ced1113c3cf88
import  -/  sdl2-2.4.0.1:SDL.Video.Renderer 05fa9f919fc1b42de89d6ed9d3439937
import  -/  sdl2-mixer-1.1.0:SDL.Mixer 168817304425963102e0e8491840829c
import  -/  sdl2-ttf-2.0.2:SDL.Font 44c9d73e1da8a9f90d50e498341d19f1
import  -/  transformers-0.5.2.0:Control.Monad.Trans.Reader cc12564dc0d2121844a0316ee821dfff
import  -/  transformers-0.5.2.0:Control.Monad.Trans.State.Lazy 1a80bdb936666c1b8faf2f03f91a48cc
1989f26957dc34ff4b450af06c2d546d
  $fApplicativeMahppyBird :: GHC.Base.Applicative GameVars.MahppyBird
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ GameVars.MahppyBird
                  GameVars.$fFunctorMahppyBird
                  GameVars.$fApplicativeMahppyBird4
                    `cast`
                  (forall (a :: <*>_N).
                   Trans
                       (<a>_R
                        ->_R Trans
                                 (<GameVars.Config>_R
                                  ->_R Trans
                                           (<GameVars.Vars>_R
                                            ->_R Sym (GHC.Types.N:IO[0] <(a, GameVars.Vars)>_R))
                                           (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                     <GameVars.Vars>_N <GHC.Types.IO>_R <a>_N)))
                                 (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                           <*>_N
                                           <GameVars.Config>_R
                                           <Control.Monad.Trans.State.Lazy.StateT
                                              GameVars.Vars GHC.Types.IO>_R
                                           <a>_N)))
                       (<a>_R ->_R Sym (GameVars.N:MahppyBird[0]) <a>_N))
                  (GameVars.$fApplicativeMahppyBird_$s$fApplicativeReaderT_$c<*>
                     @ GameVars.Config)
                    `cast`
                  (forall (a :: <*>_N) (b :: <*>_N).
                   Sym (GameVars.N:MahppyBird[0]) <a -> b>_N
                   ->_R Sym (GameVars.N:MahppyBird[0]) <a>_N
                   ->_R Sym (GameVars.N:MahppyBird[0]) <b>_N)
                  (\ @ a @ b @ c -> GameVars.$fApplicativeMahppyBird3 @ c @ b @ a)
                    `cast`
                  (forall (a :: <*>_N) (b :: <*>_N) (c :: <*>_N).
                   Trans
                       (<a -> b -> c>_R
                        ->_R <Control.Monad.Trans.Reader.ReaderT
                                GameVars.Config
                                (Control.Monad.Trans.State.Lazy.StateT GameVars.Vars GHC.Types.IO)
                                a>_R
                        ->_R <Control.Monad.Trans.Reader.ReaderT
                                GameVars.Config
                                (Control.Monad.Trans.State.Lazy.StateT GameVars.Vars GHC.Types.IO)
                                b>_R
                        ->_R Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                      <*>_N
                                      <GameVars.Config>_R
                                      <Control.Monad.Trans.State.Lazy.StateT
                                         GameVars.Vars GHC.Types.IO>_R
                                      <c>_N))
                       (<a -> b -> c>_R
                        ->_R Sym (GameVars.N:MahppyBird[0]) <a>_N
                        ->_R Sym (GameVars.N:MahppyBird[0]) <b>_N
                        ->_R Sym (GameVars.N:MahppyBird[0]) <c>_N))
                  (\ @ a @ b -> GameVars.$fApplicativeMahppyBird2 @ b @ a)
                    `cast`
                  (forall (a :: <*>_N) (b :: <*>_N).
                   Trans
                       (<Control.Monad.Trans.Reader.ReaderT
                           GameVars.Config
                           (Control.Monad.Trans.State.Lazy.StateT GameVars.Vars GHC.Types.IO)
                           a>_R
                        ->_R <Control.Monad.Trans.Reader.ReaderT
                                GameVars.Config
                                (Control.Monad.Trans.State.Lazy.StateT GameVars.Vars GHC.Types.IO)
                                b>_R
                        ->_R Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                      <*>_N
                                      <GameVars.Config>_R
                                      <Control.Monad.Trans.State.Lazy.StateT
                                         GameVars.Vars GHC.Types.IO>_R
                                      <b>_N))
                       (Sym (GameVars.N:MahppyBird[0]) <a>_N
                        ->_R Sym (GameVars.N:MahppyBird[0]) <b>_N
                        ->_R Sym (GameVars.N:MahppyBird[0]) <b>_N))
                  GameVars.$fApplicativeMahppyBird1
                    `cast`
                  (forall (a :: <*>_N) (b :: <*>_N).
                   Trans
                       (<Control.Monad.Trans.Reader.ReaderT
                           GameVars.Config
                           (Control.Monad.Trans.State.Lazy.StateT GameVars.Vars GHC.Types.IO)
                           a>_R
                        ->_R <Control.Monad.Trans.Reader.ReaderT
                                GameVars.Config
                                (Control.Monad.Trans.State.Lazy.StateT GameVars.Vars GHC.Types.IO)
                                b>_R
                        ->_R Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                      <*>_N
                                      <GameVars.Config>_R
                                      <Control.Monad.Trans.State.Lazy.StateT
                                         GameVars.Vars GHC.Types.IO>_R
                                      <a>_N))
                       (Sym (GameVars.N:MahppyBird[0]) <a>_N
                        ->_R Sym (GameVars.N:MahppyBird[0]) <b>_N
                        ->_R Sym (GameVars.N:MahppyBird[0]) <a>_N)) -}
ab709fa8fe647cd2ad73f730cb03d27b
  $fApplicativeMahppyBird1 ::
    Control.Monad.Trans.Reader.ReaderT
      GameVars.Config
      (Control.Monad.Trans.State.Lazy.StateT GameVars.Vars GHC.Types.IO)
      a
    -> Control.Monad.Trans.Reader.ReaderT
         GameVars.Config
         (Control.Monad.Trans.State.Lazy.StateT GameVars.Vars GHC.Types.IO)
         b
    -> GameVars.Config
    -> Control.Monad.Trans.State.Lazy.StateT
         GameVars.Vars GHC.Types.IO a
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C(C1(U(U,U(1*U,1*U)))))><L,1*C1(C(C1(U(U,1*U(A,1*U)))))><L,U>,
     Unfolding: (\ @ a
                   @ b
                   (eta1 :: Control.Monad.Trans.Reader.ReaderT
                              GameVars.Config
                              (Control.Monad.Trans.State.Lazy.StateT GameVars.Vars GHC.Types.IO)
                              a)
                   (eta :: Control.Monad.Trans.Reader.ReaderT
                             GameVars.Config
                             (Control.Monad.Trans.State.Lazy.StateT GameVars.Vars GHC.Types.IO)
                             b)
                   (eta2 :: GameVars.Config) ->
                 let {
                   m1 :: Control.Monad.Trans.State.Lazy.StateT
                           GameVars.Vars GHC.Types.IO a
                   = eta1
                       `cast`
                     (Control.Monad.Trans.Reader.N:ReaderT[0]
                          <*>_N
                          <GameVars.Config>_R
                          <Control.Monad.Trans.State.Lazy.StateT
                             GameVars.Vars GHC.Types.IO>_R
                          <a>_N)
                       eta2
                 } in
                 let {
                   ds1 :: Control.Monad.Trans.State.Lazy.StateT
                            GameVars.Vars GHC.Types.IO b
                   = eta
                       `cast`
                     (Control.Monad.Trans.Reader.N:ReaderT[0]
                          <*>_N
                          <GameVars.Config>_R
                          <Control.Monad.Trans.State.Lazy.StateT
                             GameVars.Vars GHC.Types.IO>_R
                          <b>_N)
                       eta2
                 } in
                 (\ (s1 :: GameVars.Vars)
                    (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                  case (m1
                          `cast`
                        (Control.Monad.Trans.State.Lazy.N:StateT[0]
                             <GameVars.Vars>_N <GHC.Types.IO>_R <a>_N)
                          s1)
                         `cast`
                       (GHC.Types.N:IO[0] <(a, GameVars.Vars)>_R)
                         s of ds { (#,#) ipv ipv1 ->
                  case (ds1
                          `cast`
                        (Control.Monad.Trans.State.Lazy.N:StateT[0]
                             <GameVars.Vars>_N <GHC.Types.IO>_R <b>_N)
                          (case ipv1 of wild { (,) a1 s' -> s' }))
                         `cast`
                       (GHC.Types.N:IO[0] <(b, GameVars.Vars)>_R)
                         ipv of ds2 { (#,#) ipv2 ipv3 ->
                  (# ipv2,
                     (case ipv1 of wild { (,) a1 s' -> a1 },
                      case ipv3 of wild { (,) x s'' -> s'' }) #) } })
                   `cast`
                 (Trans
                      (<GameVars.Vars>_R
                       ->_R Sym (GHC.Types.N:IO[0] <(a, GameVars.Vars)>_R))
                      (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                <GameVars.Vars>_N <GHC.Types.IO>_R <a>_N)))) -}
1d629fd7300a11044f88ecb9f183a9de
  $fApplicativeMahppyBird2 ::
    Control.Monad.Trans.Reader.ReaderT
      GameVars.Config
      (Control.Monad.Trans.State.Lazy.StateT GameVars.Vars GHC.Types.IO)
      a
    -> Control.Monad.Trans.Reader.ReaderT
         GameVars.Config
         (Control.Monad.Trans.State.Lazy.StateT GameVars.Vars GHC.Types.IO)
         b
    -> GameVars.Config
    -> Control.Monad.Trans.State.Lazy.StateT
         GameVars.Vars GHC.Types.IO b
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C(C1(U(U,1*U(A,1*U)))))><L,1*C1(C(C1(U(U,U(1*U,1*U)))))><L,U>,
     Unfolding: (\ @ b
                   @ a
                   (eta :: Control.Monad.Trans.Reader.ReaderT
                             GameVars.Config
                             (Control.Monad.Trans.State.Lazy.StateT GameVars.Vars GHC.Types.IO)
                             a)
                   (eta1 :: Control.Monad.Trans.Reader.ReaderT
                              GameVars.Config
                              (Control.Monad.Trans.State.Lazy.StateT GameVars.Vars GHC.Types.IO)
                              b)
                   (r1 :: GameVars.Config) ->
                 let {
                   m1 :: Control.Monad.Trans.State.Lazy.StateT
                           GameVars.Vars GHC.Types.IO a
                   = eta
                       `cast`
                     (Control.Monad.Trans.Reader.N:ReaderT[0]
                          <*>_N
                          <GameVars.Config>_R
                          <Control.Monad.Trans.State.Lazy.StateT
                             GameVars.Vars GHC.Types.IO>_R
                          <a>_N)
                       r1
                 } in
                 let {
                   ds1 :: Control.Monad.Trans.State.Lazy.StateT
                            GameVars.Vars GHC.Types.IO b
                   = eta1
                       `cast`
                     (Control.Monad.Trans.Reader.N:ReaderT[0]
                          <*>_N
                          <GameVars.Config>_R
                          <Control.Monad.Trans.State.Lazy.StateT
                             GameVars.Vars GHC.Types.IO>_R
                          <b>_N)
                       r1
                 } in
                 (\ (s1 :: GameVars.Vars)
                    (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                  case (m1
                          `cast`
                        (Control.Monad.Trans.State.Lazy.N:StateT[0]
                             <GameVars.Vars>_N <GHC.Types.IO>_R <a>_N)
                          s1)
                         `cast`
                       (GHC.Types.N:IO[0] <(a, GameVars.Vars)>_R)
                         s of ds { (#,#) ipv ipv1 ->
                  case (ds1
                          `cast`
                        (Control.Monad.Trans.State.Lazy.N:StateT[0]
                             <GameVars.Vars>_N <GHC.Types.IO>_R <b>_N)
                          (case ipv1 of wild { (,) a1 s' -> s' }))
                         `cast`
                       (GHC.Types.N:IO[0] <(b, GameVars.Vars)>_R)
                         ipv of ds2 { (#,#) ipv2 ipv3 ->
                  (# ipv2,
                     (case ipv3 of wild1 { (,) x s'' -> x },
                      case ipv3 of wild { (,) x s'' -> s'' }) #) } })
                   `cast`
                 (Trans
                      (<GameVars.Vars>_R
                       ->_R Sym (GHC.Types.N:IO[0] <(b, GameVars.Vars)>_R))
                      (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                <GameVars.Vars>_N <GHC.Types.IO>_R <b>_N)))) -}
21fa489c5b5de42aaf09d412d008c60d
  $fApplicativeMahppyBird3 ::
    (a -> b -> c)
    -> Control.Monad.Trans.Reader.ReaderT
         GameVars.Config
         (Control.Monad.Trans.State.Lazy.StateT GameVars.Vars GHC.Types.IO)
         a
    -> Control.Monad.Trans.Reader.ReaderT
         GameVars.Config
         (Control.Monad.Trans.State.Lazy.StateT GameVars.Vars GHC.Types.IO)
         b
    -> GameVars.Config
    -> Control.Monad.Trans.State.Lazy.StateT
         GameVars.Vars GHC.Types.IO c
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,C(C1(U))><L,1*C1(C(C1(U(U,U(1*U,1*U)))))><L,1*C1(C(C1(U(U,U(1*U,1*U)))))><L,U>,
     Unfolding: (\ @ c
                   @ b
                   @ a
                   (eta :: a -> b -> c)
                   (eta1 :: Control.Monad.Trans.Reader.ReaderT
                              GameVars.Config
                              (Control.Monad.Trans.State.Lazy.StateT GameVars.Vars GHC.Types.IO)
                              a)
                   (eta2 :: Control.Monad.Trans.Reader.ReaderT
                              GameVars.Config
                              (Control.Monad.Trans.State.Lazy.StateT GameVars.Vars GHC.Types.IO)
                              b)
                   (eta3 :: GameVars.Config) ->
                 let {
                   m1 :: Control.Monad.Trans.State.Lazy.StateT
                           GameVars.Vars GHC.Types.IO a
                   = eta1
                       `cast`
                     (Control.Monad.Trans.Reader.N:ReaderT[0]
                          <*>_N
                          <GameVars.Config>_R
                          <Control.Monad.Trans.State.Lazy.StateT
                             GameVars.Vars GHC.Types.IO>_R
                          <a>_N)
                       eta3
                 } in
                 let {
                   ds1 :: Control.Monad.Trans.State.Lazy.StateT
                            GameVars.Vars GHC.Types.IO b
                   = eta2
                       `cast`
                     (Control.Monad.Trans.Reader.N:ReaderT[0]
                          <*>_N
                          <GameVars.Config>_R
                          <Control.Monad.Trans.State.Lazy.StateT
                             GameVars.Vars GHC.Types.IO>_R
                          <b>_N)
                       eta3
                 } in
                 (\ (s1 :: GameVars.Vars)
                    (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                  case (m1
                          `cast`
                        (Control.Monad.Trans.State.Lazy.N:StateT[0]
                             <GameVars.Vars>_N <GHC.Types.IO>_R <a>_N)
                          s1)
                         `cast`
                       (GHC.Types.N:IO[0] <(a, GameVars.Vars)>_R)
                         s of ds { (#,#) ipv ipv1 ->
                  case (ds1
                          `cast`
                        (Control.Monad.Trans.State.Lazy.N:StateT[0]
                             <GameVars.Vars>_N <GHC.Types.IO>_R <b>_N)
                          (case ipv1 of wild { (,) a1 s' -> s' }))
                         `cast`
                       (GHC.Types.N:IO[0] <(b, GameVars.Vars)>_R)
                         ipv of ds2 { (#,#) ipv2 ipv3 ->
                  (# ipv2,
                     (eta
                        (case ipv1 of wild { (,) a1 s' -> a1 })
                        (case ipv3 of wild1 { (,) x s'' -> x }),
                      case ipv3 of wild { (,) x s'' -> s'' }) #) } })
                   `cast`
                 (Trans
                      (<GameVars.Vars>_R
                       ->_R Sym (GHC.Types.N:IO[0] <(c, GameVars.Vars)>_R))
                      (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                <GameVars.Vars>_N <GHC.Types.IO>_R <c>_N)))) -}
452a8b17597b0c26dbedcae8e7794799
  $fApplicativeMahppyBird4 ::
    a
    -> GameVars.Config
    -> GameVars.Vars
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, (a, GameVars.Vars) #)
  {- Arity: 4, HasNoCafRefs, Strictness: <L,U><L,A><L,U><S,U>,
     Unfolding: InlineRule (4, True, False)
                (\ @ a
                   (x :: a)
                   (eta :: GameVars.Config)
                   (eta1 :: GameVars.Vars)
                   (eta2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 (# eta2, (x, eta1) #)) -}
a65f962b6fd3f698e101695debe677e1
  $fApplicativeMahppyBird_$s$fApplicativeReaderT_$c<*> ::
    Control.Monad.Trans.Reader.ReaderT
      r
      (Control.Monad.Trans.State.Lazy.StateT GameVars.Vars GHC.Types.IO)
      (a -> b)
    -> Control.Monad.Trans.Reader.ReaderT
         r
         (Control.Monad.Trans.State.Lazy.StateT GameVars.Vars GHC.Types.IO)
         a
    -> Control.Monad.Trans.Reader.ReaderT
         r
         (Control.Monad.Trans.State.Lazy.StateT GameVars.Vars GHC.Types.IO)
         b
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C(C1(U(U,U(1*C1(U),1*U)))))><L,1*C1(C(C1(U(U,U(1*U,1*U)))))><L,U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ r
                   @ a
                   @ b
                   (f6 :: Control.Monad.Trans.Reader.ReaderT
                            r
                            (Control.Monad.Trans.State.Lazy.StateT GameVars.Vars GHC.Types.IO)
                            (a -> b))
                   (v :: Control.Monad.Trans.Reader.ReaderT
                           r
                           (Control.Monad.Trans.State.Lazy.StateT GameVars.Vars GHC.Types.IO)
                           a)
                   (r1 :: r) ->
                 let {
                   ds :: Control.Monad.Trans.State.Lazy.StateT
                           GameVars.Vars GHC.Types.IO (a -> b)
                   = f6
                       `cast`
                     (Control.Monad.Trans.Reader.N:ReaderT[0]
                          <*>_N
                          <r>_R
                          <Control.Monad.Trans.State.Lazy.StateT
                             GameVars.Vars GHC.Types.IO>_R
                          <a -> b>_N)
                       r1
                 } in
                 let {
                   ds1 :: Control.Monad.Trans.State.Lazy.StateT
                            GameVars.Vars GHC.Types.IO a
                   = v `cast`
                     (Control.Monad.Trans.Reader.N:ReaderT[0]
                          <*>_N
                          <r>_R
                          <Control.Monad.Trans.State.Lazy.StateT
                             GameVars.Vars GHC.Types.IO>_R
                          <a>_N)
                       r1
                 } in
                 (\ (s1 :: GameVars.Vars)
                    (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                  case (ds
                          `cast`
                        (Trans
                             (Nth:2
                                  (Trans
                                       (<Control.Monad.Trans.State.Lazy.StateT
                                           GameVars.Vars GHC.Types.IO (a -> b)>_R
                                        ->_R <Control.Monad.Trans.State.Lazy.StateT
                                                GameVars.Vars GHC.Types.IO a>_R
                                        ->_R Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                 <GameVars.Vars>_N <GHC.Types.IO>_R <b>_N)
                                       (<Control.Monad.Trans.State.Lazy.StateT
                                           GameVars.Vars GHC.Types.IO (a -> b)>_R
                                        ->_R <Control.Monad.Trans.State.Lazy.StateT
                                                GameVars.Vars GHC.Types.IO a>_R
                                        ->_R <GameVars.Vars>_R
                                        ->_R GHC.Types.N:IO[0] <(b, GameVars.Vars)>_R)))
                             (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                  <GameVars.Vars>_N <GHC.Types.IO>_R <a -> b>_N))
                          s1)
                         `cast`
                       (GHC.Types.N:IO[0] <(a -> b, GameVars.Vars)>_R)
                         s of ds2 { (#,#) ipv ipv1 ->
                  case (ds1
                          `cast`
                        (Trans
                             (Nth:2
                                  (Nth:3
                                       (Trans
                                            (<Control.Monad.Trans.State.Lazy.StateT
                                                GameVars.Vars GHC.Types.IO (a -> b)>_R
                                             ->_R <Control.Monad.Trans.State.Lazy.StateT
                                                     GameVars.Vars GHC.Types.IO a>_R
                                             ->_R Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                      <GameVars.Vars>_N <GHC.Types.IO>_R <b>_N)
                                            (<Control.Monad.Trans.State.Lazy.StateT
                                                GameVars.Vars GHC.Types.IO (a -> b)>_R
                                             ->_R <Control.Monad.Trans.State.Lazy.StateT
                                                     GameVars.Vars GHC.Types.IO a>_R
                                             ->_R <GameVars.Vars>_R
                                             ->_R GHC.Types.N:IO[0] <(b, GameVars.Vars)>_R))))
                             (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                  <GameVars.Vars>_N <GHC.Types.IO>_R <a>_N))
                          (case ipv1 of wild { (,) f7 s' -> s' }))
                         `cast`
                       (GHC.Types.N:IO[0] <(a, GameVars.Vars)>_R)
                         ipv of ds3 { (#,#) ipv2 ipv3 ->
                  (# ipv2,
                     (case ipv1 of wild { (,) f7 s' ->
                      f7 (case ipv3 of wild1 { (,) x s'' -> x }) },
                      case ipv3 of wild { (,) x s'' -> s'' }) #) } })
                   `cast`
                 (Nth:3
                      (Nth:3
                           (Trans
                                (<Control.Monad.Trans.State.Lazy.StateT
                                    GameVars.Vars GHC.Types.IO (a -> b)>_R
                                 ->_R <Control.Monad.Trans.State.Lazy.StateT
                                         GameVars.Vars GHC.Types.IO a>_R
                                 ->_R <GameVars.Vars>_R
                                 ->_R Sym (GHC.Types.N:IO[0] <(b, GameVars.Vars)>_R))
                                (<Control.Monad.Trans.State.Lazy.StateT
                                    GameVars.Vars GHC.Types.IO (a -> b)>_R
                                 ->_R <Control.Monad.Trans.State.Lazy.StateT
                                         GameVars.Vars GHC.Types.IO a>_R
                                 ->_R Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                               <GameVars.Vars>_N <GHC.Types.IO>_R <b>_N))))))
                  `cast`
                (forall (r :: <*>_N) (a :: <*>_N) (b :: <*>_N).
                 <Control.Monad.Trans.Reader.ReaderT
                    r
                    (Control.Monad.Trans.State.Lazy.StateT GameVars.Vars GHC.Types.IO)
                    (a -> b)>_R
                 ->_R <Control.Monad.Trans.Reader.ReaderT
                         r
                         (Control.Monad.Trans.State.Lazy.StateT GameVars.Vars GHC.Types.IO)
                         a>_R
                 ->_R Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                               <*>_N
                               <r>_R
                               <Control.Monad.Trans.State.Lazy.StateT
                                  GameVars.Vars GHC.Types.IO>_R
                               <b>_N)) -}
862115caec0cc090e3ab2e897cce53f2
  $fEqGameState :: GHC.Classes.Eq GameVars.GameState
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ GameVars.GameState
                  GameVars.$fEqGameState_$c==
                  GameVars.$fEqGameState_$c/= -}
862115caec0cc090e3ab2e897cce53f2
  $fEqGameState_$c/= ::
    GameVars.GameState -> GameVars.GameState -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: GameVars.GameState) (y :: GameVars.GameState) ->
                 case x of wild {
                   GameVars.Menu
                   -> case y of wild1 {
                        DEFAULT -> GHC.Types.True GameVars.Menu -> GHC.Types.False }
                   GameVars.PrePlay
                   -> case y of wild1 {
                        DEFAULT -> GHC.Types.True GameVars.PrePlay -> GHC.Types.False }
                   GameVars.Play
                   -> case y of wild1 {
                        DEFAULT -> GHC.Types.True GameVars.Play -> GHC.Types.False }
                   GameVars.Pause
                   -> case y of wild1 {
                        DEFAULT -> GHC.Types.True GameVars.Pause -> GHC.Types.False }
                   GameVars.GameOver ds
                   -> case y of wild1 {
                        DEFAULT -> GHC.Types.True
                        GameVars.GameOver ds1 -> GHC.Types.False }
                   GameVars.Quit
                   -> case y of wild1 {
                        DEFAULT -> GHC.Types.True GameVars.Quit -> GHC.Types.False } }) -}
862115caec0cc090e3ab2e897cce53f2
  $fEqGameState_$c== ::
    GameVars.GameState -> GameVars.GameState -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (ds :: GameVars.GameState)
                   (ds1 :: GameVars.GameState) ->
                 case ds of wild {
                   GameVars.Menu
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False GameVars.Menu -> GHC.Types.True }
                   GameVars.PrePlay
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False GameVars.PrePlay -> GHC.Types.True }
                   GameVars.Play
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False GameVars.Play -> GHC.Types.True }
                   GameVars.Pause
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False GameVars.Pause -> GHC.Types.True }
                   GameVars.GameOver ds2
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        GameVars.GameOver ds3 -> GHC.Types.True }
                   GameVars.Quit
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False GameVars.Quit -> GHC.Types.True } }) -}
1989f26957dc34ff4b450af06c2d546d
  $fFunctorMahppyBird :: GHC.Base.Functor GameVars.MahppyBird
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ GameVars.MahppyBird
                  (GameVars.$fFunctorMahppyBird_$s$fFunctorReaderT_$cfmap
                     @ GameVars.Config)
                    `cast`
                  (forall (a :: <*>_N) (b :: <*>_N).
                   <a -> b>_R
                   ->_R Sym (GameVars.N:MahppyBird[0]) <a>_N
                   ->_R Sym (GameVars.N:MahppyBird[0]) <b>_N)
                  GameVars.$fFunctorMahppyBird1
                    `cast`
                  (forall (a :: <*>_N) (b :: <*>_N).
                   Trans
                       (<a>_R
                        ->_R <Control.Monad.Trans.Reader.ReaderT
                                GameVars.Config
                                (Control.Monad.Trans.State.Lazy.StateT GameVars.Vars GHC.Types.IO)
                                b>_R
                        ->_R Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                      <*>_N
                                      <GameVars.Config>_R
                                      <Control.Monad.Trans.State.Lazy.StateT
                                         GameVars.Vars GHC.Types.IO>_R
                                      <a>_N))
                       (<a>_R
                        ->_R Sym (GameVars.N:MahppyBird[0]) <b>_N
                        ->_R Sym (GameVars.N:MahppyBird[0]) <a>_N)) -}
09c6ed3fe0962c35a4632ee9614c737c
  $fFunctorMahppyBird1 ::
    a
    -> Control.Monad.Trans.Reader.ReaderT
         GameVars.Config
         (Control.Monad.Trans.State.Lazy.StateT GameVars.Vars GHC.Types.IO)
         b
    -> GameVars.Config
    -> Control.Monad.Trans.State.Lazy.StateT
         GameVars.Vars GHC.Types.IO a
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U><L,1*C1(C(C1(U(U,1*U(A,1*U)))))><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   @ b
                   (x :: a)
                   (eta :: Control.Monad.Trans.Reader.ReaderT
                             GameVars.Config
                             (Control.Monad.Trans.State.Lazy.StateT GameVars.Vars GHC.Types.IO)
                             b)
                   (eta1 :: GameVars.Config) ->
                 let {
                   m1 :: Control.Monad.Trans.State.Lazy.StateT
                           GameVars.Vars GHC.Types.IO b
                   = eta
                       `cast`
                     (Control.Monad.Trans.Reader.N:ReaderT[0]
                          <*>_N
                          <GameVars.Config>_R
                          <Control.Monad.Trans.State.Lazy.StateT
                             GameVars.Vars GHC.Types.IO>_R
                          <b>_N)
                       eta1
                 } in
                 (\ (s1 :: GameVars.Vars)
                    (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                  case (m1
                          `cast`
                        (Control.Monad.Trans.State.Lazy.N:StateT[0]
                             <GameVars.Vars>_N <GHC.Types.IO>_R <b>_N)
                          s1)
                         `cast`
                       (GHC.Types.N:IO[0] <(b, GameVars.Vars)>_R)
                         s of ds { (#,#) ipv ipv1 ->
                  (# ipv, (x, case ipv1 of wild { (,) a1 s' -> s' }) #) })
                   `cast`
                 (Trans
                      (<GameVars.Vars>_R
                       ->_R Sym (GHC.Types.N:IO[0] <(a, GameVars.Vars)>_R))
                      (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                <GameVars.Vars>_N <GHC.Types.IO>_R <a>_N)))) -}
9ed5504192580343d52705784d2c6aa4
  $fFunctorMahppyBird_$s$fFunctorReaderT_$cfmap ::
    (a -> b)
    -> Control.Monad.Trans.Reader.ReaderT
         r
         (Control.Monad.Trans.State.Lazy.StateT GameVars.Vars GHC.Types.IO)
         a
    -> Control.Monad.Trans.Reader.ReaderT
         r
         (Control.Monad.Trans.State.Lazy.StateT GameVars.Vars GHC.Types.IO)
         b
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,C(U)><L,1*C1(C(C1(U(U,U(1*U,1*U)))))><L,U>,
     Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ r @ a @ b (f6 :: a -> b) ->
                 Control.Monad.Trans.Reader.mapReaderT
                   @ *
                   @ *
                   @ (Control.Monad.Trans.State.Lazy.StateT
                        GameVars.Vars GHC.Types.IO)
                   @ a
                   @ (Control.Monad.Trans.State.Lazy.StateT
                        GameVars.Vars GHC.Types.IO)
                   @ b
                   @ r
                   (GameVars.$fFunctorMahppyBird_$s$fFunctorStateT_$cfmap
                      @ GameVars.Vars
                      @ a
                      @ b
                      f6)) -}
7e82edc01afb7e77119db37d0ace81bd
  $fFunctorMahppyBird_$s$fFunctorStateT_$cfmap ::
    (a -> b)
    -> Control.Monad.Trans.State.Lazy.StateT s GHC.Types.IO a
    -> Control.Monad.Trans.State.Lazy.StateT s GHC.Types.IO b
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,1*C1(U)><C(C(S(SL))),1*C1(C1(U(U,U(1*U,1*U))))><L,U><S,U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ s
                   @ a
                   @ b
                   (f6 :: a -> b)
                   (m1 :: Control.Monad.Trans.State.Lazy.StateT s GHC.Types.IO a)
                   (s1 :: s)
                   (s2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case (m1
                         `cast`
                       (Control.Monad.Trans.State.Lazy.N:StateT[0]
                            <s>_N <GHC.Types.IO>_R <a>_N)
                         s1)
                        `cast`
                      (GHC.Types.N:IO[0] <(a, s)>_R)
                        s2 of ds { (#,#) ipv ipv1 ->
                 (# ipv,
                    (f6 (case ipv1 of wild { (,) a1 s' -> a1 }),
                     case ipv1 of wild { (,) a1 s' -> s' }) #) })
                  `cast`
                (forall (s :: <*>_N) (a :: <*>_N) (b :: <*>_N).
                 Trans
                     (<a -> b>_R
                      ->_R <Control.Monad.Trans.State.Lazy.StateT s GHC.Types.IO a>_R
                      ->_R <s>_R
                      ->_R Sym (GHC.Types.N:IO[0] <(b, s)>_R))
                     (<a -> b>_R
                      ->_R <Control.Monad.Trans.State.Lazy.StateT s GHC.Types.IO a>_R
                      ->_R Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                    <s>_N <GHC.Types.IO>_R <b>_N))) -}
1989f26957dc34ff4b450af06c2d546d
  $fMonadIOMahppyBird ::
    Control.Monad.IO.Class.MonadIO GameVars.MahppyBird
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ GameVars.MahppyBird
                  GameVars.$fMonadMahppyBird
                  GameVars.$fMonadIOMahppyBird1
                    `cast`
                  (forall (a :: <*>_N).
                   Trans
                       (<GHC.Types.IO a>_R
                        ->_R Trans
                                 (<GameVars.Config>_R
                                  ->_R Trans
                                           (<GameVars.Vars>_R
                                            ->_R Sym (GHC.Types.N:IO[0] <(a, GameVars.Vars)>_R))
                                           (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                     <GameVars.Vars>_N <GHC.Types.IO>_R <a>_N)))
                                 (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                           <*>_N
                                           <GameVars.Config>_R
                                           <Control.Monad.Trans.State.Lazy.StateT
                                              GameVars.Vars GHC.Types.IO>_R
                                           <a>_N)))
                       (<GHC.Types.IO a>_R ->_R Sym (GameVars.N:MahppyBird[0]) <a>_N)) -}
cf96b70dc7366be7cfe45cfd850f215e
  $fMonadIOMahppyBird1 ::
    GHC.Types.IO a
    -> GameVars.Config
    -> GameVars.Vars
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, (a, GameVars.Vars) #)
  {- Arity: 4, HasNoCafRefs,
     Strictness: <C(S(SL)),1*C1(U(U,U))><L,A><L,U><S,U>,
     Unfolding: InlineRule (4, True, False)
                (\ @ a
                   (x :: GHC.Types.IO a)
                   (eta :: GameVars.Config)
                   (eta1 :: GameVars.Vars)
                   (eta2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case x `cast` (GHC.Types.N:IO[0] <a>_R)
                        eta2 of ds1 { (#,#) ipv ipv1 ->
                 (# ipv, (ipv1, eta1) #) }) -}
1989f26957dc34ff4b450af06c2d546d
  $fMonadMahppyBird :: GHC.Base.Monad GameVars.MahppyBird
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ GameVars.MahppyBird
                  GameVars.$fApplicativeMahppyBird
                  (GameVars.$fMonadMahppyBird_$s$fMonadReaderT_$c>>=
                     @ GameVars.Config)
                    `cast`
                  (forall (a :: <*>_N) (b :: <*>_N).
                   Sym (GameVars.N:MahppyBird[0]) <a>_N
                   ->_R (<a>_R ->_R Sym (GameVars.N:MahppyBird[0]) <b>_N)
                   ->_R Sym (GameVars.N:MahppyBird[0]) <b>_N)
                  (GameVars.$fMonadMahppyBird_$s$fMonadReaderT_$c>>
                     @ GameVars.Config)
                    `cast`
                  (forall (a :: <*>_N) (b :: <*>_N).
                   Sym (GameVars.N:MahppyBird[0]) <a>_N
                   ->_R Sym (GameVars.N:MahppyBird[0]) <b>_N
                   ->_R Sym (GameVars.N:MahppyBird[0]) <b>_N)
                  GameVars.$fApplicativeMahppyBird4
                    `cast`
                  (forall (a :: <*>_N).
                   Trans
                       (<a>_R
                        ->_R Trans
                                 (<GameVars.Config>_R
                                  ->_R Trans
                                           (<GameVars.Vars>_R
                                            ->_R Sym (GHC.Types.N:IO[0] <(a, GameVars.Vars)>_R))
                                           (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                     <GameVars.Vars>_N <GHC.Types.IO>_R <a>_N)))
                                 (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                           <*>_N
                                           <GameVars.Config>_R
                                           <Control.Monad.Trans.State.Lazy.StateT
                                              GameVars.Vars GHC.Types.IO>_R
                                           <a>_N)))
                       (<a>_R ->_R Sym (GameVars.N:MahppyBird[0]) <a>_N))
                  (GameVars.$fMonadMahppyBird_$s$fMonadReaderT_$cfail
                     @ GameVars.Config)
                    `cast`
                  (forall (a :: <*>_N).
                   <[GHC.Types.Char]>_R ->_R Sym (GameVars.N:MahppyBird[0]) <a>_N) -}
97dfd2e785a30fe6776f061d18a7b62e
  $fMonadMahppyBird_$s$fMonadReaderT_$c>> ::
    Control.Monad.Trans.Reader.ReaderT
      r
      (Control.Monad.Trans.State.Lazy.StateT GameVars.Vars GHC.Types.IO)
      a
    -> Control.Monad.Trans.Reader.ReaderT
         r
         (Control.Monad.Trans.State.Lazy.StateT GameVars.Vars GHC.Types.IO)
         b
    -> Control.Monad.Trans.Reader.ReaderT
         r
         (Control.Monad.Trans.State.Lazy.StateT GameVars.Vars GHC.Types.IO)
         b
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C(C1(U(U,1*U(A,1*U)))))><L,1*C1(C(C1(U)))><L,U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ r
                   @ a
                   @ b
                   (m1 :: Control.Monad.Trans.Reader.ReaderT
                            r
                            (Control.Monad.Trans.State.Lazy.StateT GameVars.Vars GHC.Types.IO)
                            a)
                   (k :: Control.Monad.Trans.Reader.ReaderT
                           r
                           (Control.Monad.Trans.State.Lazy.StateT GameVars.Vars GHC.Types.IO)
                           b)
                   (r1 :: r) ->
                 let {
                   m2 :: Control.Monad.Trans.State.Lazy.StateT
                           GameVars.Vars GHC.Types.IO a
                   = m1
                       `cast`
                     (Control.Monad.Trans.Reader.N:ReaderT[0]
                          <*>_N
                          <r>_R
                          <Control.Monad.Trans.State.Lazy.StateT
                             GameVars.Vars GHC.Types.IO>_R
                          <a>_N)
                       r1
                 } in
                 (\ (s1 :: GameVars.Vars)
                    (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                  case (m2
                          `cast`
                        (Trans
                             (Nth:2
                                  (Trans
                                       (<Control.Monad.Trans.State.Lazy.StateT
                                           GameVars.Vars GHC.Types.IO a>_R
                                        ->_R <a
                                              -> Control.Monad.Trans.State.Lazy.StateT
                                                   GameVars.Vars GHC.Types.IO b>_R
                                        ->_R Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                 <GameVars.Vars>_N <GHC.Types.IO>_R <b>_N)
                                       (<Control.Monad.Trans.State.Lazy.StateT
                                           GameVars.Vars GHC.Types.IO a>_R
                                        ->_R <a
                                              -> Control.Monad.Trans.State.Lazy.StateT
                                                   GameVars.Vars GHC.Types.IO b>_R
                                        ->_R <GameVars.Vars>_R
                                        ->_R GHC.Types.N:IO[0] <(b, GameVars.Vars)>_R)))
                             (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                  <GameVars.Vars>_N <GHC.Types.IO>_R <a>_N))
                          s1)
                         `cast`
                       (GHC.Types.N:IO[0] <(a, GameVars.Vars)>_R)
                         s of ds1 { (#,#) ipv ipv1 ->
                  ((k `cast`
                    (Control.Monad.Trans.Reader.N:ReaderT[0]
                         <*>_N
                         <r>_R
                         <Control.Monad.Trans.State.Lazy.StateT
                            GameVars.Vars GHC.Types.IO>_R
                         <b>_N)
                      r1)
                     `cast`
                   (Control.Monad.Trans.State.Lazy.N:StateT[0]
                        <GameVars.Vars>_N <GHC.Types.IO>_R <b>_N)
                     (case ipv1 of wild { (,) a1 s' -> s' }))
                    `cast`
                  (GHC.Types.N:IO[0] <(b, GameVars.Vars)>_R)
                    ipv })
                   `cast`
                 (Nth:3
                      (Nth:3
                           (Trans
                                (<Control.Monad.Trans.State.Lazy.StateT
                                    GameVars.Vars GHC.Types.IO a>_R
                                 ->_R <a
                                       -> Control.Monad.Trans.State.Lazy.StateT
                                            GameVars.Vars GHC.Types.IO b>_R
                                 ->_R <GameVars.Vars>_R
                                 ->_R Sym (GHC.Types.N:IO[0] <(b, GameVars.Vars)>_R))
                                (<Control.Monad.Trans.State.Lazy.StateT
                                    GameVars.Vars GHC.Types.IO a>_R
                                 ->_R <a
                                       -> Control.Monad.Trans.State.Lazy.StateT
                                            GameVars.Vars GHC.Types.IO b>_R
                                 ->_R Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                               <GameVars.Vars>_N <GHC.Types.IO>_R <b>_N))))))
                  `cast`
                (forall (r :: <*>_N) (a :: <*>_N) (b :: <*>_N).
                 <Control.Monad.Trans.Reader.ReaderT
                    r
                    (Control.Monad.Trans.State.Lazy.StateT GameVars.Vars GHC.Types.IO)
                    a>_R
                 ->_R <Control.Monad.Trans.Reader.ReaderT
                         r
                         (Control.Monad.Trans.State.Lazy.StateT GameVars.Vars GHC.Types.IO)
                         b>_R
                 ->_R Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                               <*>_N
                               <r>_R
                               <Control.Monad.Trans.State.Lazy.StateT
                                  GameVars.Vars GHC.Types.IO>_R
                               <b>_N)) -}
ddd7b3c1e877013f576754c805109eab
  $fMonadMahppyBird_$s$fMonadReaderT_$c>>= ::
    Control.Monad.Trans.Reader.ReaderT
      r
      (Control.Monad.Trans.State.Lazy.StateT GameVars.Vars GHC.Types.IO)
      a
    -> (a
        -> Control.Monad.Trans.Reader.ReaderT
             r
             (Control.Monad.Trans.State.Lazy.StateT GameVars.Vars GHC.Types.IO)
             b)
    -> Control.Monad.Trans.Reader.ReaderT
         r
         (Control.Monad.Trans.State.Lazy.StateT GameVars.Vars GHC.Types.IO)
         b
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C(C1(U(U,U(1*U,1*U)))))><L,C(C1(C1(C1(U))))><L,U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ r
                   @ a
                   @ b
                   (m1 :: Control.Monad.Trans.Reader.ReaderT
                            r
                            (Control.Monad.Trans.State.Lazy.StateT GameVars.Vars GHC.Types.IO)
                            a)
                   (k :: a
                         -> Control.Monad.Trans.Reader.ReaderT
                              r
                              (Control.Monad.Trans.State.Lazy.StateT GameVars.Vars GHC.Types.IO)
                              b)
                   (r1 :: r) ->
                 let {
                   m2 :: Control.Monad.Trans.State.Lazy.StateT
                           GameVars.Vars GHC.Types.IO a
                   = m1
                       `cast`
                     (Control.Monad.Trans.Reader.N:ReaderT[0]
                          <*>_N
                          <r>_R
                          <Control.Monad.Trans.State.Lazy.StateT
                             GameVars.Vars GHC.Types.IO>_R
                          <a>_N)
                       r1
                 } in
                 (\ (s1 :: GameVars.Vars)
                    (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                  case (m2
                          `cast`
                        (Trans
                             (Nth:2
                                  (Trans
                                       (<Control.Monad.Trans.State.Lazy.StateT
                                           GameVars.Vars GHC.Types.IO a>_R
                                        ->_R <a
                                              -> Control.Monad.Trans.State.Lazy.StateT
                                                   GameVars.Vars GHC.Types.IO b>_R
                                        ->_R Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                 <GameVars.Vars>_N <GHC.Types.IO>_R <b>_N)
                                       (<Control.Monad.Trans.State.Lazy.StateT
                                           GameVars.Vars GHC.Types.IO a>_R
                                        ->_R <a
                                              -> Control.Monad.Trans.State.Lazy.StateT
                                                   GameVars.Vars GHC.Types.IO b>_R
                                        ->_R <GameVars.Vars>_R
                                        ->_R GHC.Types.N:IO[0] <(b, GameVars.Vars)>_R)))
                             (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                  <GameVars.Vars>_N <GHC.Types.IO>_R <a>_N))
                          s1)
                         `cast`
                       (GHC.Types.N:IO[0] <(a, GameVars.Vars)>_R)
                         s of ds1 { (#,#) ipv ipv1 ->
                  (((k (case ipv1 of wild { (,) a1 s' -> a1 }))
                      `cast`
                    (Control.Monad.Trans.Reader.N:ReaderT[0]
                         <*>_N
                         <r>_R
                         <Control.Monad.Trans.State.Lazy.StateT
                            GameVars.Vars GHC.Types.IO>_R
                         <b>_N)
                      r1)
                     `cast`
                   (Control.Monad.Trans.State.Lazy.N:StateT[0]
                        <GameVars.Vars>_N <GHC.Types.IO>_R <b>_N)
                     (case ipv1 of wild { (,) a1 s' -> s' }))
                    `cast`
                  (GHC.Types.N:IO[0] <(b, GameVars.Vars)>_R)
                    ipv })
                   `cast`
                 (Nth:3
                      (Nth:3
                           (Trans
                                (<Control.Monad.Trans.State.Lazy.StateT
                                    GameVars.Vars GHC.Types.IO a>_R
                                 ->_R <a
                                       -> Control.Monad.Trans.State.Lazy.StateT
                                            GameVars.Vars GHC.Types.IO b>_R
                                 ->_R <GameVars.Vars>_R
                                 ->_R Sym (GHC.Types.N:IO[0] <(b, GameVars.Vars)>_R))
                                (<Control.Monad.Trans.State.Lazy.StateT
                                    GameVars.Vars GHC.Types.IO a>_R
                                 ->_R <a
                                       -> Control.Monad.Trans.State.Lazy.StateT
                                            GameVars.Vars GHC.Types.IO b>_R
                                 ->_R Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                               <GameVars.Vars>_N <GHC.Types.IO>_R <b>_N))))))
                  `cast`
                (forall (r :: <*>_N) (a :: <*>_N) (b :: <*>_N).
                 <Control.Monad.Trans.Reader.ReaderT
                    r
                    (Control.Monad.Trans.State.Lazy.StateT GameVars.Vars GHC.Types.IO)
                    a>_R
                 ->_R <a
                       -> Control.Monad.Trans.Reader.ReaderT
                            r
                            (Control.Monad.Trans.State.Lazy.StateT GameVars.Vars GHC.Types.IO)
                            b>_R
                 ->_R Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                               <*>_N
                               <r>_R
                               <Control.Monad.Trans.State.Lazy.StateT
                                  GameVars.Vars GHC.Types.IO>_R
                               <b>_N)) -}
30394ffc9dd106c20439227f8c9a7aa6
  $fMonadMahppyBird_$s$fMonadReaderT_$cfail ::
    GHC.Base.String
    -> Control.Monad.Trans.Reader.ReaderT
         r
         (Control.Monad.Trans.State.Lazy.StateT GameVars.Vars GHC.Types.IO)
         a
  {- Arity: 3, Strictness: <L,U><L,A><L,A>, Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ r @ a (msg :: GHC.Base.String) ->
                 let {
                   m1 :: GameVars.Vars -> GHC.Types.IO (a, GameVars.Vars)
                     {- Arity: 1 -}
                   = \ (ds :: GameVars.Vars) ->
                     GHC.Magic.noinline
                       @ (forall a1. [GHC.Types.Char] -> GHC.Types.IO a1)
                       GHC.IO.failIO1
                         `cast`
                       (forall (a1 :: <*>_N).
                        <GHC.Base.String>_R ->_R Sym (GHC.Types.N:IO[0] <a1>_R))
                       @ (a, GameVars.Vars)
                       msg
                 } in
                 (\ (ds :: r) -> m1)
                   `cast`
                 (Trans
                      (<r>_R
                       ->_R Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                     <GameVars.Vars>_N <GHC.Types.IO>_R <a>_N))
                      (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                <*>_N
                                <r>_R
                                <Control.Monad.Trans.State.Lazy.StateT
                                   GameVars.Vars GHC.Types.IO>_R
                                <a>_N)))) -}
1989f26957dc34ff4b450af06c2d546d
  $fMonadReaderMahppyBird ::
    Control.Monad.Reader.Class.MonadReader
      GameVars.Config GameVars.MahppyBird
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ GameVars.Config
                  @ GameVars.MahppyBird
                  GameVars.$fMonadMahppyBird
                  GameVars.$fMonadReaderMahppyBird1
                    `cast`
                  (Trans
                       (<GameVars.Config>_R
                        ->_R <GameVars.Vars>_R
                        ->_R Sym (GHC.Types.N:IO[0] <(GameVars.Config, GameVars.Vars)>_R))
                       (Trans
                            (<GameVars.Config>_R
                             ->_R Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                           <GameVars.Vars>_N <GHC.Types.IO>_R <GameVars.Config>_N))
                            (Trans
                                 (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                           <*>_N
                                           <GameVars.Config>_R
                                           <Control.Monad.Trans.State.Lazy.StateT
                                              GameVars.Vars GHC.Types.IO>_R
                                           <GameVars.Config>_N))
                                 (Sym (GameVars.N:MahppyBird[0]) <GameVars.Config>_N))))
                  (Control.Monad.Trans.Reader.withReaderT
                     @ *
                     @ GameVars.Config
                     @ GameVars.Config
                     @ (Control.Monad.Trans.State.Lazy.StateT
                          GameVars.Vars GHC.Types.IO))
                    `cast`
                  (forall (a :: <*>_N).
                   <GameVars.Config -> GameVars.Config>_R
                   ->_R Sym (GameVars.N:MahppyBird[0]) <a>_N
                   ->_R Sym (GameVars.N:MahppyBird[0]) <a>_N)
                  (GameVars.$fMonadReaderMahppyBird_$sreader @ GameVars.Config)
                    `cast`
                  (forall (a :: <*>_N).
                   <GameVars.Config -> a>_R
                   ->_R Sym (GameVars.N:MahppyBird[0]) <a>_N) -}
e1c393ac3d9c58247a00ce10cfda0566
  $fMonadReaderMahppyBird1 ::
    GameVars.Config
    -> GameVars.Vars
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          (GameVars.Config, GameVars.Vars) #)
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U><L,U><S,U>,
     Unfolding: InlineRule (3, True, False)
                (\ (eta :: GameVars.Config)
                   (eta1 :: GameVars.Vars)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 (# s, (eta, eta1) #)) -}
7ad00caf996be486845a483ebf267392
  $fMonadReaderMahppyBird_$sreader ::
    (r -> a)
    -> Control.Monad.Trans.Reader.ReaderT
         r
         (Control.Monad.Trans.State.Lazy.StateT GameVars.Vars GHC.Types.IO)
         a
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*C1(U)><L,U>,
     Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ r @ a (f6 :: r -> a) (x :: r) ->
                 let {
                   eta :: a = f6 x
                 } in
                 (\ (eta1 :: GameVars.Vars)
                    (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                  (# s, (eta, eta1) #))
                   `cast`
                 (Nth:3
                      (Trans
                           (<a>_R
                            ->_R <GameVars.Vars>_R
                            ->_R Sym (GHC.Types.N:IO[0] <(a, GameVars.Vars)>_R))
                           (<a>_R
                            ->_R Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                          <GameVars.Vars>_N <GHC.Types.IO>_R <a>_N)))))
                  `cast`
                (forall (r :: <*>_N) (a :: <*>_N).
                 <r -> a>_R
                 ->_R Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                               <*>_N
                               <r>_R
                               <Control.Monad.Trans.State.Lazy.StateT
                                  GameVars.Vars GHC.Types.IO>_R
                               <a>_N)) -}
1989f26957dc34ff4b450af06c2d546d
  $fMonadStateMahppyBird ::
    Control.Monad.State.Class.MonadState
      GameVars.Vars GameVars.MahppyBird
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ GameVars.Vars
                  @ GameVars.MahppyBird
                  GameVars.$fMonadMahppyBird
                  GameVars.$fMonadStateMahppyBird3
                    `cast`
                  (Trans
                       (<GameVars.Config>_R
                        ->_R Trans
                                 (<GameVars.Vars>_R
                                  ->_R Sym (GHC.Types.N:IO[0] <(GameVars.Vars, GameVars.Vars)>_R))
                                 (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                           <GameVars.Vars>_N <GHC.Types.IO>_R <GameVars.Vars>_N)))
                       (Trans
                            (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                      <*>_N
                                      <GameVars.Config>_R
                                      <Control.Monad.Trans.State.Lazy.StateT
                                         GameVars.Vars GHC.Types.IO>_R
                                      <GameVars.Vars>_N))
                            (Sym (GameVars.N:MahppyBird[0]) <GameVars.Vars>_N)))
                  GameVars.$fMonadStateMahppyBird2
                    `cast`
                  (Trans
                       (<GameVars.Vars>_R
                        ->_R Trans
                                 (<GameVars.Config>_R
                                  ->_R Trans
                                           (<GameVars.Vars>_R
                                            ->_R Sym (GHC.Types.N:IO[0] <((), GameVars.Vars)>_R))
                                           (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                     <GameVars.Vars>_N <GHC.Types.IO>_R <()>_N)))
                                 (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                           <*>_N
                                           <GameVars.Config>_R
                                           <Control.Monad.Trans.State.Lazy.StateT
                                              GameVars.Vars GHC.Types.IO>_R
                                           <()>_N)))
                       (<GameVars.Vars>_R ->_R Sym (GameVars.N:MahppyBird[0]) <()>_N))
                  GameVars.$fMonadStateMahppyBird1
                    `cast`
                  (forall (a :: <*>_N).
                   Trans
                       (<GameVars.Vars -> (a, GameVars.Vars)>_R
                        ->_R Trans
                                 (<GameVars.Config>_R
                                  ->_R Trans
                                           (<GameVars.Vars>_R
                                            ->_R Sym (GHC.Types.N:IO[0] <(a, GameVars.Vars)>_R))
                                           (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                     <GameVars.Vars>_N <GHC.Types.IO>_R <a>_N)))
                                 (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                           <*>_N
                                           <GameVars.Config>_R
                                           <Control.Monad.Trans.State.Lazy.StateT
                                              GameVars.Vars GHC.Types.IO>_R
                                           <a>_N)))
                       (<GameVars.Vars -> (a, GameVars.Vars)>_R
                        ->_R Sym (GameVars.N:MahppyBird[0]) <a>_N)) -}
86cb8229c9d1aa9923146bfdeab2c020
  $fMonadStateMahppyBird1 ::
    (GameVars.Vars -> (a, GameVars.Vars))
    -> GameVars.Config
    -> GameVars.Vars
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, (a, GameVars.Vars) #)
  {- Arity: 4, HasNoCafRefs, Strictness: <L,1*C1(U)><L,A><L,U><S,U>,
     Unfolding: InlineRule (4, True, False)
                (\ @ a
                   (eta :: GameVars.Vars -> (a, GameVars.Vars))
                   (eta1 :: GameVars.Config)
                   (eta2 :: GameVars.Vars)
                   (eta3 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 (# eta3, eta eta2 #)) -}
002fad636775a804d29f753c100f0b27
  $fMonadStateMahppyBird2 ::
    GameVars.Vars
    -> GameVars.Config
    -> GameVars.Vars
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, ((), GameVars.Vars) #)
  {- Arity: 4, HasNoCafRefs, Strictness: <L,U><L,A><L,A><S,U>,
     Unfolding: InlineRule (4, True, False)
                (\ (eta :: GameVars.Vars)
                   (eta1 :: GameVars.Config)
                   (eta2 :: GameVars.Vars)
                   (eta3 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 (# eta3, (GHC.Tuple.(), eta) #)) -}
be00b5e8c11a9ea4ebb77f9e6b1bc16c
  $fMonadStateMahppyBird3 ::
    GameVars.Config
    -> GameVars.Vars
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          (GameVars.Vars, GameVars.Vars) #)
  {- Arity: 3, HasNoCafRefs, Strictness: <L,A><L,U><S,U>,
     Unfolding: InlineRule (3, True, False)
                (\ (eta :: GameVars.Config)
                   (x :: GameVars.Vars)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 (# s, (x, x) #)) -}
862115caec0cc090e3ab2e897cce53f2
  $fShowGameState :: GHC.Show.Show GameVars.GameState
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ GameVars.GameState
                  GameVars.$fShowGameState_$cshowsPrec
                  GameVars.$fShowGameState_$cshow
                  GameVars.$fShowGameState_$cshowList -}
862115caec0cc090e3ab2e897cce53f2
  $fShowGameState1 ::
    GameVars.GameState -> GHC.Base.String -> [GHC.Types.Char]
  {- Arity: 2, Strictness: <S,1*U><L,1*U>,
     Unfolding: (\ (x :: GameVars.GameState)
                   (s :: GHC.Base.String)[OneShot] ->
                 case x of wild {
                   GameVars.Menu
                   -> GHC.Base.++ @ GHC.Types.Char GameVars.$fShowGameState12 s
                   GameVars.PrePlay
                   -> GHC.Base.++ @ GHC.Types.Char GameVars.$fShowGameState10 s
                   GameVars.Play
                   -> GHC.Base.++ @ GHC.Types.Char GameVars.$fShowGameState8 s
                   GameVars.Pause
                   -> GHC.Base.++ @ GHC.Types.Char GameVars.$fShowGameState6 s
                   GameVars.GameOver ds
                   -> GHC.Base.++ @ GHC.Types.Char GameVars.$fShowGameState4 s
                   GameVars.Quit
                   -> GHC.Base.++ @ GHC.Types.Char GameVars.$fShowGameState2 s }) -}
9881aa38a4ca222a044186b97a555665
  $fShowGameState10 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   GameVars.$fShowGameState11) -}
3ea25afeeaba9ee925d7d733969be1a2
  $fShowGameState11 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("PrePlay"#) -}
635f0830ccc9d11ccc462a3dd03cbf2e
  $fShowGameState12 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   GameVars.$fShowGameState13) -}
f3f01fe2274d50c4d4a895273afe2be6
  $fShowGameState13 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Menu"#) -}
ac33bee2a1a2c076406bee1c5ce7b036
  $fShowGameState2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   GameVars.$fShowGameState3) -}
232f208a9e92471eb8fafd0bfbd739bc
  $fShowGameState3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Quit"#) -}
9016add453e6503e845a884739051ec2
  $fShowGameState4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   GameVars.$fShowGameState5) -}
726b109628fb4992924c11d07ed6517d
  $fShowGameState5 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("GameOver"#) -}
3e4b6bfa3215d78fc23a97db3b774059
  $fShowGameState6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   GameVars.$fShowGameState7) -}
e50673efcfb5a2d48e48dd0c111da85b
  $fShowGameState7 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Pause"#) -}
d32671e9c8922de7b8eea84f76bdfd11
  $fShowGameState8 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   GameVars.$fShowGameState9) -}
a6ccc4c76e7f1ca5074a8ab03aeb9b81
  $fShowGameState9 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Play"#) -}
862115caec0cc090e3ab2e897cce53f2
  $fShowGameState_$cshow :: GameVars.GameState -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: GameVars.GameState) ->
                 case ds of wild {
                   GameVars.Menu -> GameVars.$fShowGameState12
                   GameVars.PrePlay -> GameVars.$fShowGameState10
                   GameVars.Play -> GameVars.$fShowGameState8
                   GameVars.Pause -> GameVars.$fShowGameState6
                   GameVars.GameOver ds1 -> GameVars.$fShowGameState4
                   GameVars.Quit -> GameVars.$fShowGameState2 }) -}
862115caec0cc090e3ab2e897cce53f2
  $fShowGameState_$cshowList ::
    [GameVars.GameState] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [GameVars.GameState]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ GameVars.GameState
                   GameVars.$fShowGameState1
                   ls
                   s) -}
862115caec0cc090e3ab2e897cce53f2
  $fShowGameState_$cshowsPrec ::
    GHC.Types.Int -> GameVars.GameState -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: [0],
     Unfolding: InlineRule (3, True, True)
                (\ (w :: GHC.Types.Int)
                   (w1 :: GameVars.GameState)
                   (w2 :: GHC.Base.String) ->
                 GameVars.$fShowGameState1 w1 w2) -}
14baa3ae6b26e7d8a8967e8549c7576d
  $fShowInput :: GHC.Show.Show GameVars.Input
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ GameVars.Input
                  GameVars.$fShowInput_$cshowsPrec
                  GameVars.$fShowInput_$cshow
                  GameVars.$fShowInput_$cshowList -}
14baa3ae6b26e7d8a8967e8549c7576d
  $fShowInput1 :: GameVars.Input -> GHC.Show.ShowS
  {- Arity: 1, Strictness: <S(LLSSS),1*U(U,U,U,U,U)>,
     Unfolding: (\ (w :: GameVars.Input) ->
                 case w of ww { GameVars.Input ww1 ww2 ww3 ww4 ww5 ->
                 GameVars.$w$cshowsPrec 0# ww1 ww2 ww3 ww4 ww5 }) -}
2a79584d9ae70923ce15dd93d7eed0e4
  $fShowInput2 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
14baa3ae6b26e7d8a8967e8549c7576d
  $fShowInput_$cshow :: GameVars.Input -> GHC.Base.String
  {- Arity: 1, Strictness: <S(LLSSS),1*U(U,U,U,U,U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: GameVars.Input) ->
                 GameVars.$fShowInput_$cshowsPrec
                   GameVars.$fShowInput2
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
14baa3ae6b26e7d8a8967e8549c7576d
  $fShowInput_$cshowList :: [GameVars.Input] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ GameVars.Input
                   GameVars.$fShowInput1) -}
14baa3ae6b26e7d8a8967e8549c7576d
  $fShowInput_$cshowsPrec ::
    GHC.Types.Int -> GameVars.Input -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S(LLSSS),1*U(U,U,U,U,U)>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int) (w1 :: GameVars.Input) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { GameVars.Input ww3 ww4 ww5 ww6 ww7 ->
                 GameVars.$w$cshowsPrec ww1 ww3 ww4 ww5 ww6 ww7 } }) -}
25f3834dc4dee20a203f7a0126c24d7f
  $fShowPlayVars :: GHC.Show.Show GameVars.PlayVars
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ GameVars.PlayVars
                  GameVars.$fShowPlayVars_$cshowsPrec
                  GameVars.$fShowPlayVars_$cshow
                  GameVars.$fShowPlayVars_$cshowList -}
25f3834dc4dee20a203f7a0126c24d7f
  $fShowPlayVars1 ::
    GameVars.PlayVars -> GHC.Base.String -> [GHC.Types.Char]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><S,1*U>,
     Unfolding: InlineRule (2, True, True)
                (\ (x :: GameVars.PlayVars) (s :: GHC.Base.String)[OneShot] ->
                 s) -}
25f3834dc4dee20a203f7a0126c24d7f
  $fShowPlayVars_$cshow :: GameVars.PlayVars -> GHC.Base.String
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ (ds :: GameVars.PlayVars) -> GHC.Types.[] @ GHC.Types.Char) -}
25f3834dc4dee20a203f7a0126c24d7f
  $fShowPlayVars_$cshowList :: [GameVars.PlayVars] -> GHC.Show.ShowS
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [GameVars.PlayVars]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ GameVars.PlayVars
                   GameVars.$fShowPlayVars1
                   ls
                   s) -}
25f3834dc4dee20a203f7a0126c24d7f
  $fShowPlayVars_$cshowsPrec ::
    GHC.Types.Int -> GameVars.PlayVars -> GHC.Show.ShowS
  {- Arity: 3, HasNoCafRefs, Strictness: <L,A><L,A><S,1*U>,
     Unfolding: InlineRule (3, True, True)
                (\ (ds :: GHC.Types.Int)
                   (x :: GameVars.PlayVars)
                   (s :: GHC.Base.String) ->
                 s) -}
36914763174f19a2f02a4dc6ef3432f7
  $fShowPlayer :: GHC.Show.Show GameVars.Player
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ GameVars.Player
                  GameVars.$fShowPlayer_$cshowsPrec
                  GameVars.$fShowPlayer_$cshow
                  GameVars.$fShowPlayer_$cshowList -}
36914763174f19a2f02a4dc6ef3432f7
  $fShowPlayer1 :: GameVars.Player -> GHC.Show.ShowS
  {- Arity: 1, Strictness: <S(LLSSSSS),1*U(U,U,U,U,U,U,U)>,
     Unfolding: (\ (w :: GameVars.Player) ->
                 case w of ww { GameVars.Player ww1 ww2 ww3 ww4 ww5 ww6 ww7 ->
                 GameVars.$w$cshowsPrec1 0# ww1 ww2 ww3 ww4 ww5 ww6 ww7 }) -}
36914763174f19a2f02a4dc6ef3432f7
  $fShowPlayer_$cshow :: GameVars.Player -> GHC.Base.String
  {- Arity: 1, Strictness: <S(LLSSSSS),1*U(U,U,U,U,U,U,U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: GameVars.Player) ->
                 GameVars.$fShowPlayer_$cshowsPrec
                   GameVars.$fShowInput2
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
36914763174f19a2f02a4dc6ef3432f7
  $fShowPlayer_$cshowList :: [GameVars.Player] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ GameVars.Player
                   GameVars.$fShowPlayer1) -}
36914763174f19a2f02a4dc6ef3432f7
  $fShowPlayer_$cshowsPrec ::
    GHC.Types.Int -> GameVars.Player -> GHC.Show.ShowS
  {- Arity: 2,
     Strictness: <S(S),1*U(U)><S(LLSSSSS),1*U(U,U,U,U,U,U,U)>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int) (w1 :: GameVars.Player) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { GameVars.Player ww3 ww4 ww5 ww6 ww7 ww8 ww9 ->
                 GameVars.$w$cshowsPrec1 ww1 ww3 ww4 ww5 ww6 ww7 ww8 ww9 } }) -}
ac97681929c8648b7947e304c501ec6a
  $fShowRenderingVars :: GHC.Show.Show GameVars.RenderingVars
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ GameVars.RenderingVars
                  GameVars.$fShowRenderingVars_$cshowsPrec
                  GameVars.$fShowRenderingVars_$cshow
                  GameVars.$fShowRenderingVars_$cshowList -}
ac97681929c8648b7947e304c501ec6a
  $fShowRenderingVars1 :: GameVars.RenderingVars -> GHC.Show.ShowS
  {- Arity: 1,
     Strictness: <S(LSSSSS),1*U(1*U(U,1*U(U),1*U(U)),U,U,U,U,U)>,
     Unfolding: (\ (w :: GameVars.RenderingVars) ->
                 case w of ww { GameVars.RenderingVars ww1 ww2 ww3 ww4 ww5 ww6 ->
                 GameVars.$w$cshowsPrec2 0# ww1 ww2 ww3 ww4 ww5 ww6 }) -}
ac97681929c8648b7947e304c501ec6a
  $fShowRenderingVars_$cshow ::
    GameVars.RenderingVars -> GHC.Base.String
  {- Arity: 1,
     Strictness: <S(LSSSSS),1*U(1*U(U,1*U(U),1*U(U)),U,U,U,U,U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: GameVars.RenderingVars) ->
                 GameVars.$fShowRenderingVars_$cshowsPrec
                   GameVars.$fShowInput2
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
ac97681929c8648b7947e304c501ec6a
  $fShowRenderingVars_$cshowList ::
    [GameVars.RenderingVars] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ GameVars.RenderingVars
                   GameVars.$fShowRenderingVars1) -}
ac97681929c8648b7947e304c501ec6a
  $fShowRenderingVars_$cshowsPrec ::
    GHC.Types.Int -> GameVars.RenderingVars -> GHC.Show.ShowS
  {- Arity: 2,
     Strictness: <S(S),1*U(U)><S(LSSSSS),1*U(1*U(U,1*U(U),1*U(U)),U,U,U,U,U)>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int) (w1 :: GameVars.RenderingVars) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { GameVars.RenderingVars ww3 ww4 ww5 ww6 ww7 ww8 ->
                 GameVars.$w$cshowsPrec2 ww1 ww3 ww4 ww5 ww6 ww7 ww8 } }) -}
5829ea20be4fb9a24ab87f3fe067aa3c
  $fShowVars :: GHC.Show.Show GameVars.Vars
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ GameVars.Vars
                  GameVars.$fShowVars_$cshowsPrec
                  GameVars.$fShowVars_$cshow
                  GameVars.$fShowVars_$cshowList -}
5829ea20be4fb9a24ab87f3fe067aa3c
  $fShowVars1 :: GameVars.Vars -> GHC.Show.ShowS
  {- Arity: 1,
     Strictness: <S(LLLLSS),1*U(1*U(U,U),A,1*U(1*U(U,1*U(U),1*U(U)),U,U,U,U,U),1*U(U,U,U,U,U),U,U)>,
     Unfolding: (\ (w :: GameVars.Vars) ->
                 case w of ww { GameVars.Vars ww1 ww2 ww3 ww4 ww5 ww6 ->
                 GameVars.$w$cshowsPrec3 0# ww1 ww3 ww4 ww5 ww6 }) -}
5829ea20be4fb9a24ab87f3fe067aa3c
  $fShowVars_$cshow :: GameVars.Vars -> GHC.Base.String
  {- Arity: 1,
     Strictness: <S(LLLLSS),1*U(1*U(U,U),A,1*U(1*U(U,1*U(U),1*U(U)),U,U,U,U,U),1*U(U,U,U,U,U),U,U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: GameVars.Vars) ->
                 GameVars.$fShowVars_$cshowsPrec
                   GameVars.$fShowInput2
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
5829ea20be4fb9a24ab87f3fe067aa3c
  $fShowVars_$cshowList :: [GameVars.Vars] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ GameVars.Vars
                   GameVars.$fShowVars1) -}
5829ea20be4fb9a24ab87f3fe067aa3c
  $fShowVars_$cshowsPrec ::
    GHC.Types.Int -> GameVars.Vars -> GHC.Show.ShowS
  {- Arity: 2,
     Strictness: <S(S),1*U(U)><S(LLLLSS),1*U(1*U(U,U),A,1*U(1*U(U,1*U(U),1*U(U)),U,U,U,U,U),1*U(U,U,U,U,U),U,U)>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int) (w1 :: GameVars.Vars) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { GameVars.Vars ww3 ww4 ww5 ww6 ww7 ww8 ->
                 GameVars.$w$cshowsPrec3 ww1 ww3 ww5 ww6 ww7 ww8 } }) -}
86ce3168005fb7d3e0c0746e63911957
  $s$fShowPoint_$cshowsPrec_$s$fShowV2 ::
    GHC.Show.Show (Linear.V2.V2 Foreign.C.Types.CInt)
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Linear.V2.V2 Foreign.C.Types.CInt)
                  (Linear.V2.$fShowV2_$cshowsPrec
                     @ Foreign.C.Types.CInt
                     Foreign.C.Types.$fShowCInt)
                  (\ (eta :: Linear.V2.V2 Foreign.C.Types.CInt) ->
                   Linear.V2.$fShowV2_$cshowsPrec
                     @ Foreign.C.Types.CInt
                     Foreign.C.Types.$fShowCInt
                     Linear.V2.$fRead1V3
                     eta
                     (GHC.Types.[] @ GHC.Types.Char))
                  (\ (eta :: [Linear.V2.V2 Foreign.C.Types.CInt])
                     (eta1 :: GHC.Base.String) ->
                   GHC.Show.showList__
                     @ (Linear.V2.V2 Foreign.C.Types.CInt)
                     (Linear.V2.$fShowV2_$cshowsPrec
                        @ Foreign.C.Types.CInt
                        Foreign.C.Types.$fShowCInt
                        Linear.V2.$fRead1V3)
                     eta
                     eta1) -}
9e68fdf4297335aa3895290d6ff04c77
  $s$fShowV2_$cshowList ::
    [Linear.V2.V2 Foreign.C.Types.CInt] -> GHC.Show.ShowS
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (eta :: [Linear.V2.V2 Foreign.C.Types.CInt])
                   (eta1 :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Linear.V2.V2 Foreign.C.Types.CInt)
                   (Linear.V2.$fShowV2_$cshowsPrec
                      @ Foreign.C.Types.CInt
                      Foreign.C.Types.$fShowCInt
                      Linear.V2.$fRead1V3)
                   eta
                   eta1) -}
346fb4ca5a86bddbd952073c5c2a289e
  $tc'Animations :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10957325805690770409##
                   1830698341632270480##
                   GameVars.$trModule
                   GameVars.$tc'Animations2
                   0#
                   GameVars.$tc'Animations1) -}
3c42b3892de7b2d40305cc393a17f47b
  $tc'Animations1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
1163e6fa138261d97e252d172db7678c
  $tc'Animations2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS GameVars.$tc'Animations3) -}
068d9c7a11165b84b5dfa40b4119fea3
  $tc'Animations3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Animations"#) -}
2504eeec1ab95ebf3afeb4b764b07480
  $tc'Config :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17190169949031776133##
                   1975747227388840381##
                   GameVars.$trModule
                   GameVars.$tc'Config2
                   0#
                   GameVars.$tc'Config1) -}
8bf6a0a19139aaa3b8acffea080e12f3
  $tc'Config1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
238a2c9983fd06857d531ece3eb8cd81
  $tc'Config2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS GameVars.$tc'Config3) -}
a47b48e39210ff34d6f7b63631fdcc18
  $tc'Config3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Config"#) -}
c287f62e52f05f8a027e9310117e486d
  $tc'Fonts :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16980523218815937169##
                   18055919448739282302##
                   GameVars.$trModule
                   GameVars.$tc'Fonts2
                   0#
                   GameVars.$tc'Fonts1) -}
510e54eab01d490b5a857556633a0a45
  $tc'Fonts1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
62708b82e46ee331ef0c36f88bbfbf56
  $tc'Fonts2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS GameVars.$tc'Fonts3) -}
297cb81c8d735f2fa8bd8560ef3ab7ec
  $tc'Fonts3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Fonts"#) -}
4a766c43f3a3825ecfeeb29510fe0681
  $tc'GUITextures :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   374462385166525538##
                   45522859486167424##
                   GameVars.$trModule
                   GameVars.$tc'GUITextures2
                   0#
                   GameVars.$tc'GUITextures1) -}
686f497b7080cd07fb615791e39bb5d5
  $tc'GUITextures1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
db4f2469342179a5be5dc9fa496560b4
  $tc'GUITextures2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS GameVars.$tc'GUITextures3) -}
5f19fc8f6d4237f8cf30c7b228ab6395
  $tc'GUITextures3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'GUITextures"#) -}
a244a51546c587b566ed7712ec08b94f
  $tc'GameOver :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3372269141499510729##
                   16964305705027935687##
                   GameVars.$trModule
                   GameVars.$tc'GameOver2
                   0#
                   GameVars.$tc'GameOver1) -}
c805ced4cd320ea3b6dca078bbe40625
  $tc'GameOver1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
93949d45ef90328720a8fe1378811c7c
  $tc'GameOver2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS GameVars.$tc'GameOver3) -}
e6701ae87516d6278425b5fb3b2e86cc
  $tc'GameOver3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'GameOver"#) -}
f61e910865723ac741424a5e9cacfb9c
  $tc'Input :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8519489734118517837##
                   1759007243308322604##
                   GameVars.$trModule
                   GameVars.$tc'Input2
                   0#
                   GameVars.$tc'Input1) -}
43c9586669da7f58e92e0b357e11f3e4
  $tc'Input1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
261155df7ed367608d915fc7b4d20c48
  $tc'Input2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS GameVars.$tc'Input3) -}
344b4851740a640cee9a3566e82ee7d5
  $tc'Input3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Input"#) -}
6ddbfc5666ab2a294cfe10bb43b518aa
  $tc'MahppyBird :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9846007721079442952##
                   11456647066194287261##
                   GameVars.$trModule
                   GameVars.$tc'MahppyBird2
                   1#
                   GameVars.$tc'MahppyBird1) -}
350b642afd209a1c10aab9212810f42f
  $tc'MahppyBird1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
695aa9d5f9d932cdb341d0cd49c6a828
  $tc'MahppyBird2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS GameVars.$tc'MahppyBird3) -}
59cd645fa7966dae4ef4fe05cfe41c82
  $tc'MahppyBird3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'MahppyBird"#) -}
a5bc643789ee8dd4d5d48fddcbd9af05
  $tc'Menu :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12650553091785617772##
                   7948633999749039112##
                   GameVars.$trModule
                   GameVars.$tc'Menu2
                   0#
                   GameVars.$tc'Menu1) -}
5fa2b814a05168d97416371e7136832d
  $tc'Menu1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m1, Inline: [~] -}
e976daae46d7df5430967c8a43179b23
  $tc'Menu2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS GameVars.$tc'Menu3) -}
0ff4e83375761473d4086d2ce28c24bf
  $tc'Menu3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Menu"#) -}
2d37f1032af3893a1ea7631a6803ecd6
  $tc'Pause :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16628309677708517783##
                   16603929275994242843##
                   GameVars.$trModule
                   GameVars.$tc'Pause1
                   0#
                   GameVars.$tc'Menu1) -}
a96ff415a577bff358f571d1c2d99af8
  $tc'Pause1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS GameVars.$tc'Pause2) -}
5fbc59c6f5ce836648f7117f29d9ac26
  $tc'Pause2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Pause"#) -}
bfe049a25879cc7ee5e632f1582a1850
  $tc'Play :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11279135411394612870##
                   13246831009974504594##
                   GameVars.$trModule
                   GameVars.$tc'Play1
                   0#
                   GameVars.$tc'Menu1) -}
9ce23afda6d5771aebc204f150618d3f
  $tc'Play1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS GameVars.$tc'Play2) -}
04afdf80222183439a4b08ac991dec84
  $tc'Play2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Play"#) -}
0e3e5c55fca244de64069f626872d51b
  $tc'PlayVars :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3878687305810445966##
                   11201178225068849422##
                   GameVars.$trModule
                   GameVars.$tc'PlayVars2
                   0#
                   GameVars.$tc'PlayVars1) -}
40fb0495c374e97c7e678701e79d918c
  $tc'PlayVars1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
011291d2d53c4ceddbccee0a22b40959
  $tc'PlayVars2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS GameVars.$tc'PlayVars3) -}
e6bddf5970567a5f13a4edff86e73c4b
  $tc'PlayVars3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'PlayVars"#) -}
dd94e500164718ffb9cd09b69297de20
  $tc'Player :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   64005963511741143##
                   2085588808361930576##
                   GameVars.$trModule
                   GameVars.$tc'Player2
                   0#
                   GameVars.$tc'Player1) -}
7ed00aefa00d605f2f4eca0d6ecd8d02
  $tc'Player1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
33236e010165b45f971afc2da6f398cb
  $tc'Player2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS GameVars.$tc'Player3) -}
0832c2a02aab1fb9f4fb61e826b67c29
  $tc'Player3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Player"#) -}
80f8881a592f651997a278e87acc369d
  $tc'PrePlay :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13525850316777423658##
                   15735974634431055427##
                   GameVars.$trModule
                   GameVars.$tc'PrePlay1
                   0#
                   GameVars.$tc'Menu1) -}
7ae68cf641542b4a622be1c45de34824
  $tc'PrePlay1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS GameVars.$tc'PrePlay2) -}
715fb3c1a88bbb39f4a9900801f5cd53
  $tc'PrePlay2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'PrePlay"#) -}
e9c6c2a83ea61addda04ef1a6ef24078
  $tc'Quit :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14535318131641046882##
                   1249553965038664936##
                   GameVars.$trModule
                   GameVars.$tc'Quit1
                   0#
                   GameVars.$tc'Menu1) -}
f78397b5235ccefe3390460d91138095
  $tc'Quit1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS GameVars.$tc'Quit2) -}
00d3961c34a5e8e4241492a8642f0125
  $tc'Quit2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Quit"#) -}
456a3d6ae3c532780d841f6b4f91ec4b
  $tc'RenderingVars :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   616053970718579653##
                   14972980999167816776##
                   GameVars.$trModule
                   GameVars.$tc'RenderingVars2
                   0#
                   GameVars.$tc'RenderingVars1) -}
aebcc466b69fc66da1036d3d5c1899a3
  $tc'RenderingVars1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
29903fd2130fa17ad3b88d123d46e534
  $tc'RenderingVars2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS GameVars.$tc'RenderingVars3) -}
0f0c300ecb01ba4ddd51039ad7cbdcaa
  $tc'RenderingVars3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'RenderingVars"#) -}
0f92c987f672f1acc220c4db209a2e55
  $tc'Resources :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6444689102293927604##
                   9803948566585130025##
                   GameVars.$trModule
                   GameVars.$tc'Resources2
                   0#
                   GameVars.$tc'Resources1) -}
0c1a85ab6b93c0f2fc0703db45d063d5
  $tc'Resources1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
b4fcf37b906c0d789c98dd615382835d
  $tc'Resources2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS GameVars.$tc'Resources3) -}
6aa3b6e4df00ceaa7a335a8c8704ba78
  $tc'Resources3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Resources"#) -}
aeba4b6ed2dfb63bf5af69d78720e34b
  $tc'Sound :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6376205301395676775##
                   15890069218635834366##
                   GameVars.$trModule
                   GameVars.$tc'Sound2
                   0#
                   GameVars.$tc'Sound1) -}
f6580cebf484d5b9dcc51fadb76a50c3
  $tc'Sound1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
79f95410872f41d7bb2d2528103bc292
  $tc'Sound2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS GameVars.$tc'Sound3) -}
10252c9c7bf7fc35da428525be5e7fa1
  $tc'Sound3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Sound"#) -}
f1600b5524efc9b92b7d07e6488c7557
  $tc'Textures :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6821156970411818931##
                   12570525038983641867##
                   GameVars.$trModule
                   GameVars.$tc'Textures2
                   0#
                   GameVars.$tc'Textures1) -}
9c30dd2d43ff08fd42b0175c954d1acd
  $tc'Textures1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
150765e56f8929ed54ac510c469d8a4c
  $tc'Textures2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS GameVars.$tc'Textures3) -}
a1b82aff4ecd93e742a341951f36bdb2
  $tc'Textures3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Textures"#) -}
12e75b238a89384b795a33e8e1fa99d3
  $tc'Vars :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8711438696982400521##
                   4916235887029082930##
                   GameVars.$trModule
                   GameVars.$tc'Vars2
                   0#
                   GameVars.$tc'Vars1) -}
9479517c6616c254dfd33a149f4edb99
  $tc'Vars1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
a5d5a37a8a16d07dd5f9576694930ea3
  $tc'Vars2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS GameVars.$tc'Vars3) -}
2bc6b4e64f6f9c7d121a8382f6073684
  $tc'Vars3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Vars"#) -}
3409b0dbf44a40c34748b831f84b4fc0
  $tcAnimations :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2765889510897218088##
                   10142064434290510406##
                   GameVars.$trModule
                   GameVars.$tcAnimations1
                   0#
                   GHC.Types.krep$*) -}
29e8f83444c43f7969cb4b5fb544a7e3
  $tcAnimations1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS GameVars.$tcAnimations2) -}
85075caa298dab57673b88ccdeef8ae4
  $tcAnimations2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Animations"#) -}
5624a2cd4b50431c5c792bb5b46b64a9
  $tcConfig :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12523191445040495019##
                   12059903998357998006##
                   GameVars.$trModule
                   GameVars.$tcConfig1
                   0#
                   GHC.Types.krep$*) -}
89966e44944e663df4c859806e409ad2
  $tcConfig1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS GameVars.$tcConfig2) -}
fd0a170031b5dca44099f2bff242939a
  $tcConfig2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Config"#) -}
e368932d5c0c11906e4aba52603aeb2a
  $tcFonts :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12546398078604065144##
                   3916609726321005175##
                   GameVars.$trModule
                   GameVars.$tcFonts1
                   0#
                   GHC.Types.krep$*) -}
660efe6551333b7970a66e1762de9dfc
  $tcFonts1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS GameVars.$tcFonts2) -}
5a94764f4feacb9a654865c0667e45e9
  $tcFonts2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Fonts"#) -}
3c55ffc4bbf856f51649bd927fa3e88e
  $tcGUITextures :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15339079884064987673##
                   11520437911710581676##
                   GameVars.$trModule
                   GameVars.$tcGUITextures1
                   0#
                   GHC.Types.krep$*) -}
8728f96ba335c7a7794aaf68688f2069
  $tcGUITextures1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS GameVars.$tcGUITextures2) -}
9b5855866fa0cb5a2656b02f35d9e788
  $tcGUITextures2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("GUITextures"#) -}
8f42a9f2d34f2cd0ad9d8f45f39d7d3b
  $tcGameState :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11648211480669439348##
                   11928506701760604264##
                   GameVars.$trModule
                   GameVars.$tcGameState1
                   0#
                   GHC.Types.krep$*) -}
c0b73b878ba8a51edb10f291a4a6b1e4
  $tcGameState1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS GameVars.$tcGameState2) -}
46dff441603a4986813ca6935ea52e17
  $tcGameState2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("GameState"#) -}
dc7cc16505228556aebbcee6cee1ff64
  $tcInput :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8646522661166258228##
                   12006944802153845652##
                   GameVars.$trModule
                   GameVars.$tcInput1
                   0#
                   GHC.Types.krep$*) -}
8efa75ac7b2ac90abe5bf82fdaa4ee78
  $tcInput1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS GameVars.$tcInput2) -}
7f9fff1ce7c1398244151ddcadbb8972
  $tcInput2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Input"#) -}
5c8ee8d1618a998a2f1fac930d95bef7
  $tcMahppyBird :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11928686848118594482##
                   3114604255269021732##
                   GameVars.$trModule
                   GameVars.$tcMahppyBird1
                   0#
                   GHC.Types.krep$*Arr*) -}
3331df5aa66f9f99d2d82201cc2bae8b
  $tcMahppyBird1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS GameVars.$tcMahppyBird2) -}
1ffb005add2d1880856116c14b737270
  $tcMahppyBird2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("MahppyBird"#) -}
83e6c3597abb60a3721b4758b2d6c185
  $tcPlayVars :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2407141282473368730##
                   6946696637542197684##
                   GameVars.$trModule
                   GameVars.$tcPlayVars1
                   0#
                   GHC.Types.krep$*) -}
3ef1a39d2c49a268ea802630cb772575
  $tcPlayVars1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS GameVars.$tcPlayVars2) -}
c0356ba9de0ff99b470ccceb7e452d98
  $tcPlayVars2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("PlayVars"#) -}
6b43bac3a98673d059454be18eeeb740
  $tcPlayer :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6397983708120126746##
                   10275522501199974478##
                   GameVars.$trModule
                   GameVars.$tcPlayer1
                   0#
                   GHC.Types.krep$*) -}
0cd5d8eb8a9a5dc4360790d72378d75e
  $tcPlayer1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS GameVars.$tcPlayer2) -}
e4857c24bd746f197a2d755880042706
  $tcPlayer2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Player"#) -}
a1c189942da5737b8a43d6042834fe05
  $tcRenderingVars :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9669475960175967855##
                   16013661450151426220##
                   GameVars.$trModule
                   GameVars.$tcRenderingVars1
                   0#
                   GHC.Types.krep$*) -}
0e9163ff28ac8483b3b8fd0ddba17743
  $tcRenderingVars1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS GameVars.$tcRenderingVars2) -}
ab48e1f72bd4497a9c73fd19d66117fc
  $tcRenderingVars2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("RenderingVars"#) -}
ac1c5c69eb550721c7e6f0d1526894cd
  $tcResources :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8133446097185968180##
                   2383050847839928964##
                   GameVars.$trModule
                   GameVars.$tcResources1
                   0#
                   GHC.Types.krep$*) -}
778e4b495323c2b6d9379857df932bbc
  $tcResources1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS GameVars.$tcResources2) -}
93e4666ba234dddf250fd301112b39b5
  $tcResources2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Resources"#) -}
a6030ac6f751a2bcd96f216b4774777c
  $tcSound :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4897901750144446586##
                   11964621176494173297##
                   GameVars.$trModule
                   GameVars.$tcSound1
                   0#
                   GHC.Types.krep$*) -}
484a0b609d276128f9a32b896f62de38
  $tcSound1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS GameVars.$tcSound2) -}
709e94478bf3197751f92181e1b200e0
  $tcSound2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Sound"#) -}
110918aa312dc1824253b5b31963dcaf
  $tcTextures :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11512012466494444653##
                   1544673684527246065##
                   GameVars.$trModule
                   GameVars.$tcTextures1
                   0#
                   GHC.Types.krep$*) -}
8341e94ac72080c298911f547d05b013
  $tcTextures1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS GameVars.$tcTextures2) -}
890c811e28f01497fd5c33f0a82babb0
  $tcTextures2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Textures"#) -}
e7fbd44c4a1220798d7d66f9cf323be3
  $tcVars :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17094764640874493565##
                   11542430059980268952##
                   GameVars.$trModule
                   GameVars.$tcVars1
                   0#
                   GHC.Types.krep$*) -}
998271ab9b78c9db084c40899afb4cc3
  $tcVars1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS GameVars.$tcVars2) -}
45ed2e59fc676eaf8655be85585716a7
  $tcVars2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Vars"#) -}
0fce756d292521df23fb45c5f897ff02
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   GameVars.$trModule3
                   GameVars.$trModule1) -}
a034fc64aa2a6a2740b9e4f216cb0591
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS GameVars.$trModule2) -}
ea11201f3687de510ae00b6cd558a028
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("GameVars"#) -}
a24a7826ccf3dc64a0e5dc5c359d2813
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS GameVars.$trModule4) -}
d19d381ffbff7b66cb7c9a9fb4c8c000
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("main"#) -}
b18977100e37c440261e4c16ba9ecb14
  $w$cshowsPrec ::
    GHC.Prim.Int#
    -> GHC.Types.Bool
    -> GHC.Types.Bool
    -> Foreign.C.Types.CInt
    -> Foreign.C.Types.CInt
    -> GHC.Types.Bool
    -> GHC.Show.ShowS
  {- Arity: 6, Strictness: <S,U><L,U><L,U><L,U><L,U><L,U>,
     Inline: [0] -}
c50fcc3ca3cdb545439f55988ff2d3af
  $w$cshowsPrec1 ::
    GHC.Prim.Int#
    -> Linear.Affine.Point Linear.V2.V2 GHC.Types.Float
    -> Linear.V2.V2 GHC.Types.Float
    -> GHC.Prim.Float#
    -> GHC.Prim.Float#
    -> GHC.Prim.Float#
    -> GHC.Types.Bool
    -> GHC.Prim.Double#
    -> GHC.Show.ShowS
  {- Arity: 8, Strictness: <S,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U>,
     Inline: [0] -}
1e99697c74cad1289b0f004b36ae5b8c
  $w$cshowsPrec2 ::
    GHC.Prim.Int#
    -> Animations.AnimationHandler
    -> Foreign.C.Types.CInt
    -> Foreign.C.Types.CInt
    -> GHC.Types.Float
    -> GHC.Types.Float
    -> GHC.Prim.Word#
    -> GHC.Show.ShowS
  {- Arity: 7,
     Strictness: <S,U><L,1*U(U,1*U(U),1*U(U))><L,U><L,U><L,U><L,U><S,U>,
     Inline: [0] -}
336c1ec2c363fd661b82c4ed869ae70f
  $w$cshowsPrec3 ::
    GHC.Prim.Int#
    -> GameVars.GameStack
    -> GameVars.RenderingVars
    -> GameVars.Input
    -> GHC.Prim.Float#
    -> GHC.Prim.Int#
    -> GHC.Show.ShowS
  {- Arity: 6,
     Strictness: <S,U><L,1*U(U,U)><L,1*U(1*U(U,1*U(U),1*U(U)),U,U,U,U,U)><L,1*U(U,U,U,U,U)><L,U><L,U>,
     Inline: [0] -}
2b1e70dc5d2cf0fae1f292c9db001c5f
  data Animations
    = Animations {_playerIdleAnimation :: [Animations.AnimationSrcRect],
                  _playerJumpAnimation :: [Animations.AnimationSrcRect],
                  _playerDeathAnimation :: [Animations.AnimationSrcRect]}
7d37304089f01776096e2dc8d6f690c8
  data Config
    = Config {cWindow :: SDL.Internal.Types.Window,
              cRenderer :: SDL.Internal.Types.Renderer,
              _cResources :: GameVars.Resources}
5a464f5c7bff2eae896998b908658507
  data Fonts
    = Fonts {_scoreFont :: SDL.Font.Font,
             _highScoreFont :: SDL.Font.Font}
9f608cb593c2f72eeb1c5704b65f511b
  data GUITextures
    = GUITextures {_playBtnTexture :: SDL.Video.Renderer.Texture,
                   _quitBtnTexture :: SDL.Video.Renderer.Texture,
                   _playAgainBtnTexture :: SDL.Video.Renderer.Texture,
                   _quitGameOverBtnTexture :: SDL.Video.Renderer.Texture,
                   _gameOverWindowTexture :: SDL.Video.Renderer.Texture,
                   _pressSpacetoJumpTexture :: SDL.Video.Renderer.Texture,
                   _titleScreenbg :: SDL.Video.Renderer.Texture,
                   _mutedTexture :: SDL.Video.Renderer.Texture,
                   _muteTexture :: SDL.Video.Renderer.Texture}
3662a17f39626bc31dea84fa169e8adb
  type GameStack = Data.Stack.Stack GameVars.GameState
862115caec0cc090e3ab2e897cce53f2
  data GameState
    = Menu | PrePlay | Play | Pause | GameOver GHC.Types.Bool | Quit
14baa3ae6b26e7d8a8967e8549c7576d
  data Input
    = Input {_isSpace :: GHC.Types.Bool,
             _isEsc :: GHC.Types.Bool,
             _mousePos :: {-# UNPACK #-}Linear.V2.V2 Foreign.C.Types.CInt,
             _mousePress :: !GHC.Types.Bool}
1989f26957dc34ff4b450af06c2d546d
  type role MahppyBird nominal
  newtype MahppyBird a
    = MahppyBird (Control.Monad.Trans.Reader.ReaderT
                    GameVars.Config
                    (Control.Monad.Trans.State.Lazy.StateT GameVars.Vars GHC.Types.IO)
                    a)
25f3834dc4dee20a203f7a0126c24d7f
  data PlayVars
    = PlayVars {_player :: {-# UNPACK #-}GameVars.Player,
                _wallStream :: Data.Stream.Stream Walls.Wall,
                _cGrav :: {-# UNPACK #-}GHC.Types.Float,
                _cWallConf :: {-# UNPACK #-}Walls.WallConfig,
                _score :: {-# UNPACK #-}GHC.Types.Int}
36914763174f19a2f02a4dc6ef3432f7
  data Player
    = Player {_attributes :: {-# UNPACK #-}SDL.Video.Renderer.Rectangle
                                             GHC.Types.Float,
              _yvel :: {-# UNPACK #-}GHC.Types.Float,
              _xvel :: {-# UNPACK #-}GHC.Types.Float,
              _cJumpHeight :: {-# UNPACK #-}GHC.Types.Float,
              _isPassingWall :: !GHC.Types.Bool,
              _angle :: ! {-# UNPACK #-}(Foreign.C.Types.N:CDouble[0])Foreign.C.Types.CDouble}
ac97681929c8648b7947e304c501ec6a
  data RenderingVars
    = RenderingVars {_playerAnimationHandler :: Animations.AnimationHandler,
                     _cameraPos :: ! {-# UNPACK #-}(Linear.Affine.N:Point[0]
                                                        <Linear.V2.V2>_R <Foreign.C.Types.CInt>_N)Linear.Affine.Point
                                                                                                    Linear.V2.V2
                                                                                                    Foreign.C.Types.CInt,
                     _camOffset :: {-# UNPACK #-}Linear.V2.V2 GHC.Types.Float,
                     _transitionOpacity :: {-# UNPACK #-}GHC.Word.Word8}
403f3d6581905f68ba656abc39ec924d
  data Resources
    = Resources {_cFont :: GameVars.Fonts,
                 _cTextures :: GameVars.Textures,
                 _cAnimations :: GameVars.Animations,
                 _cSound :: GameVars.Sound}
5f201986779c9c0ba6901d357d52f9fe
  data Sound
    = Sound {_bgMusicChannel :: SDL.Mixer.Channel,
             _jumpFx :: SDL.Mixer.Chunk,
             _crashFx :: SDL.Mixer.Chunk}
5e14338e57873739908d32ba506eaa9e
  data Textures
    = Textures {_bgTexture :: SDL.Video.Renderer.Texture,
                _playerSpriteSheet :: SDL.Video.Renderer.Texture,
                _botWallTexture :: SDL.Video.Renderer.Texture,
                _topWallTexture :: SDL.Video.Renderer.Texture,
                _guiTextures :: GameVars.GUITextures}
5829ea20be4fb9a24ab87f3fe067aa3c
  data Vars
    = Vars {_vGameStateStack :: GameVars.GameStack,
            _vPlayVars :: GameVars.PlayVars,
            _vRenderingVars :: GameVars.RenderingVars,
            _kInput :: GameVars.Input,
            _dt :: {-# UNPACK #-}GHC.Types.Float,
            _highScore :: {-# UNPACK #-}GHC.Types.Int}
36914763174f19a2f02a4dc6ef3432f7
  _angle :: GameVars.Player -> Foreign.C.Types.CDouble
  RecSel Left GameVars.Player
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLS),1*U(A,A,A,A,A,A,U)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: GameVars.Player) ->
                 case ds of wild { GameVars.Player dt1 dt2 dt3 dt4 dt5 ds1 dt6 ->
                 (GHC.Types.D# dt6)
                   `cast`
                 (Sym (Foreign.C.Types.N:CDouble[0])) }) -}
36914763174f19a2f02a4dc6ef3432f7
  _attributes ::
    GameVars.Player -> SDL.Video.Renderer.Rectangle GHC.Types.Float
  RecSel Left GameVars.Player
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U,U,A,A,A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: GameVars.Player) ->
                 case ds of wild { GameVars.Player dt1 dt2 dt3 dt4 dt5 ds1 dt6 ->
                 SDL.Video.Renderer.Rectangle @ GHC.Types.Float dt1 dt2 }) -}
5f201986779c9c0ba6901d357d52f9fe
  _bgMusicChannel :: GameVars.Sound -> SDL.Mixer.Channel
  RecSel Left GameVars.Sound
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SLL),1*U(1*U(U),A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: GameVars.Sound) ->
                 case ds of wild { GameVars.Sound ds1 ds2 ds3 -> ds1 }) -}
5e14338e57873739908d32ba506eaa9e
  _bgTexture :: GameVars.Textures -> SDL.Video.Renderer.Texture
  RecSel Left GameVars.Textures
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(SLLLL),1*U(1*U(U),A,A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: GameVars.Textures) ->
                 case ds of wild { GameVars.Textures ds1 ds2 ds3 ds4 ds5 ->
                 ds1 }) -}
5e14338e57873739908d32ba506eaa9e
  _botWallTexture :: GameVars.Textures -> SDL.Video.Renderer.Texture
  RecSel Left GameVars.Textures
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLSLL),1*U(A,A,1*U(U),A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: GameVars.Textures) ->
                 case ds of wild { GameVars.Textures ds1 ds2 ds3 ds4 ds5 ->
                 ds3 }) -}
403f3d6581905f68ba656abc39ec924d
  _cAnimations :: GameVars.Resources -> GameVars.Animations
  RecSel Left GameVars.Resources
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLSL),1*U(A,A,1*U(U,U,U),A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: GameVars.Resources) ->
                 case ds of wild { GameVars.Resources ds1 ds2 ds3 ds4 -> ds3 }) -}
403f3d6581905f68ba656abc39ec924d
  _cFont :: GameVars.Resources -> GameVars.Fonts
  RecSel Left GameVars.Resources
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(SLLL),1*U(1*U(U,U),A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: GameVars.Resources) ->
                 case ds of wild { GameVars.Resources ds1 ds2 ds3 ds4 -> ds1 }) -}
25f3834dc4dee20a203f7a0126c24d7f
  _cGrav :: GameVars.PlayVars -> GHC.Types.Float
  RecSel Left GameVars.PlayVars
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLLSLLLLLLLLL),1*U(A,A,A,A,A,A,A,A,U,A,A,A,A,A,A,A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: GameVars.PlayVars) ->
                 case ds of wild { GameVars.PlayVars dt1 dt2 dt3 dt4 dt5 dt6 dt7 ds1 dt8 dt9 dt10 dt11 dt12 dt13 dt14 dt15 dt16 dt17 ->
                 GHC.Types.F# dt8 }) -}
36914763174f19a2f02a4dc6ef3432f7
  _cJumpHeight :: GameVars.Player -> GHC.Types.Float
  RecSel Left GameVars.Player
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLSLL),1*U(A,A,A,A,U,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: GameVars.Player) ->
                 case ds of wild { GameVars.Player dt1 dt2 dt3 dt4 dt5 ds1 dt6 ->
                 GHC.Types.F# dt5 }) -}
7d37304089f01776096e2dc8d6f690c8
  _cResources :: GameVars.Config -> GameVars.Resources
  RecSel Left GameVars.Config
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLS),1*U(A,A,1*U(U,U,U,U))>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: GameVars.Config) ->
                 case ds of wild { GameVars.Config ds1 ds2 ds3 -> ds3 }) -}
403f3d6581905f68ba656abc39ec924d
  _cSound :: GameVars.Resources -> GameVars.Sound
  RecSel Left GameVars.Resources
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLS),1*U(A,A,A,1*U(U,U,U))>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: GameVars.Resources) ->
                 case ds of wild { GameVars.Resources ds1 ds2 ds3 ds4 -> ds4 }) -}
403f3d6581905f68ba656abc39ec924d
  _cTextures :: GameVars.Resources -> GameVars.Textures
  RecSel Left GameVars.Resources
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LSLL),1*U(A,1*U(U,U,U,U,U),A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: GameVars.Resources) ->
                 case ds of wild { GameVars.Resources ds1 ds2 ds3 ds4 -> ds2 }) -}
25f3834dc4dee20a203f7a0126c24d7f
  _cWallConf :: GameVars.PlayVars -> Walls.WallConfig
  RecSel Left GameVars.PlayVars
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLLLLLSSSSSSL),1*U(A,A,A,A,A,A,A,A,A,U,U,U,U,U,U,U,U,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: GameVars.PlayVars) ->
                 case ds of wild { GameVars.PlayVars dt1 dt2 dt3 dt4 dt5 dt6 dt7 ds1 dt8 dt9 dt10 dt11 dt12 dt13 dt14 dt15 dt16 dt17 ->
                 Walls.WallConfig dt9 dt10 dt11 dt12 dt13 dt14 dt15 dt16 }) -}
ac97681929c8648b7947e304c501ec6a
  _camOffset ::
    GameVars.RenderingVars -> Linear.V2.V2 GHC.Types.Float
  RecSel Left GameVars.RenderingVars
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLSSL),1*U(A,A,A,U,U,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: GameVars.RenderingVars) ->
                 case ds of wild { GameVars.RenderingVars ds1 dt1 dt2 dt3 dt4 dt5 ->
                 Linear.V2.V2 @ GHC.Types.Float dt3 dt4 }) -}
ac97681929c8648b7947e304c501ec6a
  _cameraPos ::
    GameVars.RenderingVars
    -> Linear.Affine.Point Linear.V2.V2 Foreign.C.Types.CInt
  RecSel Left GameVars.RenderingVars
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LSSLLL),1*U(A,U,U,A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: GameVars.RenderingVars) ->
                 case ds of wild { GameVars.RenderingVars ds1 dt1 dt2 dt3 dt4 dt5 ->
                 (Linear.V2.V2 @ Foreign.C.Types.CInt dt1 dt2)
                   `cast`
                 (Sym (Linear.Affine.N:Point[0]
                           <Linear.V2.V2>_R) <Foreign.C.Types.CInt>_N) }) -}
5f201986779c9c0ba6901d357d52f9fe
  _crashFx :: GameVars.Sound -> SDL.Mixer.Chunk
  RecSel Left GameVars.Sound
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLS),1*U(A,A,1*U(U))>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: GameVars.Sound) ->
                 case ds of wild { GameVars.Sound ds1 ds2 ds3 -> ds3 }) -}
5829ea20be4fb9a24ab87f3fe067aa3c
  _dt :: GameVars.Vars -> GHC.Types.Float
  RecSel Left GameVars.Vars
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLSL),1*U(A,A,A,A,U,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: GameVars.Vars) ->
                 case ds of wild { GameVars.Vars ds1 ds2 ds3 ds4 dt1 dt2 ->
                 GHC.Types.F# dt1 }) -}
9f608cb593c2f72eeb1c5704b65f511b
  _gameOverWindowTexture ::
    GameVars.GUITextures -> SDL.Video.Renderer.Texture
  RecSel Left GameVars.GUITextures
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLSLLLL),1*U(A,A,A,A,1*U(U),A,A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: GameVars.GUITextures) ->
                 case ds of wild { GameVars.GUITextures ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ->
                 ds5 }) -}
5e14338e57873739908d32ba506eaa9e
  _guiTextures :: GameVars.Textures -> GameVars.GUITextures
  RecSel Left GameVars.Textures
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLS),1*U(A,A,A,A,1*U(U,U,U,U,U,U,U,U,U))>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: GameVars.Textures) ->
                 case ds of wild { GameVars.Textures ds1 ds2 ds3 ds4 ds5 ->
                 ds5 }) -}
5829ea20be4fb9a24ab87f3fe067aa3c
  _highScore :: GameVars.Vars -> GHC.Types.Int
  RecSel Left GameVars.Vars
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLS),1*U(A,A,A,A,A,U)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: GameVars.Vars) ->
                 case ds of wild { GameVars.Vars ds1 ds2 ds3 ds4 dt1 dt2 ->
                 GHC.Types.I# dt2 }) -}
5a464f5c7bff2eae896998b908658507
  _highScoreFont :: GameVars.Fonts -> SDL.Font.Font
  RecSel Left GameVars.Fonts
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LS),1*U(A,1*U(U))>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: GameVars.Fonts) ->
                 case ds of wild { GameVars.Fonts ds1 ds2 -> ds2 }) -}
14baa3ae6b26e7d8a8967e8549c7576d
  _isEsc :: GameVars.Input -> GHC.Types.Bool
  RecSel Left GameVars.Input
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LSLLL),1*U(A,1*U,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: GameVars.Input) ->
                 case ds of wild { GameVars.Input ds1 ds2 dt1 dt2 ds3 -> ds2 }) -}
36914763174f19a2f02a4dc6ef3432f7
  _isPassingWall :: GameVars.Player -> GHC.Types.Bool
  RecSel Left GameVars.Player
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLSL),1*U(A,A,A,A,A,U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: GameVars.Player) ->
                 case ds of wild { GameVars.Player dt1 dt2 dt3 dt4 dt5 ds1 dt6 ->
                 ds1 }) -}
14baa3ae6b26e7d8a8967e8549c7576d
  _isSpace :: GameVars.Input -> GHC.Types.Bool
  RecSel Left GameVars.Input
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SLLLL),1*U(1*U,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: GameVars.Input) ->
                 case ds of wild { GameVars.Input ds1 ds2 dt1 dt2 ds3 -> ds1 }) -}
5f201986779c9c0ba6901d357d52f9fe
  _jumpFx :: GameVars.Sound -> SDL.Mixer.Chunk
  RecSel Left GameVars.Sound
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LSL),1*U(A,1*U(U),A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: GameVars.Sound) ->
                 case ds of wild { GameVars.Sound ds1 ds2 ds3 -> ds2 }) -}
5829ea20be4fb9a24ab87f3fe067aa3c
  _kInput :: GameVars.Vars -> GameVars.Input
  RecSel Left GameVars.Vars
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLSLL),1*U(A,A,A,1*U(U,U,U,U,U),A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: GameVars.Vars) ->
                 case ds of wild { GameVars.Vars ds1 ds2 ds3 ds4 dt1 dt2 ->
                 ds4 }) -}
14baa3ae6b26e7d8a8967e8549c7576d
  _mousePos :: GameVars.Input -> Linear.V2.V2 Foreign.C.Types.CInt
  RecSel Left GameVars.Input
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLSSL),1*U(A,A,U,U,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: GameVars.Input) ->
                 case ds of wild { GameVars.Input ds1 ds2 dt1 dt2 ds3 ->
                 Linear.V2.V2 @ Foreign.C.Types.CInt dt1 dt2 }) -}
14baa3ae6b26e7d8a8967e8549c7576d
  _mousePress :: GameVars.Input -> GHC.Types.Bool
  RecSel Left GameVars.Input
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLLLS),1*U(A,A,A,A,U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: GameVars.Input) ->
                 case ds of wild { GameVars.Input ds1 ds2 dt1 dt2 ds3 -> ds3 }) -}
9f608cb593c2f72eeb1c5704b65f511b
  _muteTexture :: GameVars.GUITextures -> SDL.Video.Renderer.Texture
  RecSel Left GameVars.GUITextures
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLLS),1*U(A,A,A,A,A,A,A,A,1*U(U))>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: GameVars.GUITextures) ->
                 case ds of wild { GameVars.GUITextures ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ->
                 ds9 }) -}
9f608cb593c2f72eeb1c5704b65f511b
  _mutedTexture :: GameVars.GUITextures -> SDL.Video.Renderer.Texture
  RecSel Left GameVars.GUITextures
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLSL),1*U(A,A,A,A,A,A,A,1*U(U),A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: GameVars.GUITextures) ->
                 case ds of wild { GameVars.GUITextures ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ->
                 ds8 }) -}
9f608cb593c2f72eeb1c5704b65f511b
  _playAgainBtnTexture ::
    GameVars.GUITextures -> SDL.Video.Renderer.Texture
  RecSel Left GameVars.GUITextures
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLSLLLLLL),1*U(A,A,1*U(U),A,A,A,A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: GameVars.GUITextures) ->
                 case ds of wild { GameVars.GUITextures ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ->
                 ds3 }) -}
9f608cb593c2f72eeb1c5704b65f511b
  _playBtnTexture ::
    GameVars.GUITextures -> SDL.Video.Renderer.Texture
  RecSel Left GameVars.GUITextures
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(SLLLLLLLL),1*U(1*U(U),A,A,A,A,A,A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: GameVars.GUITextures) ->
                 case ds of wild { GameVars.GUITextures ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ->
                 ds1 }) -}
25f3834dc4dee20a203f7a0126c24d7f
  _player :: GameVars.PlayVars -> GameVars.Player
  RecSel Left GameVars.PlayVars
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLSSSSSLLLLLLLLLLL),1*U(U,U,U,U,U,U,U,A,A,A,A,A,A,A,A,A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: GameVars.PlayVars) ->
                 case ds of wild { GameVars.PlayVars dt1 dt2 dt3 dt4 dt5 dt6 dt7 ds1 dt8 dt9 dt10 dt11 dt12 dt13 dt14 dt15 dt16 dt17 ->
                 GameVars.Player dt1 dt2 dt3 dt4 dt5 dt6 dt7 }) -}
ac97681929c8648b7947e304c501ec6a
  _playerAnimationHandler ::
    GameVars.RenderingVars -> Animations.AnimationHandler
  RecSel Left GameVars.RenderingVars
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(SLLLLL),1*U(1*U(U,U,U),A,A,A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: GameVars.RenderingVars) ->
                 case ds of wild { GameVars.RenderingVars ds1 dt1 dt2 dt3 dt4 dt5 ->
                 ds1 }) -}
2b1e70dc5d2cf0fae1f292c9db001c5f
  _playerDeathAnimation ::
    GameVars.Animations -> [Animations.AnimationSrcRect]
  RecSel Left GameVars.Animations
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLS),1*U(A,A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: GameVars.Animations) ->
                 case ds of wild { GameVars.Animations ds1 ds2 ds3 -> ds3 }) -}
2b1e70dc5d2cf0fae1f292c9db001c5f
  _playerIdleAnimation ::
    GameVars.Animations -> [Animations.AnimationSrcRect]
  RecSel Left GameVars.Animations
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SLL),1*U(1*U,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: GameVars.Animations) ->
                 case ds of wild { GameVars.Animations ds1 ds2 ds3 -> ds1 }) -}
2b1e70dc5d2cf0fae1f292c9db001c5f
  _playerJumpAnimation ::
    GameVars.Animations -> [Animations.AnimationSrcRect]
  RecSel Left GameVars.Animations
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LSL),1*U(A,1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: GameVars.Animations) ->
                 case ds of wild { GameVars.Animations ds1 ds2 ds3 -> ds2 }) -}
5e14338e57873739908d32ba506eaa9e
  _playerSpriteSheet ::
    GameVars.Textures -> SDL.Video.Renderer.Texture
  RecSel Left GameVars.Textures
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LSLLL),1*U(A,1*U(U),A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: GameVars.Textures) ->
                 case ds of wild { GameVars.Textures ds1 ds2 ds3 ds4 ds5 ->
                 ds2 }) -}
9f608cb593c2f72eeb1c5704b65f511b
  _pressSpacetoJumpTexture ::
    GameVars.GUITextures -> SDL.Video.Renderer.Texture
  RecSel Left GameVars.GUITextures
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLSLLL),1*U(A,A,A,A,A,1*U(U),A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: GameVars.GUITextures) ->
                 case ds of wild { GameVars.GUITextures ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ->
                 ds6 }) -}
9f608cb593c2f72eeb1c5704b65f511b
  _quitBtnTexture ::
    GameVars.GUITextures -> SDL.Video.Renderer.Texture
  RecSel Left GameVars.GUITextures
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LSLLLLLLL),1*U(A,1*U(U),A,A,A,A,A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: GameVars.GUITextures) ->
                 case ds of wild { GameVars.GUITextures ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ->
                 ds2 }) -}
9f608cb593c2f72eeb1c5704b65f511b
  _quitGameOverBtnTexture ::
    GameVars.GUITextures -> SDL.Video.Renderer.Texture
  RecSel Left GameVars.GUITextures
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLSLLLLL),1*U(A,A,A,1*U(U),A,A,A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: GameVars.GUITextures) ->
                 case ds of wild { GameVars.GUITextures ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ->
                 ds4 }) -}
25f3834dc4dee20a203f7a0126c24d7f
  _score :: GameVars.PlayVars -> GHC.Types.Int
  RecSel Left GameVars.PlayVars
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLLLLLLLLLLLS),1*U(A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,U)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: GameVars.PlayVars) ->
                 case ds of wild { GameVars.PlayVars dt1 dt2 dt3 dt4 dt5 dt6 dt7 ds1 dt8 dt9 dt10 dt11 dt12 dt13 dt14 dt15 dt16 dt17 ->
                 GHC.Types.I# dt17 }) -}
5a464f5c7bff2eae896998b908658507
  _scoreFont :: GameVars.Fonts -> SDL.Font.Font
  RecSel Left GameVars.Fonts
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SL),1*U(1*U(U),A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: GameVars.Fonts) ->
                 case ds of wild { GameVars.Fonts ds1 ds2 -> ds1 }) -}
9f608cb593c2f72eeb1c5704b65f511b
  _titleScreenbg ::
    GameVars.GUITextures -> SDL.Video.Renderer.Texture
  RecSel Left GameVars.GUITextures
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLSLL),1*U(A,A,A,A,A,A,1*U(U),A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: GameVars.GUITextures) ->
                 case ds of wild { GameVars.GUITextures ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ->
                 ds7 }) -}
5e14338e57873739908d32ba506eaa9e
  _topWallTexture :: GameVars.Textures -> SDL.Video.Renderer.Texture
  RecSel Left GameVars.Textures
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLSL),1*U(A,A,A,1*U(U),A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: GameVars.Textures) ->
                 case ds of wild { GameVars.Textures ds1 ds2 ds3 ds4 ds5 ->
                 ds4 }) -}
ac97681929c8648b7947e304c501ec6a
  _transitionOpacity :: GameVars.RenderingVars -> GHC.Word.Word8
  RecSel Left GameVars.RenderingVars
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLS),1*U(A,A,A,A,A,U)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: GameVars.RenderingVars) ->
                 case ds of wild { GameVars.RenderingVars ds1 dt1 dt2 dt3 dt4 dt5 ->
                 GHC.Word.W8# dt5 }) -}
5829ea20be4fb9a24ab87f3fe067aa3c
  _vGameStateStack :: GameVars.Vars -> GameVars.GameStack
  RecSel Left GameVars.Vars
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(SLLLLL),1*U(1*U(U,U),A,A,A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: GameVars.Vars) ->
                 case ds of wild { GameVars.Vars ds1 ds2 ds3 ds4 dt1 dt2 ->
                 ds1 }) -}
5829ea20be4fb9a24ab87f3fe067aa3c
  _vPlayVars :: GameVars.Vars -> GameVars.PlayVars
  RecSel Left GameVars.Vars
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LSLLLL),1*U(A,1*U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U),A,A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: GameVars.Vars) ->
                 case ds of wild { GameVars.Vars ds1 ds2 ds3 ds4 dt1 dt2 ->
                 ds2 }) -}
5829ea20be4fb9a24ab87f3fe067aa3c
  _vRenderingVars :: GameVars.Vars -> GameVars.RenderingVars
  RecSel Left GameVars.Vars
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLSLLL),1*U(A,A,1*U(U,U,U,U,U,U),A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: GameVars.Vars) ->
                 case ds of wild { GameVars.Vars ds1 ds2 ds3 ds4 dt1 dt2 ->
                 ds3 }) -}
25f3834dc4dee20a203f7a0126c24d7f
  _wallStream :: GameVars.PlayVars -> Data.Stream.Stream Walls.Wall
  RecSel Left GameVars.PlayVars
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLSLLLLLLLLLL),1*U(A,A,A,A,A,A,A,1*U(U,U),A,A,A,A,A,A,A,A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: GameVars.PlayVars) ->
                 case ds of wild { GameVars.PlayVars dt1 dt2 dt3 dt4 dt5 dt6 dt7 ds1 dt8 dt9 dt10 dt11 dt12 dt13 dt14 dt15 dt16 dt17 ->
                 ds1 }) -}
36914763174f19a2f02a4dc6ef3432f7
  _xvel :: GameVars.Player -> GHC.Types.Float
  RecSel Left GameVars.Player
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLSLLL),1*U(A,A,A,U,A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: GameVars.Player) ->
                 case ds of wild { GameVars.Player dt1 dt2 dt3 dt4 dt5 ds1 dt6 ->
                 GHC.Types.F# dt4 }) -}
36914763174f19a2f02a4dc6ef3432f7
  _yvel :: GameVars.Player -> GHC.Types.Float
  RecSel Left GameVars.Player
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLSLLLL),1*U(A,A,U,A,A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: GameVars.Player) ->
                 case ds of wild { GameVars.Player dt1 dt2 dt3 dt4 dt5 ds1 dt6 ->
                 GHC.Types.F# dt3 }) -}
9ec677c0a905ffa9de6525b5a85accc9
  angle ::
    Control.Lens.Type.Lens' GameVars.Player Foreign.C.Types.CDouble
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*C1(U)><S(LLLLLSL),1*U(U,U,U,U,U,U,U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ f6 :: * -> *
                   ($dFunctor :: GHC.Base.Functor f6)
                   (f7 :: Foreign.C.Types.CDouble -> f6 Foreign.C.Types.CDouble)
                   (ds :: GameVars.Player) ->
                 case ds of wild { GameVars.Player dt1 dt2 dt3 dt4 dt5 x5 dt6 ->
                 let {
                   x1 :: SDL.Video.Renderer.Rectangle GHC.Types.Float
                   = SDL.Video.Renderer.Rectangle @ GHC.Types.Float dt1 dt2
                 } in
                 let {
                   x2 :: GHC.Types.Float = GHC.Types.F# dt3
                 } in
                 let {
                   x3 :: GHC.Types.Float = GHC.Types.F# dt4
                 } in
                 let {
                   x4 :: GHC.Types.Float = GHC.Types.F# dt5
                 } in
                 GHC.Base.fmap
                   @ f6
                   $dFunctor
                   @ Foreign.C.Types.CDouble
                   @ GameVars.Player
                   (\ (y1 :: Foreign.C.Types.CDouble) ->
                    GameVars.$WPlayer x1 x2 x3 x4 x5 y1)
                   (f7
                      (GHC.Types.D# dt6)
                        `cast`
                      (Sym (Foreign.C.Types.N:CDouble[0]))) }) -}
f6bc13c9b59ea991ef88afd5bf65ef48
  attributes ::
    Control.Lens.Type.Lens'
      GameVars.Player (SDL.Video.Renderer.Rectangle GHC.Types.Float)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*C1(U)><S(LLLLLSL),1*U(U,U,U,U,U,U,U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ f6 :: * -> *
                   ($dFunctor :: GHC.Base.Functor f6)
                   (f7 :: SDL.Video.Renderer.Rectangle GHC.Types.Float
                          -> f6 (SDL.Video.Renderer.Rectangle GHC.Types.Float))
                   (ds :: GameVars.Player) ->
                 case ds of wild { GameVars.Player dt1 dt2 dt3 dt4 dt5 x5 dt6 ->
                 let {
                   x2 :: GHC.Types.Float = GHC.Types.F# dt3
                 } in
                 let {
                   x3 :: GHC.Types.Float = GHC.Types.F# dt4
                 } in
                 let {
                   x4 :: GHC.Types.Float = GHC.Types.F# dt5
                 } in
                 let {
                   x6 :: GHC.Types.Double = GHC.Types.D# dt6
                 } in
                 GHC.Base.fmap
                   @ f6
                   $dFunctor
                   @ (SDL.Video.Renderer.Rectangle GHC.Types.Float)
                   @ GameVars.Player
                   (\ (y1 :: SDL.Video.Renderer.Rectangle GHC.Types.Float) ->
                    GameVars.$WPlayer
                      y1
                      x2
                      x3
                      x4
                      x5
                      x6 `cast` (Sym (Foreign.C.Types.N:CDouble[0])))
                   (f7 (SDL.Video.Renderer.Rectangle @ GHC.Types.Float dt1 dt2)) }) -}
163a373fbfaf72ceaaf6dfa5a0ae9b6b
  bgMusicChannel ::
    Control.Lens.Type.Lens' GameVars.Sound SDL.Mixer.Channel
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*C1(U)><S,1*U(U,U,U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ f6 :: * -> *
                   ($dFunctor :: GHC.Base.Functor f6)
                   (f7 :: SDL.Mixer.Channel -> f6 SDL.Mixer.Channel)
                   (ds :: GameVars.Sound) ->
                 case ds of wild { GameVars.Sound x1 x2 x3 ->
                 GHC.Base.fmap
                   @ f6
                   $dFunctor
                   @ SDL.Mixer.Channel
                   @ GameVars.Sound
                   (\ (y1 :: SDL.Mixer.Channel) -> GameVars.Sound y1 x2 x3)
                   (f7 x1) }) -}
517d338878c76752fb31d67b44d0262f
  bgTexture ::
    Control.Lens.Type.Lens'
      GameVars.Textures SDL.Video.Renderer.Texture
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*C1(U)><S,1*U(U,U,U,U,U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ f6 :: * -> *
                   ($dFunctor :: GHC.Base.Functor f6)
                   (f7 :: SDL.Video.Renderer.Texture -> f6 SDL.Video.Renderer.Texture)
                   (ds :: GameVars.Textures) ->
                 case ds of wild { GameVars.Textures x1 x2 x3 x4 x5 ->
                 GHC.Base.fmap
                   @ f6
                   $dFunctor
                   @ SDL.Video.Renderer.Texture
                   @ GameVars.Textures
                   (\ (y1 :: SDL.Video.Renderer.Texture) ->
                    GameVars.Textures y1 x2 x3 x4 x5)
                   (f7 x1) }) -}
cea8d9a3d93445c71831f77c0691f890
  botWallTexture ::
    Control.Lens.Type.Lens'
      GameVars.Textures SDL.Video.Renderer.Texture
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*C1(U)><S,1*U(U,U,U,U,U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ f6 :: * -> *
                   ($dFunctor :: GHC.Base.Functor f6)
                   (f7 :: SDL.Video.Renderer.Texture -> f6 SDL.Video.Renderer.Texture)
                   (ds :: GameVars.Textures) ->
                 case ds of wild { GameVars.Textures x1 x2 x3 x4 x5 ->
                 GHC.Base.fmap
                   @ f6
                   $dFunctor
                   @ SDL.Video.Renderer.Texture
                   @ GameVars.Textures
                   (\ (y1 :: SDL.Video.Renderer.Texture) ->
                    GameVars.Textures x1 x2 y1 x4 x5)
                   (f7 x3) }) -}
274f811ff19250bf36e042224fec3125
  cAnimations ::
    Control.Lens.Type.Lens' GameVars.Resources GameVars.Animations
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*C1(U)><S,1*U(U,U,U,U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ f6 :: * -> *
                   ($dFunctor :: GHC.Base.Functor f6)
                   (f7 :: GameVars.Animations -> f6 GameVars.Animations)
                   (ds :: GameVars.Resources) ->
                 case ds of wild { GameVars.Resources x1 x2 x3 x4 ->
                 GHC.Base.fmap
                   @ f6
                   $dFunctor
                   @ GameVars.Animations
                   @ GameVars.Resources
                   (\ (y1 :: GameVars.Animations) -> GameVars.Resources x1 x2 y1 x4)
                   (f7 x3) }) -}
6eea812d52df63380a21b9e14308d8f0
  cFont :: Control.Lens.Type.Lens' GameVars.Resources GameVars.Fonts
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*C1(U)><S,1*U(U,U,U,U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ f6 :: * -> *
                   ($dFunctor :: GHC.Base.Functor f6)
                   (f7 :: GameVars.Fonts -> f6 GameVars.Fonts)
                   (ds :: GameVars.Resources) ->
                 case ds of wild { GameVars.Resources x1 x2 x3 x4 ->
                 GHC.Base.fmap
                   @ f6
                   $dFunctor
                   @ GameVars.Fonts
                   @ GameVars.Resources
                   (\ (y1 :: GameVars.Fonts) -> GameVars.Resources y1 x2 x3 x4)
                   (f7 x1) }) -}
2a8c373e7c82c3c47207141ae2901a0f
  cGrav :: Control.Lens.Type.Lens' GameVars.PlayVars GHC.Types.Float
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*C1(U)><S(LLLLLSLLLLLLLLLLLL),1*U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ f6 :: * -> *
                   ($dFunctor :: GHC.Base.Functor f6)
                   (f7 :: GHC.Types.Float -> f6 GHC.Types.Float)
                   (ds :: GameVars.PlayVars) ->
                 case ds of wild { GameVars.PlayVars dt1 dt2 dt3 dt4 dt5 dt6 dt7 x2 dt8 dt9 dt10 dt11 dt12 dt13 dt14 dt15 dt16 dt17 ->
                 let {
                   x1 :: GameVars.Player = GameVars.Player dt1 dt2 dt3 dt4 dt5 dt6 dt7
                 } in
                 let {
                   x4 :: Walls.WallConfig
                   = Walls.WallConfig dt9 dt10 dt11 dt12 dt13 dt14 dt15 dt16
                 } in
                 let {
                   x5 :: GHC.Types.Int = GHC.Types.I# dt17
                 } in
                 GHC.Base.fmap
                   @ f6
                   $dFunctor
                   @ GHC.Types.Float
                   @ GameVars.PlayVars
                   (\ (y1 :: GHC.Types.Float) -> GameVars.$WPlayVars x1 x2 y1 x4 x5)
                   (f7 (GHC.Types.F# dt8)) }) -}
27518191718fb7ec43d2ae78e0e00e4d
  cJumpHeight ::
    Control.Lens.Type.Lens' GameVars.Player GHC.Types.Float
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*C1(U)><S(LLLLLSL),1*U(U,U,U,U,U,U,U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ f6 :: * -> *
                   ($dFunctor :: GHC.Base.Functor f6)
                   (f7 :: GHC.Types.Float -> f6 GHC.Types.Float)
                   (ds :: GameVars.Player) ->
                 case ds of wild { GameVars.Player dt1 dt2 dt3 dt4 dt5 x5 dt6 ->
                 let {
                   x1 :: SDL.Video.Renderer.Rectangle GHC.Types.Float
                   = SDL.Video.Renderer.Rectangle @ GHC.Types.Float dt1 dt2
                 } in
                 let {
                   x2 :: GHC.Types.Float = GHC.Types.F# dt3
                 } in
                 let {
                   x3 :: GHC.Types.Float = GHC.Types.F# dt4
                 } in
                 let {
                   x6 :: GHC.Types.Double = GHC.Types.D# dt6
                 } in
                 GHC.Base.fmap
                   @ f6
                   $dFunctor
                   @ GHC.Types.Float
                   @ GameVars.Player
                   (\ (y1 :: GHC.Types.Float) ->
                    GameVars.$WPlayer
                      x1
                      x2
                      x3
                      y1
                      x5
                      x6 `cast` (Sym (Foreign.C.Types.N:CDouble[0])))
                   (f7 (GHC.Types.F# dt5)) }) -}
7d37304089f01776096e2dc8d6f690c8
  cRenderer :: GameVars.Config -> SDL.Internal.Types.Renderer
  RecSel Left GameVars.Config
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LSL),1*U(A,1*U(U),A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: GameVars.Config) ->
                 case ds of wild { GameVars.Config ds1 ds2 ds3 -> ds2 }) -}
b04d36993ee1ee6e042ac28bc0eb61e1
  cResources ::
    Control.Lens.Type.Lens' GameVars.Config GameVars.Resources
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*C1(U)><S,1*U(U,U,U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ f6 :: * -> *
                   ($dFunctor :: GHC.Base.Functor f6)
                   (f7 :: GameVars.Resources -> f6 GameVars.Resources)
                   (ds :: GameVars.Config) ->
                 case ds of wild { GameVars.Config x1 x2 x3 ->
                 GHC.Base.fmap
                   @ f6
                   $dFunctor
                   @ GameVars.Resources
                   @ GameVars.Config
                   (\ (y1 :: GameVars.Resources) -> GameVars.Config x1 x2 y1)
                   (f7 x3) }) -}
59a33c64917b259aef8c17e374b9e5e9
  cSound :: Control.Lens.Type.Lens' GameVars.Resources GameVars.Sound
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*C1(U)><S,1*U(U,U,U,U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ f6 :: * -> *
                   ($dFunctor :: GHC.Base.Functor f6)
                   (f7 :: GameVars.Sound -> f6 GameVars.Sound)
                   (ds :: GameVars.Resources) ->
                 case ds of wild { GameVars.Resources x1 x2 x3 x4 ->
                 GHC.Base.fmap
                   @ f6
                   $dFunctor
                   @ GameVars.Sound
                   @ GameVars.Resources
                   (\ (y1 :: GameVars.Sound) -> GameVars.Resources x1 x2 x3 y1)
                   (f7 x4) }) -}
d5266101a8a1109787f149679f99a311
  cTextures ::
    Control.Lens.Type.Lens' GameVars.Resources GameVars.Textures
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*C1(U)><S,1*U(U,U,U,U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ f6 :: * -> *
                   ($dFunctor :: GHC.Base.Functor f6)
                   (f7 :: GameVars.Textures -> f6 GameVars.Textures)
                   (ds :: GameVars.Resources) ->
                 case ds of wild { GameVars.Resources x1 x2 x3 x4 ->
                 GHC.Base.fmap
                   @ f6
                   $dFunctor
                   @ GameVars.Textures
                   @ GameVars.Resources
                   (\ (y1 :: GameVars.Textures) -> GameVars.Resources x1 y1 x3 x4)
                   (f7 x2) }) -}
8f47264007ce9ac541ce061fc2a087ff
  cWallConf ::
    Control.Lens.Type.Lens' GameVars.PlayVars Walls.WallConfig
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*C1(U)><S(LLLLLSLLLLLLLLLLLL),1*U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ f6 :: * -> *
                   ($dFunctor :: GHC.Base.Functor f6)
                   (f7 :: Walls.WallConfig -> f6 Walls.WallConfig)
                   (ds :: GameVars.PlayVars) ->
                 case ds of wild { GameVars.PlayVars dt1 dt2 dt3 dt4 dt5 dt6 dt7 x2 dt8 dt9 dt10 dt11 dt12 dt13 dt14 dt15 dt16 dt17 ->
                 let {
                   x1 :: GameVars.Player = GameVars.Player dt1 dt2 dt3 dt4 dt5 dt6 dt7
                 } in
                 let {
                   x3 :: GHC.Types.Float = GHC.Types.F# dt8
                 } in
                 let {
                   x5 :: GHC.Types.Int = GHC.Types.I# dt17
                 } in
                 GHC.Base.fmap
                   @ f6
                   $dFunctor
                   @ Walls.WallConfig
                   @ GameVars.PlayVars
                   (\ (y1 :: Walls.WallConfig) -> GameVars.$WPlayVars x1 x2 x3 y1 x5)
                   (f7
                      (Walls.WallConfig dt9 dt10 dt11 dt12 dt13 dt14 dt15 dt16)) }) -}
7d37304089f01776096e2dc8d6f690c8
  cWindow :: GameVars.Config -> SDL.Internal.Types.Window
  RecSel Left GameVars.Config
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SLL),1*U(1*U(U),A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: GameVars.Config) ->
                 case ds of wild { GameVars.Config ds1 ds2 ds3 -> ds1 }) -}
ed0bf55fc46a21b0b5f77c5461c4614c
  camOffset ::
    Control.Lens.Type.Lens'
      GameVars.RenderingVars (Linear.V2.V2 GHC.Types.Float)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*C1(U)><S(LSSSSL),1*U(U,U,U,U,U,U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ f6 :: * -> *
                   ($dFunctor :: GHC.Base.Functor f6)
                   (f7 :: Linear.V2.V2 GHC.Types.Float
                          -> f6 (Linear.V2.V2 GHC.Types.Float))
                   (ds :: GameVars.RenderingVars) ->
                 case ds of wild { GameVars.RenderingVars x1 dt1 dt2 dt3 dt4 dt5 ->
                 let {
                   x2 :: Linear.V2.V2 Foreign.C.Types.CInt
                   = Linear.V2.V2 @ Foreign.C.Types.CInt dt1 dt2
                 } in
                 let {
                   x4 :: GHC.Word.Word8 = GHC.Word.W8# dt5
                 } in
                 GHC.Base.fmap
                   @ f6
                   $dFunctor
                   @ (Linear.V2.V2 GHC.Types.Float)
                   @ GameVars.RenderingVars
                   (\ (y1 :: Linear.V2.V2 GHC.Types.Float) ->
                    GameVars.$WRenderingVars
                      x1
                      x2
                        `cast`
                      (Sym (Linear.Affine.N:Point[0]
                                <Linear.V2.V2>_R) <Foreign.C.Types.CInt>_N)
                      y1
                      x4)
                   (f7 (Linear.V2.V2 @ GHC.Types.Float dt3 dt4)) }) -}
fcc3502fbff7c1d4610130d0e0afa18d
  cameraPos ::
    Control.Lens.Type.Lens'
      GameVars.RenderingVars
      (Linear.Affine.Point Linear.V2.V2 Foreign.C.Types.CInt)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*C1(U)><S(LSSSSL),1*U(U,U,U,U,U,U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ f6 :: * -> *
                   ($dFunctor :: GHC.Base.Functor f6)
                   (f7 :: Linear.Affine.Point Linear.V2.V2 Foreign.C.Types.CInt
                          -> f6 (Linear.Affine.Point Linear.V2.V2 Foreign.C.Types.CInt))
                   (ds :: GameVars.RenderingVars) ->
                 case ds of wild { GameVars.RenderingVars x1 dt1 dt2 dt3 dt4 dt5 ->
                 let {
                   x3 :: Linear.V2.V2 GHC.Types.Float
                   = Linear.V2.V2 @ GHC.Types.Float dt3 dt4
                 } in
                 let {
                   x4 :: GHC.Word.Word8 = GHC.Word.W8# dt5
                 } in
                 GHC.Base.fmap
                   @ f6
                   $dFunctor
                   @ (Linear.Affine.Point Linear.V2.V2 Foreign.C.Types.CInt)
                   @ GameVars.RenderingVars
                   (\ (y1 :: Linear.Affine.Point Linear.V2.V2 Foreign.C.Types.CInt) ->
                    GameVars.$WRenderingVars x1 y1 x3 x4)
                   (f7
                      (Linear.V2.V2 @ Foreign.C.Types.CInt dt1 dt2)
                        `cast`
                      (Sym (Linear.Affine.N:Point[0]
                                <Linear.V2.V2>_R) <Foreign.C.Types.CInt>_N)) }) -}
5d006afaa53962228d4cdb502ec43682
  crashFx :: Control.Lens.Type.Lens' GameVars.Sound SDL.Mixer.Chunk
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*C1(U)><S,1*U(U,U,U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ f6 :: * -> *
                   ($dFunctor :: GHC.Base.Functor f6)
                   (f7 :: SDL.Mixer.Chunk -> f6 SDL.Mixer.Chunk)
                   (ds :: GameVars.Sound) ->
                 case ds of wild { GameVars.Sound x1 x2 x3 ->
                 GHC.Base.fmap
                   @ f6
                   $dFunctor
                   @ SDL.Mixer.Chunk
                   @ GameVars.Sound
                   (\ (y1 :: SDL.Mixer.Chunk) -> GameVars.Sound x1 x2 y1)
                   (f7 x3) }) -}
1e9e5f1193610a43c195fa5133f876db
  dt :: Control.Lens.Type.Lens' GameVars.Vars GHC.Types.Float
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*C1(U)><S,1*U(U,U,U,U,U,U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ f6 :: * -> *
                   ($dFunctor :: GHC.Base.Functor f6)
                   (f7 :: GHC.Types.Float -> f6 GHC.Types.Float)
                   (ds :: GameVars.Vars) ->
                 case ds of wild { GameVars.Vars x1 x2 x3 x4 dt1 dt2 ->
                 let {
                   x6 :: GHC.Types.Int = GHC.Types.I# dt2
                 } in
                 GHC.Base.fmap
                   @ f6
                   $dFunctor
                   @ GHC.Types.Float
                   @ GameVars.Vars
                   (\ (y1 :: GHC.Types.Float) -> GameVars.$WVars x1 x2 x3 x4 y1 x6)
                   (f7 (GHC.Types.F# dt1)) }) -}
ab8c65a3721cb9d35ab6a011f9d8f88b
  gameOverWindowTexture ::
    Control.Lens.Type.Lens'
      GameVars.GUITextures SDL.Video.Renderer.Texture
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*C1(U)><S,1*U(U,U,U,U,U,U,U,U,U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ f6 :: * -> *
                   ($dFunctor :: GHC.Base.Functor f6)
                   (f7 :: SDL.Video.Renderer.Texture -> f6 SDL.Video.Renderer.Texture)
                   (ds :: GameVars.GUITextures) ->
                 case ds of wild { GameVars.GUITextures x1 x2 x3 x4 x5 x6 x7 x8 x9 ->
                 GHC.Base.fmap
                   @ f6
                   $dFunctor
                   @ SDL.Video.Renderer.Texture
                   @ GameVars.GUITextures
                   (\ (y1 :: SDL.Video.Renderer.Texture) ->
                    GameVars.GUITextures x1 x2 x3 x4 y1 x6 x7 x8 x9)
                   (f7 x5) }) -}
eac494f378a0b289c29f925f7ff7594f
  guiTextures ::
    Control.Lens.Type.Lens' GameVars.Textures GameVars.GUITextures
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*C1(U)><S,1*U(U,U,U,U,U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ f6 :: * -> *
                   ($dFunctor :: GHC.Base.Functor f6)
                   (f7 :: GameVars.GUITextures -> f6 GameVars.GUITextures)
                   (ds :: GameVars.Textures) ->
                 case ds of wild { GameVars.Textures x1 x2 x3 x4 x5 ->
                 GHC.Base.fmap
                   @ f6
                   $dFunctor
                   @ GameVars.GUITextures
                   @ GameVars.Textures
                   (\ (y1 :: GameVars.GUITextures) ->
                    GameVars.Textures x1 x2 x3 x4 y1)
                   (f7 x5) }) -}
065a2dc19a04707991d5216288f73ef0
  highScore :: Control.Lens.Type.Lens' GameVars.Vars GHC.Types.Int
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*C1(U)><S,1*U(U,U,U,U,U,U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ f6 :: * -> *
                   ($dFunctor :: GHC.Base.Functor f6)
                   (f7 :: GHC.Types.Int -> f6 GHC.Types.Int)
                   (ds :: GameVars.Vars) ->
                 case ds of wild { GameVars.Vars x1 x2 x3 x4 dt1 dt2 ->
                 let {
                   x5 :: GHC.Types.Float = GHC.Types.F# dt1
                 } in
                 GHC.Base.fmap
                   @ f6
                   $dFunctor
                   @ GHC.Types.Int
                   @ GameVars.Vars
                   (\ (y1 :: GHC.Types.Int) -> GameVars.$WVars x1 x2 x3 x4 x5 y1)
                   (f7 (GHC.Types.I# dt2)) }) -}
1ea24e51de83317aaebc34b09661ed73
  highScoreFont ::
    Control.Lens.Type.Lens' GameVars.Fonts SDL.Font.Font
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*C1(U)><S,1*U(U,U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ f6 :: * -> *
                   ($dFunctor :: GHC.Base.Functor f6)
                   (f7 :: SDL.Font.Font -> f6 SDL.Font.Font)
                   (ds :: GameVars.Fonts) ->
                 case ds of wild { GameVars.Fonts x1 x2 ->
                 GHC.Base.fmap
                   @ f6
                   $dFunctor
                   @ SDL.Font.Font
                   @ GameVars.Fonts
                   (\ (y1 :: SDL.Font.Font) -> GameVars.Fonts x1 y1)
                   (f7 x2) }) -}
82c81453d67f6fcac9d2e6ac11571098
  isEsc :: Control.Lens.Type.Lens' GameVars.Input GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*C1(U)><S(LLSSS),1*U(U,U,U,U,U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ f6 :: * -> *
                   ($dFunctor :: GHC.Base.Functor f6)
                   (f7 :: GHC.Types.Bool -> f6 GHC.Types.Bool)
                   (ds :: GameVars.Input) ->
                 case ds of wild { GameVars.Input x1 x2 dt1 dt2 x4 ->
                 let {
                   x3 :: Linear.V2.V2 Foreign.C.Types.CInt
                   = Linear.V2.V2 @ Foreign.C.Types.CInt dt1 dt2
                 } in
                 GHC.Base.fmap
                   @ f6
                   $dFunctor
                   @ GHC.Types.Bool
                   @ GameVars.Input
                   (\ (y1 :: GHC.Types.Bool) -> GameVars.$WInput x1 y1 x3 x4)
                   (f7 x2) }) -}
6e5c5bff59bfa8b3814694e9fa3877aa
  isPassingWall ::
    Control.Lens.Type.Lens' GameVars.Player GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*C1(U)><S(LLLLLSL),1*U(U,U,U,U,U,U,U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ f6 :: * -> *
                   ($dFunctor :: GHC.Base.Functor f6)
                   (f7 :: GHC.Types.Bool -> f6 GHC.Types.Bool)
                   (ds :: GameVars.Player) ->
                 case ds of wild { GameVars.Player dt1 dt2 dt3 dt4 dt5 x5 dt6 ->
                 let {
                   x1 :: SDL.Video.Renderer.Rectangle GHC.Types.Float
                   = SDL.Video.Renderer.Rectangle @ GHC.Types.Float dt1 dt2
                 } in
                 let {
                   x2 :: GHC.Types.Float = GHC.Types.F# dt3
                 } in
                 let {
                   x3 :: GHC.Types.Float = GHC.Types.F# dt4
                 } in
                 let {
                   x4 :: GHC.Types.Float = GHC.Types.F# dt5
                 } in
                 let {
                   x6 :: GHC.Types.Double = GHC.Types.D# dt6
                 } in
                 GHC.Base.fmap
                   @ f6
                   $dFunctor
                   @ GHC.Types.Bool
                   @ GameVars.Player
                   (\ (y1 :: GHC.Types.Bool) ->
                    GameVars.$WPlayer
                      x1
                      x2
                      x3
                      x4
                      y1
                      x6 `cast` (Sym (Foreign.C.Types.N:CDouble[0])))
                   (f7 x5) }) -}
61a9e65152f5f42d78b618466f3067ae
  isSpace :: Control.Lens.Type.Lens' GameVars.Input GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*C1(U)><S(LLSSS),1*U(U,U,U,U,U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ f6 :: * -> *
                   ($dFunctor :: GHC.Base.Functor f6)
                   (f7 :: GHC.Types.Bool -> f6 GHC.Types.Bool)
                   (ds :: GameVars.Input) ->
                 case ds of wild { GameVars.Input x1 x2 dt1 dt2 x4 ->
                 let {
                   x3 :: Linear.V2.V2 Foreign.C.Types.CInt
                   = Linear.V2.V2 @ Foreign.C.Types.CInt dt1 dt2
                 } in
                 GHC.Base.fmap
                   @ f6
                   $dFunctor
                   @ GHC.Types.Bool
                   @ GameVars.Input
                   (\ (y1 :: GHC.Types.Bool) -> GameVars.$WInput y1 x2 x3 x4)
                   (f7 x1) }) -}
d5b1328f33af34462912ac47c2c34f97
  jumpFx :: Control.Lens.Type.Lens' GameVars.Sound SDL.Mixer.Chunk
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*C1(U)><S,1*U(U,U,U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ f6 :: * -> *
                   ($dFunctor :: GHC.Base.Functor f6)
                   (f7 :: SDL.Mixer.Chunk -> f6 SDL.Mixer.Chunk)
                   (ds :: GameVars.Sound) ->
                 case ds of wild { GameVars.Sound x1 x2 x3 ->
                 GHC.Base.fmap
                   @ f6
                   $dFunctor
                   @ SDL.Mixer.Chunk
                   @ GameVars.Sound
                   (\ (y1 :: SDL.Mixer.Chunk) -> GameVars.Sound x1 y1 x3)
                   (f7 x2) }) -}
ef872176f9b53602ccf81a16a4b8db0e
  kInput :: Control.Lens.Type.Lens' GameVars.Vars GameVars.Input
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*C1(U)><S,1*U(U,U,U,U,U,U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ f6 :: * -> *
                   ($dFunctor :: GHC.Base.Functor f6)
                   (f7 :: GameVars.Input -> f6 GameVars.Input)
                   (ds :: GameVars.Vars) ->
                 case ds of wild { GameVars.Vars x1 x2 x3 x4 dt1 dt2 ->
                 let {
                   x5 :: GHC.Types.Float = GHC.Types.F# dt1
                 } in
                 let {
                   x6 :: GHC.Types.Int = GHC.Types.I# dt2
                 } in
                 GHC.Base.fmap
                   @ f6
                   $dFunctor
                   @ GameVars.Input
                   @ GameVars.Vars
                   (\ (y1 :: GameVars.Input) -> GameVars.$WVars x1 x2 x3 y1 x5 x6)
                   (f7 x4) }) -}
ba090ea6dd439bccdd61f0b7038e42a1
  mousePos ::
    Control.Lens.Type.Lens'
      GameVars.Input (Linear.V2.V2 Foreign.C.Types.CInt)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*C1(U)><S(LLSSS),1*U(U,U,U,U,U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ f6 :: * -> *
                   ($dFunctor :: GHC.Base.Functor f6)
                   (f7 :: Linear.V2.V2 Foreign.C.Types.CInt
                          -> f6 (Linear.V2.V2 Foreign.C.Types.CInt))
                   (ds :: GameVars.Input) ->
                 case ds of wild { GameVars.Input x1 x2 dt1 dt2 x4 ->
                 GHC.Base.fmap
                   @ f6
                   $dFunctor
                   @ (Linear.V2.V2 Foreign.C.Types.CInt)
                   @ GameVars.Input
                   (\ (y1 :: Linear.V2.V2 Foreign.C.Types.CInt) ->
                    GameVars.$WInput x1 x2 y1 x4)
                   (f7 (Linear.V2.V2 @ Foreign.C.Types.CInt dt1 dt2)) }) -}
2b51e74371fc31bbe9d0fbae0a051303
  mousePress :: Control.Lens.Type.Lens' GameVars.Input GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*C1(U)><S(LLSSS),1*U(U,U,U,U,U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ f6 :: * -> *
                   ($dFunctor :: GHC.Base.Functor f6)
                   (f7 :: GHC.Types.Bool -> f6 GHC.Types.Bool)
                   (ds :: GameVars.Input) ->
                 case ds of wild { GameVars.Input x1 x2 dt1 dt2 x4 ->
                 let {
                   x3 :: Linear.V2.V2 Foreign.C.Types.CInt
                   = Linear.V2.V2 @ Foreign.C.Types.CInt dt1 dt2
                 } in
                 GHC.Base.fmap
                   @ f6
                   $dFunctor
                   @ GHC.Types.Bool
                   @ GameVars.Input
                   (\ (y1 :: GHC.Types.Bool) -> GameVars.$WInput x1 x2 x3 y1)
                   (f7 x4) }) -}
b7aa094ce350a24eceeee74a6e74ca48
  muteTexture ::
    Control.Lens.Type.Lens'
      GameVars.GUITextures SDL.Video.Renderer.Texture
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*C1(U)><S,1*U(U,U,U,U,U,U,U,U,U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ f6 :: * -> *
                   ($dFunctor :: GHC.Base.Functor f6)
                   (f7 :: SDL.Video.Renderer.Texture -> f6 SDL.Video.Renderer.Texture)
                   (ds :: GameVars.GUITextures) ->
                 case ds of wild { GameVars.GUITextures x1 x2 x3 x4 x5 x6 x7 x8 x9 ->
                 GHC.Base.fmap
                   @ f6
                   $dFunctor
                   @ SDL.Video.Renderer.Texture
                   @ GameVars.GUITextures
                   (\ (y1 :: SDL.Video.Renderer.Texture) ->
                    GameVars.GUITextures x1 x2 x3 x4 x5 x6 x7 x8 y1)
                   (f7 x9) }) -}
edf150d798b8ee917b33f66f17a05dc8
  mutedTexture ::
    Control.Lens.Type.Lens'
      GameVars.GUITextures SDL.Video.Renderer.Texture
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*C1(U)><S,1*U(U,U,U,U,U,U,U,U,U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ f6 :: * -> *
                   ($dFunctor :: GHC.Base.Functor f6)
                   (f7 :: SDL.Video.Renderer.Texture -> f6 SDL.Video.Renderer.Texture)
                   (ds :: GameVars.GUITextures) ->
                 case ds of wild { GameVars.GUITextures x1 x2 x3 x4 x5 x6 x7 x8 x9 ->
                 GHC.Base.fmap
                   @ f6
                   $dFunctor
                   @ SDL.Video.Renderer.Texture
                   @ GameVars.GUITextures
                   (\ (y1 :: SDL.Video.Renderer.Texture) ->
                    GameVars.GUITextures x1 x2 x3 x4 x5 x6 x7 y1 x9)
                   (f7 x8) }) -}
e7a73c1322bb5a22503c84b75d84167c
  playAgainBtnTexture ::
    Control.Lens.Type.Lens'
      GameVars.GUITextures SDL.Video.Renderer.Texture
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*C1(U)><S,1*U(U,U,U,U,U,U,U,U,U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ f6 :: * -> *
                   ($dFunctor :: GHC.Base.Functor f6)
                   (f7 :: SDL.Video.Renderer.Texture -> f6 SDL.Video.Renderer.Texture)
                   (ds :: GameVars.GUITextures) ->
                 case ds of wild { GameVars.GUITextures x1 x2 x3 x4 x5 x6 x7 x8 x9 ->
                 GHC.Base.fmap
                   @ f6
                   $dFunctor
                   @ SDL.Video.Renderer.Texture
                   @ GameVars.GUITextures
                   (\ (y1 :: SDL.Video.Renderer.Texture) ->
                    GameVars.GUITextures x1 x2 y1 x4 x5 x6 x7 x8 x9)
                   (f7 x3) }) -}
6c01d88673580d6d4607c9c61d3158e5
  playBtnTexture ::
    Control.Lens.Type.Lens'
      GameVars.GUITextures SDL.Video.Renderer.Texture
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*C1(U)><S,1*U(U,U,U,U,U,U,U,U,U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ f6 :: * -> *
                   ($dFunctor :: GHC.Base.Functor f6)
                   (f7 :: SDL.Video.Renderer.Texture -> f6 SDL.Video.Renderer.Texture)
                   (ds :: GameVars.GUITextures) ->
                 case ds of wild { GameVars.GUITextures x1 x2 x3 x4 x5 x6 x7 x8 x9 ->
                 GHC.Base.fmap
                   @ f6
                   $dFunctor
                   @ SDL.Video.Renderer.Texture
                   @ GameVars.GUITextures
                   (\ (y1 :: SDL.Video.Renderer.Texture) ->
                    GameVars.GUITextures y1 x2 x3 x4 x5 x6 x7 x8 x9)
                   (f7 x1) }) -}
fa7aa3fc5076bb661df40db074a47567
  player :: Control.Lens.Type.Lens' GameVars.PlayVars GameVars.Player
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*C1(U)><S(LLLLLSLLLLLLLLLLLL),1*U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ f6 :: * -> *
                   ($dFunctor :: GHC.Base.Functor f6)
                   (f7 :: GameVars.Player -> f6 GameVars.Player)
                   (ds :: GameVars.PlayVars) ->
                 case ds of wild { GameVars.PlayVars dt1 dt2 dt3 dt4 dt5 dt6 dt7 x2 dt8 dt9 dt10 dt11 dt12 dt13 dt14 dt15 dt16 dt17 ->
                 let {
                   x3 :: GHC.Types.Float = GHC.Types.F# dt8
                 } in
                 let {
                   x4 :: Walls.WallConfig
                   = Walls.WallConfig dt9 dt10 dt11 dt12 dt13 dt14 dt15 dt16
                 } in
                 let {
                   x5 :: GHC.Types.Int = GHC.Types.I# dt17
                 } in
                 GHC.Base.fmap
                   @ f6
                   $dFunctor
                   @ GameVars.Player
                   @ GameVars.PlayVars
                   (\ (y1 :: GameVars.Player) -> GameVars.$WPlayVars y1 x2 x3 x4 x5)
                   (f7 (GameVars.Player dt1 dt2 dt3 dt4 dt5 dt6 dt7)) }) -}
c0a8016eeb612375fb1f7452100c651c
  playerAnimationHandler ::
    Control.Lens.Type.Lens'
      GameVars.RenderingVars Animations.AnimationHandler
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*C1(U)><S(LSSSSL),1*U(U,U,U,U,U,U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ f6 :: * -> *
                   ($dFunctor :: GHC.Base.Functor f6)
                   (f7 :: Animations.AnimationHandler
                          -> f6 Animations.AnimationHandler)
                   (ds :: GameVars.RenderingVars) ->
                 case ds of wild { GameVars.RenderingVars x1 dt1 dt2 dt3 dt4 dt5 ->
                 let {
                   x2 :: Linear.V2.V2 Foreign.C.Types.CInt
                   = Linear.V2.V2 @ Foreign.C.Types.CInt dt1 dt2
                 } in
                 let {
                   x3 :: Linear.V2.V2 GHC.Types.Float
                   = Linear.V2.V2 @ GHC.Types.Float dt3 dt4
                 } in
                 let {
                   x4 :: GHC.Word.Word8 = GHC.Word.W8# dt5
                 } in
                 GHC.Base.fmap
                   @ f6
                   $dFunctor
                   @ Animations.AnimationHandler
                   @ GameVars.RenderingVars
                   (\ (y1 :: Animations.AnimationHandler) ->
                    GameVars.$WRenderingVars
                      y1
                      x2
                        `cast`
                      (Sym (Linear.Affine.N:Point[0]
                                <Linear.V2.V2>_R) <Foreign.C.Types.CInt>_N)
                      x3
                      x4)
                   (f7 x1) }) -}
20dd5da2e27bacff0b182ae170cc3e81
  playerDeathAnimation ::
    Control.Lens.Type.Lens'
      GameVars.Animations [Animations.AnimationSrcRect]
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*C1(U)><S,1*U(U,U,U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ f6 :: * -> *
                   ($dFunctor :: GHC.Base.Functor f6)
                   (f7 :: [Animations.AnimationSrcRect]
                          -> f6 [Animations.AnimationSrcRect])
                   (ds :: GameVars.Animations) ->
                 case ds of wild { GameVars.Animations x1 x2 x3 ->
                 GHC.Base.fmap
                   @ f6
                   $dFunctor
                   @ [Animations.AnimationSrcRect]
                   @ GameVars.Animations
                   (\ (y1 :: [Animations.AnimationSrcRect]) ->
                    GameVars.Animations x1 x2 y1)
                   (f7 x3) }) -}
3f8acb5001058db804be180c333dc989
  playerIdleAnimation ::
    Control.Lens.Type.Lens'
      GameVars.Animations [Animations.AnimationSrcRect]
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*C1(U)><S,1*U(U,U,U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ f6 :: * -> *
                   ($dFunctor :: GHC.Base.Functor f6)
                   (f7 :: [Animations.AnimationSrcRect]
                          -> f6 [Animations.AnimationSrcRect])
                   (ds :: GameVars.Animations) ->
                 case ds of wild { GameVars.Animations x1 x2 x3 ->
                 GHC.Base.fmap
                   @ f6
                   $dFunctor
                   @ [Animations.AnimationSrcRect]
                   @ GameVars.Animations
                   (\ (y1 :: [Animations.AnimationSrcRect]) ->
                    GameVars.Animations y1 x2 x3)
                   (f7 x1) }) -}
41aad7e466f7e7e4a245f84c07c1c830
  playerJumpAnimation ::
    Control.Lens.Type.Lens'
      GameVars.Animations [Animations.AnimationSrcRect]
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*C1(U)><S,1*U(U,U,U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ f6 :: * -> *
                   ($dFunctor :: GHC.Base.Functor f6)
                   (f7 :: [Animations.AnimationSrcRect]
                          -> f6 [Animations.AnimationSrcRect])
                   (ds :: GameVars.Animations) ->
                 case ds of wild { GameVars.Animations x1 x2 x3 ->
                 GHC.Base.fmap
                   @ f6
                   $dFunctor
                   @ [Animations.AnimationSrcRect]
                   @ GameVars.Animations
                   (\ (y1 :: [Animations.AnimationSrcRect]) ->
                    GameVars.Animations x1 y1 x3)
                   (f7 x2) }) -}
493bbe54e885a04e0d145eb545e9593b
  playerSpriteSheet ::
    Control.Lens.Type.Lens'
      GameVars.Textures SDL.Video.Renderer.Texture
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*C1(U)><S,1*U(U,U,U,U,U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ f6 :: * -> *
                   ($dFunctor :: GHC.Base.Functor f6)
                   (f7 :: SDL.Video.Renderer.Texture -> f6 SDL.Video.Renderer.Texture)
                   (ds :: GameVars.Textures) ->
                 case ds of wild { GameVars.Textures x1 x2 x3 x4 x5 ->
                 GHC.Base.fmap
                   @ f6
                   $dFunctor
                   @ SDL.Video.Renderer.Texture
                   @ GameVars.Textures
                   (\ (y1 :: SDL.Video.Renderer.Texture) ->
                    GameVars.Textures x1 y1 x3 x4 x5)
                   (f7 x2) }) -}
37f61b2897f2fcc93b5ce8a2c071fdc5
  pressSpacetoJumpTexture ::
    Control.Lens.Type.Lens'
      GameVars.GUITextures SDL.Video.Renderer.Texture
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*C1(U)><S,1*U(U,U,U,U,U,U,U,U,U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ f6 :: * -> *
                   ($dFunctor :: GHC.Base.Functor f6)
                   (f7 :: SDL.Video.Renderer.Texture -> f6 SDL.Video.Renderer.Texture)
                   (ds :: GameVars.GUITextures) ->
                 case ds of wild { GameVars.GUITextures x1 x2 x3 x4 x5 x6 x7 x8 x9 ->
                 GHC.Base.fmap
                   @ f6
                   $dFunctor
                   @ SDL.Video.Renderer.Texture
                   @ GameVars.GUITextures
                   (\ (y1 :: SDL.Video.Renderer.Texture) ->
                    GameVars.GUITextures x1 x2 x3 x4 x5 y1 x7 x8 x9)
                   (f7 x6) }) -}
7c4f23a6c9467d21d67592c3cac85142
  quitBtnTexture ::
    Control.Lens.Type.Lens'
      GameVars.GUITextures SDL.Video.Renderer.Texture
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*C1(U)><S,1*U(U,U,U,U,U,U,U,U,U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ f6 :: * -> *
                   ($dFunctor :: GHC.Base.Functor f6)
                   (f7 :: SDL.Video.Renderer.Texture -> f6 SDL.Video.Renderer.Texture)
                   (ds :: GameVars.GUITextures) ->
                 case ds of wild { GameVars.GUITextures x1 x2 x3 x4 x5 x6 x7 x8 x9 ->
                 GHC.Base.fmap
                   @ f6
                   $dFunctor
                   @ SDL.Video.Renderer.Texture
                   @ GameVars.GUITextures
                   (\ (y1 :: SDL.Video.Renderer.Texture) ->
                    GameVars.GUITextures x1 y1 x3 x4 x5 x6 x7 x8 x9)
                   (f7 x2) }) -}
faf22816378f5922353f1722dfd0f62d
  quitGameOverBtnTexture ::
    Control.Lens.Type.Lens'
      GameVars.GUITextures SDL.Video.Renderer.Texture
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*C1(U)><S,1*U(U,U,U,U,U,U,U,U,U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ f6 :: * -> *
                   ($dFunctor :: GHC.Base.Functor f6)
                   (f7 :: SDL.Video.Renderer.Texture -> f6 SDL.Video.Renderer.Texture)
                   (ds :: GameVars.GUITextures) ->
                 case ds of wild { GameVars.GUITextures x1 x2 x3 x4 x5 x6 x7 x8 x9 ->
                 GHC.Base.fmap
                   @ f6
                   $dFunctor
                   @ SDL.Video.Renderer.Texture
                   @ GameVars.GUITextures
                   (\ (y1 :: SDL.Video.Renderer.Texture) ->
                    GameVars.GUITextures x1 x2 x3 y1 x5 x6 x7 x8 x9)
                   (f7 x4) }) -}
8ba7b7f7f1331f435b9dd7fece044d0a
  score :: Control.Lens.Type.Lens' GameVars.PlayVars GHC.Types.Int
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*C1(U)><S(LLLLLSLLLLLLLLLLLL),1*U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ f6 :: * -> *
                   ($dFunctor :: GHC.Base.Functor f6)
                   (f7 :: GHC.Types.Int -> f6 GHC.Types.Int)
                   (ds :: GameVars.PlayVars) ->
                 case ds of wild { GameVars.PlayVars dt1 dt2 dt3 dt4 dt5 dt6 dt7 x2 dt8 dt9 dt10 dt11 dt12 dt13 dt14 dt15 dt16 dt17 ->
                 let {
                   x1 :: GameVars.Player = GameVars.Player dt1 dt2 dt3 dt4 dt5 dt6 dt7
                 } in
                 let {
                   x3 :: GHC.Types.Float = GHC.Types.F# dt8
                 } in
                 let {
                   x4 :: Walls.WallConfig
                   = Walls.WallConfig dt9 dt10 dt11 dt12 dt13 dt14 dt15 dt16
                 } in
                 GHC.Base.fmap
                   @ f6
                   $dFunctor
                   @ GHC.Types.Int
                   @ GameVars.PlayVars
                   (\ (y1 :: GHC.Types.Int) -> GameVars.$WPlayVars x1 x2 x3 x4 y1)
                   (f7 (GHC.Types.I# dt17)) }) -}
5f2633e933d68e24238ace640a6fb545
  scoreFont :: Control.Lens.Type.Lens' GameVars.Fonts SDL.Font.Font
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*C1(U)><S,1*U(U,U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ f6 :: * -> *
                   ($dFunctor :: GHC.Base.Functor f6)
                   (f7 :: SDL.Font.Font -> f6 SDL.Font.Font)
                   (ds :: GameVars.Fonts) ->
                 case ds of wild { GameVars.Fonts x1 x2 ->
                 GHC.Base.fmap
                   @ f6
                   $dFunctor
                   @ SDL.Font.Font
                   @ GameVars.Fonts
                   (\ (y1 :: SDL.Font.Font) -> GameVars.Fonts y1 x2)
                   (f7 x1) }) -}
1597263a8cceded749d3017d2be8ec4c
  titleScreenbg ::
    Control.Lens.Type.Lens'
      GameVars.GUITextures SDL.Video.Renderer.Texture
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*C1(U)><S,1*U(U,U,U,U,U,U,U,U,U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ f6 :: * -> *
                   ($dFunctor :: GHC.Base.Functor f6)
                   (f7 :: SDL.Video.Renderer.Texture -> f6 SDL.Video.Renderer.Texture)
                   (ds :: GameVars.GUITextures) ->
                 case ds of wild { GameVars.GUITextures x1 x2 x3 x4 x5 x6 x7 x8 x9 ->
                 GHC.Base.fmap
                   @ f6
                   $dFunctor
                   @ SDL.Video.Renderer.Texture
                   @ GameVars.GUITextures
                   (\ (y1 :: SDL.Video.Renderer.Texture) ->
                    GameVars.GUITextures x1 x2 x3 x4 x5 x6 y1 x8 x9)
                   (f7 x7) }) -}
bbbb97372ea796920b29162b8940df61
  topWallTexture ::
    Control.Lens.Type.Lens'
      GameVars.Textures SDL.Video.Renderer.Texture
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*C1(U)><S,1*U(U,U,U,U,U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ f6 :: * -> *
                   ($dFunctor :: GHC.Base.Functor f6)
                   (f7 :: SDL.Video.Renderer.Texture -> f6 SDL.Video.Renderer.Texture)
                   (ds :: GameVars.Textures) ->
                 case ds of wild { GameVars.Textures x1 x2 x3 x4 x5 ->
                 GHC.Base.fmap
                   @ f6
                   $dFunctor
                   @ SDL.Video.Renderer.Texture
                   @ GameVars.Textures
                   (\ (y1 :: SDL.Video.Renderer.Texture) ->
                    GameVars.Textures x1 x2 x3 y1 x5)
                   (f7 x4) }) -}
bb829e93033ef24ee6578513057e5712
  transitionOpacity ::
    Control.Lens.Type.Lens' GameVars.RenderingVars GHC.Word.Word8
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*C1(U)><S(LSSSSL),1*U(U,U,U,U,U,U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ f6 :: * -> *
                   ($dFunctor :: GHC.Base.Functor f6)
                   (f7 :: GHC.Word.Word8 -> f6 GHC.Word.Word8)
                   (ds :: GameVars.RenderingVars) ->
                 case ds of wild { GameVars.RenderingVars x1 dt1 dt2 dt3 dt4 dt5 ->
                 let {
                   x2 :: Linear.V2.V2 Foreign.C.Types.CInt
                   = Linear.V2.V2 @ Foreign.C.Types.CInt dt1 dt2
                 } in
                 let {
                   x3 :: Linear.V2.V2 GHC.Types.Float
                   = Linear.V2.V2 @ GHC.Types.Float dt3 dt4
                 } in
                 GHC.Base.fmap
                   @ f6
                   $dFunctor
                   @ GHC.Word.Word8
                   @ GameVars.RenderingVars
                   (\ (y1 :: GHC.Word.Word8) ->
                    GameVars.$WRenderingVars
                      x1
                      x2
                        `cast`
                      (Sym (Linear.Affine.N:Point[0]
                                <Linear.V2.V2>_R) <Foreign.C.Types.CInt>_N)
                      x3
                      y1)
                   (f7 (GHC.Word.W8# dt5)) }) -}
a9c0714db857d750c16387ceb110452d
  vGameStateStack ::
    Control.Lens.Type.Lens' GameVars.Vars GameVars.GameStack
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*C1(U)><S,1*U(U,U,U,U,U,U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ f6 :: * -> *
                   ($dFunctor :: GHC.Base.Functor f6)
                   (f7 :: GameVars.GameStack -> f6 GameVars.GameStack)
                   (ds :: GameVars.Vars) ->
                 case ds of wild { GameVars.Vars x1 x2 x3 x4 dt1 dt2 ->
                 let {
                   x5 :: GHC.Types.Float = GHC.Types.F# dt1
                 } in
                 let {
                   x6 :: GHC.Types.Int = GHC.Types.I# dt2
                 } in
                 GHC.Base.fmap
                   @ f6
                   $dFunctor
                   @ GameVars.GameStack
                   @ GameVars.Vars
                   (\ (y1 :: GameVars.GameStack) -> GameVars.$WVars y1 x2 x3 x4 x5 x6)
                   (f7 x1) }) -}
dbef10ec54712962f546a8d4b473ed09
  vPlayVars ::
    Control.Lens.Type.Lens' GameVars.Vars GameVars.PlayVars
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*C1(U)><S,1*U(U,U,U,U,U,U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ f6 :: * -> *
                   ($dFunctor :: GHC.Base.Functor f6)
                   (f7 :: GameVars.PlayVars -> f6 GameVars.PlayVars)
                   (ds :: GameVars.Vars) ->
                 case ds of wild { GameVars.Vars x1 x2 x3 x4 dt1 dt2 ->
                 let {
                   x5 :: GHC.Types.Float = GHC.Types.F# dt1
                 } in
                 let {
                   x6 :: GHC.Types.Int = GHC.Types.I# dt2
                 } in
                 GHC.Base.fmap
                   @ f6
                   $dFunctor
                   @ GameVars.PlayVars
                   @ GameVars.Vars
                   (\ (y1 :: GameVars.PlayVars) -> GameVars.$WVars x1 y1 x3 x4 x5 x6)
                   (f7 x2) }) -}
2d58b68e764b27d35775ee018d600077
  vRenderingVars ::
    Control.Lens.Type.Lens' GameVars.Vars GameVars.RenderingVars
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*C1(U)><S,1*U(U,U,U,U,U,U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ f6 :: * -> *
                   ($dFunctor :: GHC.Base.Functor f6)
                   (f7 :: GameVars.RenderingVars -> f6 GameVars.RenderingVars)
                   (ds :: GameVars.Vars) ->
                 case ds of wild { GameVars.Vars x1 x2 x3 x4 dt1 dt2 ->
                 let {
                   x5 :: GHC.Types.Float = GHC.Types.F# dt1
                 } in
                 let {
                   x6 :: GHC.Types.Int = GHC.Types.I# dt2
                 } in
                 GHC.Base.fmap
                   @ f6
                   $dFunctor
                   @ GameVars.RenderingVars
                   @ GameVars.Vars
                   (\ (y1 :: GameVars.RenderingVars) ->
                    GameVars.$WVars x1 x2 y1 x4 x5 x6)
                   (f7 x3) }) -}
ec585c4eef5b4147b27283d5d9c17e95
  wallStream ::
    Control.Lens.Type.Lens'
      GameVars.PlayVars (Data.Stream.Stream Walls.Wall)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*C1(U)><S(LLLLLSLLLLLLLLLLLL),1*U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ f6 :: * -> *
                   ($dFunctor :: GHC.Base.Functor f6)
                   (f7 :: Data.Stream.Stream Walls.Wall
                          -> f6 (Data.Stream.Stream Walls.Wall))
                   (ds :: GameVars.PlayVars) ->
                 case ds of wild { GameVars.PlayVars dt1 dt2 dt3 dt4 dt5 dt6 dt7 x2 dt8 dt9 dt10 dt11 dt12 dt13 dt14 dt15 dt16 dt17 ->
                 let {
                   x1 :: GameVars.Player = GameVars.Player dt1 dt2 dt3 dt4 dt5 dt6 dt7
                 } in
                 let {
                   x3 :: GHC.Types.Float = GHC.Types.F# dt8
                 } in
                 let {
                   x4 :: Walls.WallConfig
                   = Walls.WallConfig dt9 dt10 dt11 dt12 dt13 dt14 dt15 dt16
                 } in
                 let {
                   x5 :: GHC.Types.Int = GHC.Types.I# dt17
                 } in
                 GHC.Base.fmap
                   @ f6
                   $dFunctor
                   @ (Data.Stream.Stream Walls.Wall)
                   @ GameVars.PlayVars
                   (\ (y1 :: Data.Stream.Stream Walls.Wall) ->
                    GameVars.$WPlayVars x1 y1 x3 x4 x5)
                   (f7 x2) }) -}
5c2f8cf08669a67616a6eccb23cc0abb
  xvel :: Control.Lens.Type.Lens' GameVars.Player GHC.Types.Float
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*C1(U)><S(LLLLLSL),1*U(U,U,U,U,U,U,U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ f6 :: * -> *
                   ($dFunctor :: GHC.Base.Functor f6)
                   (f7 :: GHC.Types.Float -> f6 GHC.Types.Float)
                   (ds :: GameVars.Player) ->
                 case ds of wild { GameVars.Player dt1 dt2 dt3 dt4 dt5 x5 dt6 ->
                 let {
                   x1 :: SDL.Video.Renderer.Rectangle GHC.Types.Float
                   = SDL.Video.Renderer.Rectangle @ GHC.Types.Float dt1 dt2
                 } in
                 let {
                   x2 :: GHC.Types.Float = GHC.Types.F# dt3
                 } in
                 let {
                   x4 :: GHC.Types.Float = GHC.Types.F# dt5
                 } in
                 let {
                   x6 :: GHC.Types.Double = GHC.Types.D# dt6
                 } in
                 GHC.Base.fmap
                   @ f6
                   $dFunctor
                   @ GHC.Types.Float
                   @ GameVars.Player
                   (\ (y1 :: GHC.Types.Float) ->
                    GameVars.$WPlayer
                      x1
                      x2
                      y1
                      x4
                      x5
                      x6 `cast` (Sym (Foreign.C.Types.N:CDouble[0])))
                   (f7 (GHC.Types.F# dt4)) }) -}
404fa360ca38a84fc2d938882137b888
  yvel :: Control.Lens.Type.Lens' GameVars.Player GHC.Types.Float
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*C1(U)><S(LLLLLSL),1*U(U,U,U,U,U,U,U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ f6 :: * -> *
                   ($dFunctor :: GHC.Base.Functor f6)
                   (f7 :: GHC.Types.Float -> f6 GHC.Types.Float)
                   (ds :: GameVars.Player) ->
                 case ds of wild { GameVars.Player dt1 dt2 dt3 dt4 dt5 x5 dt6 ->
                 let {
                   x1 :: SDL.Video.Renderer.Rectangle GHC.Types.Float
                   = SDL.Video.Renderer.Rectangle @ GHC.Types.Float dt1 dt2
                 } in
                 let {
                   x3 :: GHC.Types.Float = GHC.Types.F# dt4
                 } in
                 let {
                   x4 :: GHC.Types.Float = GHC.Types.F# dt5
                 } in
                 let {
                   x6 :: GHC.Types.Double = GHC.Types.D# dt6
                 } in
                 GHC.Base.fmap
                   @ f6
                   $dFunctor
                   @ GHC.Types.Float
                   @ GameVars.Player
                   (\ (y1 :: GHC.Types.Float) ->
                    GameVars.$WPlayer
                      x1
                      y1
                      x3
                      x4
                      x5
                      x6 `cast` (Sym (Foreign.C.Types.N:CDouble[0])))
                   (f7 (GHC.Types.F# dt3)) }) -}
instance GHC.Base.Applicative [GameVars.MahppyBird]
  = GameVars.$fApplicativeMahppyBird
instance GHC.Classes.Eq [GameVars.GameState]
  = GameVars.$fEqGameState
instance GHC.Base.Functor [GameVars.MahppyBird]
  = GameVars.$fFunctorMahppyBird
instance Control.Monad.IO.Class.MonadIO [GameVars.MahppyBird]
  = GameVars.$fMonadIOMahppyBird
instance GHC.Base.Monad [GameVars.MahppyBird]
  = GameVars.$fMonadMahppyBird
instance Control.Monad.Reader.Class.MonadReader [GameVars.Config,
                                                 GameVars.MahppyBird]
  = GameVars.$fMonadReaderMahppyBird
instance Control.Monad.State.Class.MonadState [GameVars.Vars,
                                               GameVars.MahppyBird]
  = GameVars.$fMonadStateMahppyBird
instance GHC.Show.Show [GameVars.GameState]
  = GameVars.$fShowGameState
instance GHC.Show.Show [GameVars.Input] = GameVars.$fShowInput
instance GHC.Show.Show [GameVars.PlayVars]
  = GameVars.$fShowPlayVars
instance GHC.Show.Show [GameVars.Player] = GameVars.$fShowPlayer
instance GHC.Show.Show [GameVars.RenderingVars]
  = GameVars.$fShowRenderingVars
instance GHC.Show.Show [GameVars.Vars] = GameVars.$fShowVars
"SPEC/GameVars $fApplicativeReaderT_$c<*> @ (StateT Vars IO) _" forall @ r
                                                                       ($dApplicative :: GHC.Base.Applicative
                                                                                           (Control.Monad.Trans.State.Lazy.StateT
                                                                                              GameVars.Vars
                                                                                              GHC.Types.IO))
  Control.Monad.Trans.Reader.$fApplicativeReaderT_$c<*> @ (Control.Monad.Trans.State.Lazy.StateT
                                                             GameVars.Vars GHC.Types.IO)
                                                        @ r
                                                        $dApplicative
  = GameVars.$fApplicativeMahppyBird_$s$fApplicativeReaderT_$c<*> @ r
"SPEC/GameVars $fFunctorReaderT_$cfmap @ (StateT Vars IO) _" forall @ r
                                                                    ($dFunctor :: GHC.Base.Functor
                                                                                    (Control.Monad.Trans.State.Lazy.StateT
                                                                                       GameVars.Vars
                                                                                       GHC.Types.IO))
  Control.Monad.Trans.Reader.$fFunctorReaderT_$cfmap @ (Control.Monad.Trans.State.Lazy.StateT
                                                          GameVars.Vars GHC.Types.IO)
                                                     @ r
                                                     $dFunctor
  = GameVars.$fFunctorMahppyBird_$s$fFunctorReaderT_$cfmap @ r
"SPEC/GameVars $fFunctorStateT_$cfmap @ IO _" [orphan] forall @ s
                                                              ($dFunctor :: GHC.Base.Functor
                                                                              GHC.Types.IO)
  Control.Monad.Trans.State.Lazy.$fFunctorStateT_$cfmap @ GHC.Types.IO
                                                        @ s
                                                        $dFunctor
  = GameVars.$fFunctorMahppyBird_$s$fFunctorStateT_$cfmap @ s
"SPEC/GameVars $fMonadReaderT_$c>> @ (StateT Vars IO) _" forall @ r
                                                                ($dMonad :: GHC.Base.Monad
                                                                              (Control.Monad.Trans.State.Lazy.StateT
                                                                                 GameVars.Vars
                                                                                 GHC.Types.IO))
  Control.Monad.Trans.Reader.$fMonadReaderT_$c>> @ (Control.Monad.Trans.State.Lazy.StateT
                                                      GameVars.Vars GHC.Types.IO)
                                                 @ r
                                                 $dMonad
  = GameVars.$fMonadMahppyBird_$s$fMonadReaderT_$c>> @ r
"SPEC/GameVars $fMonadReaderT_$c>>= @ (StateT Vars IO) _" forall @ r
                                                                 ($dMonad :: GHC.Base.Monad
                                                                               (Control.Monad.Trans.State.Lazy.StateT
                                                                                  GameVars.Vars
                                                                                  GHC.Types.IO))
  Control.Monad.Trans.Reader.$fMonadReaderT_$c>>= @ (Control.Monad.Trans.State.Lazy.StateT
                                                       GameVars.Vars GHC.Types.IO)
                                                  @ r
                                                  $dMonad
  = GameVars.$fMonadMahppyBird_$s$fMonadReaderT_$c>>= @ r
"SPEC/GameVars $fMonadReaderT_$cfail @ (StateT Vars IO) _" forall @ r
                                                                  ($dMonad :: GHC.Base.Monad
                                                                                (Control.Monad.Trans.State.Lazy.StateT
                                                                                   GameVars.Vars
                                                                                   GHC.Types.IO))
  Control.Monad.Trans.Reader.$fMonadReaderT_$cfail @ (Control.Monad.Trans.State.Lazy.StateT
                                                        GameVars.Vars GHC.Types.IO)
                                                   @ r
                                                   $dMonad
  = GameVars.$fMonadMahppyBird_$s$fMonadReaderT_$cfail @ r
"SPEC/GameVars $fShowV2 @ CInt" [orphan] forall (v :: GHC.Show.Show
                                                        Foreign.C.Types.CInt)
  Linear.V2.$fShowV2 @ Foreign.C.Types.CInt v
  = GameVars.$s$fShowPoint_$cshowsPrec_$s$fShowV2
"SPEC/GameVars $fShowV2_$cshowList @ CInt" [orphan] forall ($dShow :: GHC.Show.Show
                                                                        Foreign.C.Types.CInt)
  Linear.V2.$fShowV2_$cshowList @ Foreign.C.Types.CInt $dShow
  = GameVars.$s$fShowV2_$cshowList
"SPEC/GameVars reader @ (StateT Vars IO) _ _" forall @ r
                                                     @ a
                                                     ($dMonad :: GHC.Base.Monad
                                                                   (Control.Monad.Trans.State.Lazy.StateT
                                                                      GameVars.Vars GHC.Types.IO))
  Control.Monad.Trans.Reader.reader @ (Control.Monad.Trans.State.Lazy.StateT
                                         GameVars.Vars GHC.Types.IO)
                                    @ r
                                    @ a
                                    $dMonad
  = GameVars.$fMonadReaderMahppyBird_$sreader @ r @ a
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

