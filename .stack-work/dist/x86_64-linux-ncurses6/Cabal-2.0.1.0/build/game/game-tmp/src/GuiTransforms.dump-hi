
==================== FINAL INTERFACE ====================
2018-06-04 18:19:46.093322899 UTC

interface main:GuiTransforms 8022
  interface hash: f99f31a13de1cc7821f3d65db79a3355
  ABI hash: 45bb5f8eff3ca1d177e51377a93f20f5
  export-list hash: f9dcd83a9df04834bf7cc3c940782a98
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: fbfc9b4f0124b3a129b4a2321798f29f
  sig of: Nothing
  used TH splices: False
  where
exports:
  GuiTransforms.centerRectangle
  GuiTransforms.translate
  GuiTransforms.GuiTransforms{GuiTransforms.alignToBottomEdge GuiTransforms.alignToLeftEdge GuiTransforms.alignToRightEdge GuiTransforms.getWindowSize GuiTransforms.xCenterRectangle GuiTransforms.yCenterRectangle}
module dependencies: Animations GameVars Walls
package dependencies: QuickCheck-2.10.1 Stack-0.3.2
                      StateVar-1.1.1.0 Stream-0.4.7.2 adjunctions-4.4 array-0.5.2.0
                      base-4.10.1.0 base-orphans-0.7 bifunctors-5.5.2 binary-0.8.5.1
                      bytes-0.15.4 bytestring-0.10.8.2 call-stack-0.1.0 cereal-0.5.5.0
                      comonad-5.0.3 containers-0.5.10.2 contravariant-1.4.1
                      data-default-class-0.1.2.0 deepseq-1.4.3.0 distributive-0.5.3
                      exceptions-0.8.3 free-5.0.2 ghc-boot-th-8.2.2 ghc-prim-0.5.1.1
                      hashable-1.2.7.0 integer-gmp-1.0.1.0 integer-logarithms-1.0.2.1
                      kan-extensions-5.1 lazysmallcheck-0.6 lens-4.16.1
                      lifted-base-0.2.3.12 linear-1.20.7 monad-control-1.0.2.3 mtl-2.2.2
                      pretty-1.1.3.3 primitive-0.6.3.0 profunctors-5.2.2 random-1.1
                      reflection-2.1.3 scientific-0.3.6.0 sdl2-2.4.0.1 sdl2-mixer-1.1.0
                      sdl2-ttf-2.0.2 semigroupoids-5.2.2 stm-2.4.5.0 tagged-0.8.5
                      template-haskell-2.12.0.0 text-1.2.3.0 tf-random-0.5
                      th-abstraction-0.2.6.0 time-1.8.0.2 transformers-0.5.2.0
                      transformers-base-0.4.4 transformers-compat-0.5.1.4
                      unordered-containers-0.2.9.0 vector-0.12.0.1
orphans: time-1.8.0.2:Data.Time.Clock.TAI
         reflection-2.1.3:Data.Reflection
         vector-0.12.0.1:Data.Vector.Unboxed
         hashable-1.2.7.0:Data.Hashable.Generic text-1.2.3.0:Data.Text.Lazy
         linear-1.20.7:Linear.Instances base-orphans-0.7:Data.Orphans
         text-1.2.3.0:Data.Text binary-0.8.5.1:Data.Binary.Generic
         text-1.2.3.0:Data.Text.Show
         bytestring-0.10.8.2:Data.ByteString.Builder
         vector-0.12.0.1:Data.Vector.Fusion.Bundle
         stm-2.4.5.0:Control.Monad.STM time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian
         transformers-0.5.2.0:Control.Monad.Trans.Error
         base-4.10.1.0:GHC.Float base-4.10.1.0:GHC.Base
family instance modules: adjunctions-4.4:Data.Functor.Rep
                         base-4.10.1.0:Control.Applicative base-4.10.1.0:Data.Complex
                         base-4.10.1.0:Data.Either base-4.10.1.0:Data.Functor.Compose
                         base-4.10.1.0:Data.Functor.Const
                         base-4.10.1.0:Data.Functor.Identity
                         base-4.10.1.0:Data.Functor.Product base-4.10.1.0:Data.Functor.Sum
                         base-4.10.1.0:Data.List.NonEmpty base-4.10.1.0:Data.Monoid
                         base-4.10.1.0:Data.Semigroup base-4.10.1.0:Data.Type.Equality
                         base-4.10.1.0:Data.Version base-4.10.1.0:Data.Void
                         base-4.10.1.0:GHC.Exts base-4.10.1.0:GHC.Generics
                         base-4.10.1.0:GHC.IO.Exception base-4.10.1.0:GHC.TypeLits
                         base-4.10.1.0:GHC.TypeNats bifunctors-5.5.2:Data.Bifunctor.Biff
                         bifunctors-5.5.2:Data.Bifunctor.Clown
                         bifunctors-5.5.2:Data.Bifunctor.Fix
                         bifunctors-5.5.2:Data.Bifunctor.Flip
                         bifunctors-5.5.2:Data.Bifunctor.Join
                         bifunctors-5.5.2:Data.Bifunctor.Joker
                         bifunctors-5.5.2:Data.Bifunctor.Product
                         bifunctors-5.5.2:Data.Bifunctor.Sum
                         bifunctors-5.5.2:Data.Bifunctor.Tannen
                         bifunctors-5.5.2:Data.Bifunctor.Wrapped bytes-0.15.4:Data.Bytes.Get
                         bytes-0.15.4:Data.Bytes.Signed bytes-0.15.4:Data.Bytes.VarInt
                         containers-0.5.10.2:Data.IntMap.Internal
                         containers-0.5.10.2:Data.IntSet.Internal
                         containers-0.5.10.2:Data.Map.Internal
                         containers-0.5.10.2:Data.Sequence.Internal
                         containers-0.5.10.2:Data.Set.Internal containers-0.5.10.2:Data.Tree
                         free-5.0.2:Control.Comonad.Cofree
                         free-5.0.2:Control.Comonad.Trans.Cofree
                         free-5.0.2:Control.Monad.Free free-5.0.2:Control.Monad.Trans.Free
                         ghc-boot-th-8.2.2:GHC.ForeignSrcLang.Type
                         ghc-boot-th-8.2.2:GHC.LanguageExtensions.Type
                         kan-extensions-5.1:Data.Functor.Day
                         kan-extensions-5.1:Data.Functor.Yoneda lens-4.16.1:Control.Lens.At
                         lens-4.16.1:Control.Lens.Internal.Indexed
                         lens-4.16.1:Control.Lens.Reified lens-4.16.1:Control.Lens.Tuple
                         lens-4.16.1:Control.Lens.Wrapped lens-4.16.1:Control.Lens.Zoom
                         linear-1.20.7:Linear.Affine linear-1.20.7:Linear.Plucker
                         linear-1.20.7:Linear.Quaternion linear-1.20.7:Linear.V
                         linear-1.20.7:Linear.V0 linear-1.20.7:Linear.V1
                         linear-1.20.7:Linear.V2 linear-1.20.7:Linear.V3
                         linear-1.20.7:Linear.V4
                         monad-control-1.0.2.3:Control.Monad.Trans.Control
                         pretty-1.1.3.3:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.3:Text.PrettyPrint.HughesPJ
                         primitive-0.6.3.0:Control.Monad.Primitive
                         primitive-0.6.3.0:Data.Primitive.Array
                         primitive-0.6.3.0:Data.Primitive.ByteArray
                         profunctors-5.2.2:Data.Profunctor.Composition
                         profunctors-5.2.2:Data.Profunctor.Rep sdl2-2.4.0.1:SDL.Audio
                         sdl2-2.4.0.1:SDL.Event sdl2-2.4.0.1:SDL.Exception
                         sdl2-2.4.0.1:SDL.Hint sdl2-2.4.0.1:SDL.Init
                         sdl2-2.4.0.1:SDL.Input.GameController
                         sdl2-2.4.0.1:SDL.Input.Joystick sdl2-2.4.0.1:SDL.Input.Keyboard
                         sdl2-2.4.0.1:SDL.Input.Keyboard.Codes sdl2-2.4.0.1:SDL.Input.Mouse
                         sdl2-2.4.0.1:SDL.Internal.Types sdl2-2.4.0.1:SDL.Power
                         sdl2-2.4.0.1:SDL.Time sdl2-2.4.0.1:SDL.Video
                         sdl2-2.4.0.1:SDL.Video.OpenGL sdl2-2.4.0.1:SDL.Video.Renderer
                         sdl2-ttf-2.0.2:SDL.Font tagged-0.8.5:Data.Tagged
                         template-haskell-2.12.0.0:Language.Haskell.TH.Syntax
                         text-1.2.3.0:Data.Text text-1.2.3.0:Data.Text.Lazy
                         th-abstraction-0.2.6.0:Language.Haskell.TH.Datatype
                         unordered-containers-0.2.9.0:Data.HashMap.Base
                         unordered-containers-0.2.9.0:Data.HashSet
                         vector-0.12.0.1:Data.Vector vector-0.12.0.1:Data.Vector.Primitive
                         vector-0.12.0.1:Data.Vector.Storable
                         vector-0.12.0.1:Data.Vector.Unboxed
                         vector-0.12.0.1:Data.Vector.Unboxed.Base
import  -/  base-4.10.1.0:Control.Monad ebed2e8e7444944e0c1d827c6faf40a4
import  -/  base-4.10.1.0:Control.Monad.IO.Class 9d78cd0f73a837f3c00753bd212b9f2c
import  -/  base-4.10.1.0:Data.Functor 2ffda4f936b8f474394d93205750aff3
import  -/  base-4.10.1.0:GHC.Base 782fd99b5e36f3698a26179a49afca64
import  -/  base-4.10.1.0:GHC.Num 6e1dc5d36d99a802edb39b92bb1923b8
import  -/  base-4.10.1.0:GHC.Real 3c62834bc25e762eabc44149c4cc142d
import  -/  base-4.10.1.0:Prelude 31945b7d0084063347fc52506d3a4020
import  -/  linear-1.20.7:Linear.Affine f4ed1aa58b28d63beac82829593554b3
import  -/  linear-1.20.7:Linear.V2 ee409e3e067ada9faf9fdda331749bf4
import  -/  GameVars 95546c61036798381255e3d7e11311b2
  exports: bffadec9649d88993fa5a790487d46e7
  Config e44e7628e39bfe67c0571be38f0cb139
  MahppyBird fb5607b55373083b420634b0454a4ddb
  cWindow e44e7628e39bfe67c0571be38f0cb139
import  -/  mtl-2.2.2:Control.Monad.Reader 8d63edf5dfaf25ad085eae4468bdd77e
import  -/  mtl-2.2.2:Control.Monad.Reader.Class 6d33756d93a5919f9374afec232249f4
import  -/  mtl-2.2.2:Control.Monad.State 4acb2e6037f370fa4b91900d626e6406
import  -/  sdl2-2.4.0.1:SDL 24b907aeafb5c6d95ad8ce8f19ccd6b3
import  -/  sdl2-2.4.0.1:SDL.Video d45fd583608f97209f87f6e4859b5c5c
import  -/  sdl2-2.4.0.1:SDL.Video.OpenGL 59b5238e510eda4d79d17333257db7d7
import  -/  sdl2-2.4.0.1:SDL.Video.Renderer 05fa9f919fc1b42de89d6ed9d3439937
bdcfe4d5d5dcc377f267d071dde75fe1
  $fGuiTransformsMahppyBird ::
    GuiTransforms.GuiTransforms GameVars.MahppyBird
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ GameVars.MahppyBird
                  GameVars.$fMonadMahppyBird
                  GuiTransforms.$fGuiTransformsMahppyBird7
                    `cast`
                  (<SDL.Video.Renderer.Rectangle GHC.Types.Float>_R
                   ->_R Trans
                            (<GameVars.Config>_R
                             ->_R Trans
                                      (<GameVars.Vars>_R
                                       ->_R Sym (GHC.Types.N:IO[0]
                                                     <(SDL.Video.Renderer.Rectangle GHC.Types.Float,
                                                       GameVars.Vars)>_R))
                                      (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                <GameVars.Vars>_N
                                                <GHC.Types.IO>_R
                                                <SDL.Video.Renderer.Rectangle GHC.Types.Float>_N)))
                            (Trans
                                 (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                           <*>_N
                                           <GameVars.Config>_R
                                           <Control.Monad.Trans.State.Lazy.StateT
                                              GameVars.Vars GHC.Types.IO>_R
                                           <SDL.Video.Renderer.Rectangle GHC.Types.Float>_N))
                                 (Sym (GameVars.N:MahppyBird[0]) <SDL.Video.Renderer.Rectangle
                                                                    GHC.Types.Float>_N)))
                  GuiTransforms.$fGuiTransformsMahppyBird6
                    `cast`
                  (<SDL.Video.Renderer.Rectangle GHC.Types.Float>_R
                   ->_R Trans
                            (<GameVars.Config>_R
                             ->_R Trans
                                      (<GameVars.Vars>_R
                                       ->_R Sym (GHC.Types.N:IO[0]
                                                     <(SDL.Video.Renderer.Rectangle GHC.Types.Float,
                                                       GameVars.Vars)>_R))
                                      (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                <GameVars.Vars>_N
                                                <GHC.Types.IO>_R
                                                <SDL.Video.Renderer.Rectangle GHC.Types.Float>_N)))
                            (Trans
                                 (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                           <*>_N
                                           <GameVars.Config>_R
                                           <Control.Monad.Trans.State.Lazy.StateT
                                              GameVars.Vars GHC.Types.IO>_R
                                           <SDL.Video.Renderer.Rectangle GHC.Types.Float>_N))
                                 (Sym (GameVars.N:MahppyBird[0]) <SDL.Video.Renderer.Rectangle
                                                                    GHC.Types.Float>_N)))
                  GuiTransforms.$fGuiTransformsMahppyBird4
                    `cast`
                  (<SDL.Video.Renderer.Rectangle GHC.Types.Float>_R
                   ->_R Trans
                            (<GameVars.Config>_R
                             ->_R Trans
                                      (<GameVars.Vars>_R
                                       ->_R Sym (GHC.Types.N:IO[0]
                                                     <(SDL.Video.Renderer.Rectangle GHC.Types.Float,
                                                       GameVars.Vars)>_R))
                                      (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                <GameVars.Vars>_N
                                                <GHC.Types.IO>_R
                                                <SDL.Video.Renderer.Rectangle GHC.Types.Float>_N)))
                            (Trans
                                 (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                           <*>_N
                                           <GameVars.Config>_R
                                           <Control.Monad.Trans.State.Lazy.StateT
                                              GameVars.Vars GHC.Types.IO>_R
                                           <SDL.Video.Renderer.Rectangle GHC.Types.Float>_N))
                                 (Sym (GameVars.N:MahppyBird[0]) <SDL.Video.Renderer.Rectangle
                                                                    GHC.Types.Float>_N)))
                  GuiTransforms.$fGuiTransformsMahppyBird3
                    `cast`
                  (<SDL.Video.Renderer.Rectangle GHC.Types.Float>_R
                   ->_R Trans
                            (<GameVars.Config>_R
                             ->_R Trans
                                      (<GameVars.Vars>_R
                                       ->_R Sym (GHC.Types.N:IO[0]
                                                     <(SDL.Video.Renderer.Rectangle GHC.Types.Float,
                                                       GameVars.Vars)>_R))
                                      (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                <GameVars.Vars>_N
                                                <GHC.Types.IO>_R
                                                <SDL.Video.Renderer.Rectangle GHC.Types.Float>_N)))
                            (Trans
                                 (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                           <*>_N
                                           <GameVars.Config>_R
                                           <Control.Monad.Trans.State.Lazy.StateT
                                              GameVars.Vars GHC.Types.IO>_R
                                           <SDL.Video.Renderer.Rectangle GHC.Types.Float>_N))
                                 (Sym (GameVars.N:MahppyBird[0]) <SDL.Video.Renderer.Rectangle
                                                                    GHC.Types.Float>_N)))
                  GuiTransforms.$fGuiTransformsMahppyBird2
                    `cast`
                  (<SDL.Video.Renderer.Rectangle GHC.Types.Float>_R
                   ->_R Trans
                            (<GameVars.Config>_R
                             ->_R Trans
                                      (<GameVars.Vars>_R
                                       ->_R Sym (GHC.Types.N:IO[0]
                                                     <(SDL.Video.Renderer.Rectangle GHC.Types.Float,
                                                       GameVars.Vars)>_R))
                                      (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                <GameVars.Vars>_N
                                                <GHC.Types.IO>_R
                                                <SDL.Video.Renderer.Rectangle GHC.Types.Float>_N)))
                            (Trans
                                 (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                           <*>_N
                                           <GameVars.Config>_R
                                           <Control.Monad.Trans.State.Lazy.StateT
                                              GameVars.Vars GHC.Types.IO>_R
                                           <SDL.Video.Renderer.Rectangle GHC.Types.Float>_N))
                                 (Sym (GameVars.N:MahppyBird[0]) <SDL.Video.Renderer.Rectangle
                                                                    GHC.Types.Float>_N)))
                  GuiTransforms.$fGuiTransformsMahppyBird1
                    `cast`
                  (Trans
                       (<GameVars.Config>_R
                        ->_R Trans
                                 (<GameVars.Vars>_R
                                  ->_R Sym (GHC.Types.N:IO[0]
                                                <(Linear.V2.V2 GHC.Types.Float, GameVars.Vars)>_R))
                                 (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                           <GameVars.Vars>_N
                                           <GHC.Types.IO>_R
                                           <Linear.V2.V2 GHC.Types.Float>_N)))
                       (Trans
                            (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                      <*>_N
                                      <GameVars.Config>_R
                                      <Control.Monad.Trans.State.Lazy.StateT
                                         GameVars.Vars GHC.Types.IO>_R
                                      <Linear.V2.V2 GHC.Types.Float>_N))
                            (Sym (GameVars.N:MahppyBird[0]) <Linear.V2.V2
                                                               GHC.Types.Float>_N))) -}
ad9d0576797edbf363274928d7202e5b
  $fGuiTransformsMahppyBird1 ::
    GameVars.Config
    -> GameVars.Vars
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          (Linear.V2.V2 GHC.Types.Float, GameVars.Vars) #)
  {- Arity: 3, Strictness: <L,U(U(U),U,U)><L,U><S,U>,
     Unfolding: (\ (r1 :: GameVars.Config)
                   (eta :: GameVars.Vars)
                   (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case (((SDL.Video.OpenGL.glGetDrawableSize
                           @ GameVars.MahppyBird
                           GameVars.$fMonadIOMahppyBird
                           (case r1 of wild { GameVars.Config ds1 ds2 ds3 -> ds1 }))
                          `cast`
                        (Trans
                             (GameVars.N:MahppyBird[0] <Linear.V2.V2 Foreign.C.Types.CInt>_N)
                             (Control.Monad.Trans.Reader.N:ReaderT[0]
                                  <*>_N
                                  <GameVars.Config>_R
                                  <Control.Monad.Trans.State.Lazy.StateT
                                     GameVars.Vars GHC.Types.IO>_R
                                  <Linear.V2.V2 Foreign.C.Types.CInt>_N))
                          r1)
                         `cast`
                       (Control.Monad.Trans.State.Lazy.N:StateT[0]
                            <GameVars.Vars>_N
                            <GHC.Types.IO>_R
                            <Linear.V2.V2 Foreign.C.Types.CInt>_N)
                         eta)
                        `cast`
                      (GHC.Types.N:IO[0]
                           <(Linear.V2.V2 Foreign.C.Types.CInt, GameVars.Vars)>_R)
                        eta1 of ds { (#,#) ipv ipv1 ->
                 (# ipv,
                    (case ipv1 of wild { (,) a1 s' ->
                     case a1 of wild1 { Linear.V2.V2 a b ->
                     case a `cast`
                          (Foreign.C.Types.N:CInt[0]) of wild2 { GHC.Int.I32# x# ->
                     case b `cast`
                          (Foreign.C.Types.N:CInt[0]) of wild3 { GHC.Int.I32# x#1 ->
                     Linear.V2.V2
                       @ GHC.Types.Float
                       (GHC.Types.F# (GHC.Prim.int2Float# x#))
                       (GHC.Types.F# (GHC.Prim.int2Float# x#1)) } } } },
                     case ipv1 of wild { (,) a1 s' -> s' }) #) }) -}
478768ca32bbf6d0816250146f1a241b
  $fGuiTransformsMahppyBird2 ::
    SDL.Video.Renderer.Rectangle GHC.Types.Float
    -> GameVars.Config
    -> GameVars.Vars
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          (SDL.Video.Renderer.Rectangle GHC.Types.Float, GameVars.Vars) #)
  {- Arity: 4,
     Strictness: <L,1*U(1*U(U(U),A),1*U(U(U),U(U)))><L,U(U(U),U,U)><L,U><S,U>,
     Unfolding: (\ (rect :: SDL.Video.Renderer.Rectangle
                              GHC.Types.Float)
                   (eta :: GameVars.Config)
                   (eta1 :: GameVars.Vars)
                   (eta2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case (((SDL.Video.OpenGL.glGetDrawableSize
                           @ GameVars.MahppyBird
                           GameVars.$fMonadIOMahppyBird
                           (case eta of wild { GameVars.Config ds1 ds2 ds3 -> ds1 }))
                          `cast`
                        (Trans
                             (GameVars.N:MahppyBird[0] <Linear.V2.V2 Foreign.C.Types.CInt>_N)
                             (Control.Monad.Trans.Reader.N:ReaderT[0]
                                  <*>_N
                                  <GameVars.Config>_R
                                  <Control.Monad.Trans.State.Lazy.StateT
                                     GameVars.Vars GHC.Types.IO>_R
                                  <Linear.V2.V2 Foreign.C.Types.CInt>_N))
                          eta)
                         `cast`
                       (Control.Monad.Trans.State.Lazy.N:StateT[0]
                            <GameVars.Vars>_N
                            <GHC.Types.IO>_R
                            <Linear.V2.V2 Foreign.C.Types.CInt>_N)
                         eta1)
                        `cast`
                      (GHC.Types.N:IO[0]
                           <(Linear.V2.V2 Foreign.C.Types.CInt, GameVars.Vars)>_R)
                        eta2 of ds { (#,#) ipv ipv1 ->
                 case ipv1 of wild { (,) a1 s' ->
                 case a1 of wild1 { Linear.V2.V2 a b ->
                 case b `cast`
                      (Foreign.C.Types.N:CInt[0]) of wild2 { GHC.Int.I32# x# ->
                 (# ipv,
                    (let {
                       ds1 :: (GHC.Types.Float, GHC.Types.Float, GHC.Types.Float)
                       = case rect of wild3 { SDL.Video.Renderer.Rectangle ds2 ds3 ->
                         case ds2
                                `cast`
                              (Linear.Affine.N:Point[0]
                                   <Linear.V2.V2>_R <GHC.Types.Float>_N) of wild4 { Linear.V2.V2 x ds4 ->
                         case ds3 of wild5 { Linear.V2.V2 width height ->
                         (x, width, height) } } }
                     } in
                     let {
                       height :: GHC.Types.Float
                       = case ds1 of ds2 { (,,) x width height1 -> height1 }
                     } in
                     SDL.Video.Renderer.Rectangle
                       @ GHC.Types.Float
                       (case ds1 of ds2 { (,,) x width height1 ->
                        case x of dt { GHC.Types.F# ipv2 ->
                        case height of wild3 { GHC.Types.F# y ->
                        (Linear.V2.V2
                           @ GHC.Types.Float
                           dt
                           (GHC.Types.F# (GHC.Prim.minusFloat# (GHC.Prim.int2Float# x#) y)))
                          `cast`
                        (Sym (Linear.Affine.N:Point[0]
                                  <Linear.V2.V2>_R) <GHC.Types.Float>_N) } } })
                       (case ds1 of ds2 { (,,) x width height1 ->
                        case width of dt { GHC.Types.F# ipv2 ->
                        case height of dt1 { GHC.Types.F# ipv3 ->
                        Linear.V2.V2 @ GHC.Types.Float dt dt1 } } }),
                     s') #) } } } }) -}
6237251b69f71742234c60cecaf8016a
  $fGuiTransformsMahppyBird3 ::
    SDL.Video.Renderer.Rectangle GHC.Types.Float
    -> GameVars.Config
    -> GameVars.Vars
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          (SDL.Video.Renderer.Rectangle GHC.Types.Float, GameVars.Vars) #)
  {- Arity: 4,
     Strictness: <L,1*U(1*U(A,U(U)),1*U(U(U),U(U)))><L,U(U(U),U,U)><L,U><S,U>,
     Unfolding: (\ (rect :: SDL.Video.Renderer.Rectangle
                              GHC.Types.Float)
                   (eta :: GameVars.Config)
                   (eta1 :: GameVars.Vars)
                   (eta2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case (((SDL.Video.OpenGL.glGetDrawableSize
                           @ GameVars.MahppyBird
                           GameVars.$fMonadIOMahppyBird
                           (case eta of wild { GameVars.Config ds1 ds2 ds3 -> ds1 }))
                          `cast`
                        (Trans
                             (GameVars.N:MahppyBird[0] <Linear.V2.V2 Foreign.C.Types.CInt>_N)
                             (Control.Monad.Trans.Reader.N:ReaderT[0]
                                  <*>_N
                                  <GameVars.Config>_R
                                  <Control.Monad.Trans.State.Lazy.StateT
                                     GameVars.Vars GHC.Types.IO>_R
                                  <Linear.V2.V2 Foreign.C.Types.CInt>_N))
                          eta)
                         `cast`
                       (Control.Monad.Trans.State.Lazy.N:StateT[0]
                            <GameVars.Vars>_N
                            <GHC.Types.IO>_R
                            <Linear.V2.V2 Foreign.C.Types.CInt>_N)
                         eta1)
                        `cast`
                      (GHC.Types.N:IO[0]
                           <(Linear.V2.V2 Foreign.C.Types.CInt, GameVars.Vars)>_R)
                        eta2 of ds { (#,#) ipv ipv1 ->
                 case ipv1 of wild { (,) a1 s' ->
                 case a1 of wild1 { Linear.V2.V2 a b ->
                 case a `cast`
                      (Foreign.C.Types.N:CInt[0]) of wild2 { GHC.Int.I32# x# ->
                 (# ipv,
                    (let {
                       ds1 :: (GHC.Types.Float, GHC.Types.Float, GHC.Types.Float)
                       = case rect of wild3 { SDL.Video.Renderer.Rectangle ds2 ds3 ->
                         case ds2
                                `cast`
                              (Linear.Affine.N:Point[0]
                                   <Linear.V2.V2>_R <GHC.Types.Float>_N) of wild4 { Linear.V2.V2 ds4 y ->
                         case ds3 of wild5 { Linear.V2.V2 width height ->
                         (y, width, height) } } }
                     } in
                     let {
                       width :: GHC.Types.Float
                       = case ds1 of ds2 { (,,) y width1 height -> width1 }
                     } in
                     SDL.Video.Renderer.Rectangle
                       @ GHC.Types.Float
                       (case width of wild3 { GHC.Types.F# y ->
                        case ds1 of ds2 { (,,) y1 width1 height ->
                        case y1 of dt { GHC.Types.F# ipv2 ->
                        (Linear.V2.V2
                           @ GHC.Types.Float
                           (GHC.Types.F# (GHC.Prim.minusFloat# (GHC.Prim.int2Float# x#) y))
                           dt)
                          `cast`
                        (Sym (Linear.Affine.N:Point[0]
                                  <Linear.V2.V2>_R) <GHC.Types.Float>_N) } } })
                       (case width of dt { GHC.Types.F# ipv2 ->
                        case ds1 of ds2 { (,,) y width1 height ->
                        case height of dt1 { GHC.Types.F# ipv3 ->
                        Linear.V2.V2 @ GHC.Types.Float dt dt1 } } }),
                     s') #) } } } }) -}
640c923f3641aae5d67bd64ec73db791
  $fGuiTransformsMahppyBird4 ::
    SDL.Video.Renderer.Rectangle GHC.Types.Float
    -> GameVars.Config
    -> GameVars.Vars
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          (SDL.Video.Renderer.Rectangle GHC.Types.Float, GameVars.Vars) #)
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,1*U(1*U(A,U(U)),1*U(U(U),U(U)))><L,A><L,U><S,U>,
     Inline: [0],
     Unfolding: InlineRule (4, True, True)
                (\ (w :: SDL.Video.Renderer.Rectangle GHC.Types.Float)
                   (w1 :: GameVars.Config)
                   (w2 :: GameVars.Vars)
                   (w3 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 GuiTransforms.$w$calignToLeftEdge w w2 w3) -}
a13abf178d5510e86cf38e8312e34309
  $fGuiTransformsMahppyBird5 :: GHC.Types.Float
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.F# 0.0#) -}
ab0b7cdd78dc39f17d765ed61d584ad0
  $fGuiTransformsMahppyBird6 ::
    SDL.Video.Renderer.Rectangle GHC.Types.Float
    -> GameVars.Config
    -> GameVars.Vars
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          (SDL.Video.Renderer.Rectangle GHC.Types.Float, GameVars.Vars) #)
  {- Arity: 4,
     Strictness: <L,1*U(1*U(U(U),A),1*U(U(U),U(U)))><L,U(U(U),U,U)><L,U><S,U>,
     Unfolding: (\ (rect :: SDL.Video.Renderer.Rectangle
                              GHC.Types.Float)
                   (eta :: GameVars.Config)
                   (eta1 :: GameVars.Vars)
                   (eta2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case (((SDL.Video.OpenGL.glGetDrawableSize
                           @ GameVars.MahppyBird
                           GameVars.$fMonadIOMahppyBird
                           (case eta of wild { GameVars.Config ds1 ds2 ds3 -> ds1 }))
                          `cast`
                        (Trans
                             (GameVars.N:MahppyBird[0] <Linear.V2.V2 Foreign.C.Types.CInt>_N)
                             (Control.Monad.Trans.Reader.N:ReaderT[0]
                                  <*>_N
                                  <GameVars.Config>_R
                                  <Control.Monad.Trans.State.Lazy.StateT
                                     GameVars.Vars GHC.Types.IO>_R
                                  <Linear.V2.V2 Foreign.C.Types.CInt>_N))
                          eta)
                         `cast`
                       (Control.Monad.Trans.State.Lazy.N:StateT[0]
                            <GameVars.Vars>_N
                            <GHC.Types.IO>_R
                            <Linear.V2.V2 Foreign.C.Types.CInt>_N)
                         eta1)
                        `cast`
                      (GHC.Types.N:IO[0]
                           <(Linear.V2.V2 Foreign.C.Types.CInt, GameVars.Vars)>_R)
                        eta2 of ds { (#,#) ipv ipv1 ->
                 case ipv1 of wild { (,) a1 s' ->
                 case a1 of wild1 { Linear.V2.V2 a b ->
                 case b `cast`
                      (Foreign.C.Types.N:CInt[0]) of wild2 { GHC.Int.I32# x# ->
                 (# ipv,
                    (let {
                       ds1 :: (GHC.Types.Float, GHC.Types.Float, GHC.Types.Float)
                       = case rect of wild3 { SDL.Video.Renderer.Rectangle ds2 ds3 ->
                         case ds2
                                `cast`
                              (Linear.Affine.N:Point[0]
                                   <Linear.V2.V2>_R <GHC.Types.Float>_N) of wild4 { Linear.V2.V2 x ds4 ->
                         case ds3 of wild5 { Linear.V2.V2 width height ->
                         (x, width, height) } } }
                     } in
                     let {
                       height :: GHC.Types.Float
                       = case ds1 of ds2 { (,,) x width height1 -> height1 }
                     } in
                     SDL.Video.Renderer.Rectangle
                       @ GHC.Types.Float
                       (case ds1 of ds2 { (,,) x width height1 ->
                        case x of dt { GHC.Types.F# ipv2 ->
                        case height of wild3 { GHC.Types.F# x1 ->
                        (Linear.V2.V2
                           @ GHC.Types.Float
                           dt
                           (GHC.Types.F#
                              (GHC.Prim.minusFloat#
                                 (GHC.Prim.divideFloat# (GHC.Prim.int2Float# x#) 2.0#)
                                 (GHC.Prim.divideFloat# x1 2.0#))))
                          `cast`
                        (Sym (Linear.Affine.N:Point[0]
                                  <Linear.V2.V2>_R) <GHC.Types.Float>_N) } } })
                       (case ds1 of ds2 { (,,) x width height1 ->
                        case width of dt { GHC.Types.F# ipv2 ->
                        case height of dt1 { GHC.Types.F# ipv3 ->
                        Linear.V2.V2 @ GHC.Types.Float dt dt1 } } }),
                     s') #) } } } }) -}
bf58e839120d00665505701c6db97884
  $fGuiTransformsMahppyBird7 ::
    SDL.Video.Renderer.Rectangle GHC.Types.Float
    -> GameVars.Config
    -> GameVars.Vars
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          (SDL.Video.Renderer.Rectangle GHC.Types.Float, GameVars.Vars) #)
  {- Arity: 4,
     Strictness: <L,1*U(1*U(A,U(U)),1*U(U(U),U(U)))><L,U(U(U),U,U)><L,U><S,U>,
     Unfolding: (\ (rect :: SDL.Video.Renderer.Rectangle
                              GHC.Types.Float)
                   (eta :: GameVars.Config)
                   (eta1 :: GameVars.Vars)
                   (eta2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case (((SDL.Video.OpenGL.glGetDrawableSize
                           @ GameVars.MahppyBird
                           GameVars.$fMonadIOMahppyBird
                           (case eta of wild { GameVars.Config ds1 ds2 ds3 -> ds1 }))
                          `cast`
                        (Trans
                             (GameVars.N:MahppyBird[0] <Linear.V2.V2 Foreign.C.Types.CInt>_N)
                             (Control.Monad.Trans.Reader.N:ReaderT[0]
                                  <*>_N
                                  <GameVars.Config>_R
                                  <Control.Monad.Trans.State.Lazy.StateT
                                     GameVars.Vars GHC.Types.IO>_R
                                  <Linear.V2.V2 Foreign.C.Types.CInt>_N))
                          eta)
                         `cast`
                       (Control.Monad.Trans.State.Lazy.N:StateT[0]
                            <GameVars.Vars>_N
                            <GHC.Types.IO>_R
                            <Linear.V2.V2 Foreign.C.Types.CInt>_N)
                         eta1)
                        `cast`
                      (GHC.Types.N:IO[0]
                           <(Linear.V2.V2 Foreign.C.Types.CInt, GameVars.Vars)>_R)
                        eta2 of ds { (#,#) ipv ipv1 ->
                 case ipv1 of wild { (,) a1 s' ->
                 case a1 of wild1 { Linear.V2.V2 a b ->
                 case a `cast`
                      (Foreign.C.Types.N:CInt[0]) of wild2 { GHC.Int.I32# x# ->
                 (# ipv,
                    (let {
                       ds1 :: (GHC.Types.Float, GHC.Types.Float, GHC.Types.Float)
                       = case rect of wild3 { SDL.Video.Renderer.Rectangle ds2 ds3 ->
                         case ds2
                                `cast`
                              (Linear.Affine.N:Point[0]
                                   <Linear.V2.V2>_R <GHC.Types.Float>_N) of wild4 { Linear.V2.V2 ds4 y ->
                         case ds3 of wild5 { Linear.V2.V2 width height ->
                         (y, width, height) } } }
                     } in
                     let {
                       width :: GHC.Types.Float
                       = case ds1 of ds2 { (,,) y width1 height -> width1 }
                     } in
                     SDL.Video.Renderer.Rectangle
                       @ GHC.Types.Float
                       (case width of wild3 { GHC.Types.F# x ->
                        case ds1 of ds2 { (,,) y width1 height ->
                        case y of dt { GHC.Types.F# ipv2 ->
                        (Linear.V2.V2
                           @ GHC.Types.Float
                           (GHC.Types.F#
                              (GHC.Prim.minusFloat#
                                 (GHC.Prim.divideFloat# (GHC.Prim.int2Float# x#) 2.0#)
                                 (GHC.Prim.divideFloat# x 2.0#)))
                           dt)
                          `cast`
                        (Sym (Linear.Affine.N:Point[0]
                                  <Linear.V2.V2>_R) <GHC.Types.Float>_N) } } })
                       (case width of dt { GHC.Types.F# ipv2 ->
                        case ds1 of ds2 { (,,) y width1 height ->
                        case height of dt1 { GHC.Types.F# ipv3 ->
                        Linear.V2.V2 @ GHC.Types.Float dt dt1 } } }),
                     s') #) } } } }) -}
129c5fdeaff2d616e9b7e2bf86d65c7e
  $tc'C:GuiTransforms :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12696765188908455512##
                   8972678945105531180##
                   GuiTransforms.$trModule
                   GuiTransforms.$tc'C:GuiTransforms2
                   1#
                   GuiTransforms.$tc'C:GuiTransforms1) -}
89a75f03f51d8a2ee2c95ccde5303c6d
  $tc'C:GuiTransforms1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
d236d1208b6c7672f5d48fec524542e5
  $tc'C:GuiTransforms2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   GuiTransforms.$tc'C:GuiTransforms3) -}
56ec63833dece77a74ec0f539177bcb8
  $tc'C:GuiTransforms3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'C:GuiTransforms"#) -}
a2508c29b3d0a1c779e21edcb4be07f5
  $tcGuiTransforms :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14640655829970404532##
                   1178779777511169901##
                   GuiTransforms.$trModule
                   GuiTransforms.$trModule1
                   0#
                   GuiTransforms.$tcGuiTransforms1) -}
eb5aa1f2b66257c8b01b77a9478f8fe9
  $tcGuiTransforms1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
38ad4bc922d59d615a52b88f79220ec9
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   GuiTransforms.$trModule3
                   GuiTransforms.$trModule1) -}
5c9f156164f0044ef0b11b7f191e1db2
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS GuiTransforms.$trModule2) -}
cd5bc039e2a572e66df70e962b7c7d9f
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("GuiTransforms"#) -}
c0808a7d74e92d1fd5ee1ef21ca10c8b
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS GuiTransforms.$trModule4) -}
a6ed6db91ee6c4a59f1bbb858d3fda38
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("main"#) -}
4d729bfc4528983a8a7a4d6ae64a2702
  $w$calignToLeftEdge ::
    SDL.Video.Renderer.Rectangle GHC.Types.Float
    -> GameVars.Vars
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          (SDL.Video.Renderer.Rectangle GHC.Types.Float, GameVars.Vars) #)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(1*U(A,U(U)),1*U(U(U),U(U)))><L,U><S,U>,
     Inline: [0],
     Unfolding: (\ (w :: SDL.Video.Renderer.Rectangle GHC.Types.Float)
                   (w1 :: GameVars.Vars)
                   (w2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 let {
                   ds :: (GHC.Types.Float, GHC.Types.Float, GHC.Types.Float)
                   = case w of wild { SDL.Video.Renderer.Rectangle ds1 ds2 ->
                     case ds1
                            `cast`
                          (Linear.Affine.N:Point[0]
                               <Linear.V2.V2>_R <GHC.Types.Float>_N) of wild1 { Linear.V2.V2 ds3 y ->
                     case ds2 of wild2 { Linear.V2.V2 width height ->
                     (y, width, height) } } }
                 } in
                 (# w2,
                    (SDL.Video.Renderer.Rectangle
                       @ GHC.Types.Float
                       (case ds of ds1 { (,,) y width height ->
                        case y of dt { GHC.Types.F# ipv ->
                        (Linear.V2.V2
                           @ GHC.Types.Float
                           GuiTransforms.$fGuiTransformsMahppyBird5
                           dt)
                          `cast`
                        (Sym (Linear.Affine.N:Point[0]
                                  <Linear.V2.V2>_R) <GHC.Types.Float>_N) } })
                       (case ds of ds1 { (,,) y width height ->
                        case width of dt { GHC.Types.F# ipv ->
                        case height of dt1 { GHC.Types.F# ipv1 ->
                        Linear.V2.V2 @ GHC.Types.Float dt dt1 } } }),
                     w1) #)) -}
bdcfe4d5d5dcc377f267d071dde75fe1
  class GHC.Base.Monad m => GuiTransforms (m :: * -> *) where
    xCenterRectangle :: SDL.Video.Renderer.Rectangle GHC.Types.Float
                        -> m (SDL.Video.Renderer.Rectangle GHC.Types.Float)
    yCenterRectangle :: SDL.Video.Renderer.Rectangle GHC.Types.Float
                        -> m (SDL.Video.Renderer.Rectangle GHC.Types.Float)
    alignToLeftEdge :: SDL.Video.Renderer.Rectangle GHC.Types.Float
                       -> m (SDL.Video.Renderer.Rectangle GHC.Types.Float)
    alignToRightEdge :: SDL.Video.Renderer.Rectangle GHC.Types.Float
                        -> m (SDL.Video.Renderer.Rectangle GHC.Types.Float)
    alignToBottomEdge :: SDL.Video.Renderer.Rectangle GHC.Types.Float
                         -> m (SDL.Video.Renderer.Rectangle GHC.Types.Float)
    getWindowSize :: m (Linear.V2.V2 GHC.Types.Float)
    {-# MINIMAL xCenterRectangle, yCenterRectangle, alignToLeftEdge,
                alignToRightEdge, alignToBottomEdge, getWindowSize #-}
dbc8905213511d9585faf1fabe404d6d
  centerRectangle ::
    GuiTransforms.GuiTransforms m =>
    SDL.Video.Renderer.Rectangle GHC.Types.Float
    -> m (SDL.Video.Renderer.Rectangle GHC.Types.Float)
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(LC(C(S))LLL)LLLLLL),U(1*U(A,1*C1(C1(U)),A,A,A),1*U,1*C1(U),A,A,A,A)><L,U>,
     Unfolding: (\ @ m :: * -> *
                   ($dGuiTransforms :: GuiTransforms.GuiTransforms m)
                   (eta :: SDL.Video.Renderer.Rectangle GHC.Types.Float) ->
                 GHC.Base.>>=
                   @ m
                   (GuiTransforms.$p1GuiTransforms @ m $dGuiTransforms)
                   @ (SDL.Video.Renderer.Rectangle GHC.Types.Float)
                   @ (SDL.Video.Renderer.Rectangle GHC.Types.Float)
                   (GuiTransforms.yCenterRectangle @ m $dGuiTransforms eta)
                   (GuiTransforms.xCenterRectangle @ m $dGuiTransforms)) -}
8df0f20a9af8b27115b4172f5904e382
  translate ::
    Linear.V2.V2 GHC.Types.Float
    -> SDL.Video.Renderer.Rectangle GHC.Types.Float
    -> SDL.Video.Renderer.Rectangle GHC.Types.Float
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SS),1*U(U(U),U(U))><S(S(SS)L),1*U(1*U(U(U),U(U)),U)>m,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Linear.V2.V2 GHC.Types.Float)
                   (w1 :: SDL.Video.Renderer.Rectangle GHC.Types.Float) ->
                 case w of ww { Linear.V2.V2 ww1 ww2 ->
                 case ww1 of ww3 { GHC.Types.F# ww4 ->
                 case ww2 of ww5 { GHC.Types.F# ww6 ->
                 case w1 of ww7 { SDL.Video.Renderer.Rectangle ww8 ww9 ->
                 case ww8
                        `cast`
                      (Linear.Affine.N:Point[0]
                           <Linear.V2.V2>_R <GHC.Types.Float>_N) of ww10 { Linear.V2.V2 ww11 ww12 ->
                 case ww11 of ww13 { GHC.Types.F# ww14 ->
                 case ww12 of ww15 { GHC.Types.F# ww16 ->
                 SDL.Video.Renderer.Rectangle
                   @ GHC.Types.Float
                   (Linear.V2.V2
                      @ GHC.Types.Float
                      (GHC.Types.F# (GHC.Prim.plusFloat# ww4 ww14))
                      (GHC.Types.F# (GHC.Prim.plusFloat# ww6 ww16)))
                     `cast`
                   (Sym (Linear.Affine.N:Point[0]
                             <Linear.V2.V2>_R) <GHC.Types.Float>_N)
                   ww9 } } } } } } }) -}
instance GuiTransforms.GuiTransforms [GameVars.MahppyBird]
  = GuiTransforms.$fGuiTransformsMahppyBird
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

