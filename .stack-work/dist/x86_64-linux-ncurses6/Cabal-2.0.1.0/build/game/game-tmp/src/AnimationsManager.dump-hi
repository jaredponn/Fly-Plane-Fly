
==================== FINAL INTERFACE ====================
2018-06-04 17:45:37.070596084 UTC

interface main:AnimationsManager 8022
  interface hash: 92f83f923e158f1ec8c9c248a8d0b003
  ABI hash: cbf8705999ca4b50005279e8fbbfc640
  export-list hash: 870ab299162042bfa1955a3278127f9e
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 839f3f975377d929d6342740155f98f2
  sig of: Nothing
  used TH splices: False
  where
exports:
  AnimationsManager.AnimationsManager{AnimationsManager.getPlayerAnimationSrc AnimationsManager.getPlayerDeathAnimation AnimationsManager.getPlayerIdleAnimation AnimationsManager.getPlayerJumpAnimation AnimationsManager.prependToPlayerAnimation AnimationsManager.removePlayerAnimationsUpto AnimationsManager.replacePlayerAnimation AnimationsManager.updatePlayerAnimation}
module dependencies: Animations GameVars TimeManager Walls
package dependencies: QuickCheck-2.10.1 Stack-0.3.2
                      StateVar-1.1.1.0 Stream-0.4.7.2 adjunctions-4.4 array-0.5.2.0
                      base-4.10.1.0 base-orphans-0.7 bifunctors-5.5.2 binary-0.8.5.1
                      bytes-0.15.4 bytestring-0.10.8.2 call-stack-0.1.0 cereal-0.5.5.0
                      clock-0.7.2 comonad-5.0.3 containers-0.5.10.2 contravariant-1.4.1
                      data-default-class-0.1.2.0 deepseq-1.4.3.0 distributive-0.5.3
                      exceptions-0.8.3 free-5.0.2 ghc-boot-th-8.2.2 ghc-prim-0.5.1.1
                      hashable-1.2.7.0 integer-gmp-1.0.1.0 integer-logarithms-1.0.2.1
                      kan-extensions-5.1 lazysmallcheck-0.6 lens-4.16.1
                      lifted-base-0.2.3.12 linear-1.20.7 monad-control-1.0.2.3 mtl-2.2.2
                      pretty-1.1.3.3 primitive-0.6.3.0 profunctors-5.2.2 random-1.1
                      reflection-2.1.3 scientific-0.3.6.0 sdl2-2.4.0.1 sdl2-mixer-1.1.0
                      sdl2-ttf-2.0.2 semigroupoids-5.2.2 stm-2.4.5.0 tagged-0.8.5
                      template-haskell-2.12.0.0 text-1.2.3.0 tf-random-0.5
                      th-abstraction-0.2.6.0 time-1.8.0.2 transformers-0.5.2.0
                      transformers-base-0.4.4 transformers-compat-0.5.1.4
                      unordered-containers-0.2.9.0 vector-0.12.0.1
orphans: time-1.8.0.2:Data.Time.Clock.TAI
         reflection-2.1.3:Data.Reflection
         vector-0.12.0.1:Data.Vector.Unboxed
         hashable-1.2.7.0:Data.Hashable.Generic text-1.2.3.0:Data.Text.Lazy
         linear-1.20.7:Linear.Instances base-orphans-0.7:Data.Orphans
         text-1.2.3.0:Data.Text binary-0.8.5.1:Data.Binary.Generic
         text-1.2.3.0:Data.Text.Show
         bytestring-0.10.8.2:Data.ByteString.Builder
         vector-0.12.0.1:Data.Vector.Fusion.Bundle
         stm-2.4.5.0:Control.Monad.STM time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian
         transformers-0.5.2.0:Control.Monad.Trans.Error
         base-4.10.1.0:GHC.Float base-4.10.1.0:GHC.Base
family instance modules: adjunctions-4.4:Data.Functor.Rep
                         base-4.10.1.0:Control.Applicative base-4.10.1.0:Data.Complex
                         base-4.10.1.0:Data.Either base-4.10.1.0:Data.Functor.Compose
                         base-4.10.1.0:Data.Functor.Const
                         base-4.10.1.0:Data.Functor.Identity
                         base-4.10.1.0:Data.Functor.Product base-4.10.1.0:Data.Functor.Sum
                         base-4.10.1.0:Data.List.NonEmpty base-4.10.1.0:Data.Monoid
                         base-4.10.1.0:Data.Semigroup base-4.10.1.0:Data.Type.Equality
                         base-4.10.1.0:Data.Version base-4.10.1.0:Data.Void
                         base-4.10.1.0:GHC.Exts base-4.10.1.0:GHC.Generics
                         base-4.10.1.0:GHC.IO.Exception base-4.10.1.0:GHC.TypeLits
                         base-4.10.1.0:GHC.TypeNats bifunctors-5.5.2:Data.Bifunctor.Biff
                         bifunctors-5.5.2:Data.Bifunctor.Clown
                         bifunctors-5.5.2:Data.Bifunctor.Fix
                         bifunctors-5.5.2:Data.Bifunctor.Flip
                         bifunctors-5.5.2:Data.Bifunctor.Join
                         bifunctors-5.5.2:Data.Bifunctor.Joker
                         bifunctors-5.5.2:Data.Bifunctor.Product
                         bifunctors-5.5.2:Data.Bifunctor.Sum
                         bifunctors-5.5.2:Data.Bifunctor.Tannen
                         bifunctors-5.5.2:Data.Bifunctor.Wrapped bytes-0.15.4:Data.Bytes.Get
                         bytes-0.15.4:Data.Bytes.Signed bytes-0.15.4:Data.Bytes.VarInt
                         clock-0.7.2:System.Clock containers-0.5.10.2:Data.IntMap.Internal
                         containers-0.5.10.2:Data.IntSet.Internal
                         containers-0.5.10.2:Data.Map.Internal
                         containers-0.5.10.2:Data.Sequence.Internal
                         containers-0.5.10.2:Data.Set.Internal containers-0.5.10.2:Data.Tree
                         free-5.0.2:Control.Comonad.Cofree
                         free-5.0.2:Control.Comonad.Trans.Cofree
                         free-5.0.2:Control.Monad.Free free-5.0.2:Control.Monad.Trans.Free
                         ghc-boot-th-8.2.2:GHC.ForeignSrcLang.Type
                         ghc-boot-th-8.2.2:GHC.LanguageExtensions.Type
                         kan-extensions-5.1:Data.Functor.Day
                         kan-extensions-5.1:Data.Functor.Yoneda lens-4.16.1:Control.Lens.At
                         lens-4.16.1:Control.Lens.Internal.Indexed
                         lens-4.16.1:Control.Lens.Reified lens-4.16.1:Control.Lens.Tuple
                         lens-4.16.1:Control.Lens.Wrapped lens-4.16.1:Control.Lens.Zoom
                         linear-1.20.7:Linear.Affine linear-1.20.7:Linear.Plucker
                         linear-1.20.7:Linear.Quaternion linear-1.20.7:Linear.V
                         linear-1.20.7:Linear.V0 linear-1.20.7:Linear.V1
                         linear-1.20.7:Linear.V2 linear-1.20.7:Linear.V3
                         linear-1.20.7:Linear.V4
                         monad-control-1.0.2.3:Control.Monad.Trans.Control
                         pretty-1.1.3.3:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.3:Text.PrettyPrint.HughesPJ
                         primitive-0.6.3.0:Control.Monad.Primitive
                         primitive-0.6.3.0:Data.Primitive.Array
                         primitive-0.6.3.0:Data.Primitive.ByteArray
                         profunctors-5.2.2:Data.Profunctor.Composition
                         profunctors-5.2.2:Data.Profunctor.Rep sdl2-2.4.0.1:SDL.Audio
                         sdl2-2.4.0.1:SDL.Event sdl2-2.4.0.1:SDL.Exception
                         sdl2-2.4.0.1:SDL.Hint sdl2-2.4.0.1:SDL.Init
                         sdl2-2.4.0.1:SDL.Input.GameController
                         sdl2-2.4.0.1:SDL.Input.Joystick sdl2-2.4.0.1:SDL.Input.Keyboard
                         sdl2-2.4.0.1:SDL.Input.Keyboard.Codes sdl2-2.4.0.1:SDL.Input.Mouse
                         sdl2-2.4.0.1:SDL.Internal.Types sdl2-2.4.0.1:SDL.Power
                         sdl2-2.4.0.1:SDL.Time sdl2-2.4.0.1:SDL.Video
                         sdl2-2.4.0.1:SDL.Video.OpenGL sdl2-2.4.0.1:SDL.Video.Renderer
                         sdl2-ttf-2.0.2:SDL.Font tagged-0.8.5:Data.Tagged
                         template-haskell-2.12.0.0:Language.Haskell.TH.Syntax
                         text-1.2.3.0:Data.Text text-1.2.3.0:Data.Text.Lazy
                         th-abstraction-0.2.6.0:Language.Haskell.TH.Datatype
                         unordered-containers-0.2.9.0:Data.HashMap.Base
                         unordered-containers-0.2.9.0:Data.HashSet
                         vector-0.12.0.1:Data.Vector vector-0.12.0.1:Data.Vector.Primitive
                         vector-0.12.0.1:Data.Vector.Storable
                         vector-0.12.0.1:Data.Vector.Unboxed
                         vector-0.12.0.1:Data.Vector.Unboxed.Base
import  -/  base-4.10.1.0:Data.Functor 2ffda4f936b8f474394d93205750aff3
import  -/  base-4.10.1.0:GHC.Base 782fd99b5e36f3698a26179a49afca64
import  -/  base-4.10.1.0:Prelude 31945b7d0084063347fc52506d3a4020
import  -/  lens-4.16.1:Control.Lens d35b54db874b2147b5ffe1d3cd39d59d
import  -/  lens-4.16.1:Control.Lens.Getter be8fceadc62581701bcf558f995a8aa3
import  -/  lens-4.16.1:Control.Lens.Setter 31b5ab0739c579bd36402b436aadb7a0
import  -/  Animations ed8ac26f601711059133f19a17b8411f
  exports: 1b514af753d69c9c6476a9810faf24f0
  AnimationSrcRect bec91fea7b73f18603dba410b765ef72
  AnimationType 75d325ab5ab6cc8ed55716d4c5cca1fe
  addTimeToAnimationHandler cb6c0b28919d2ca754b4060a4c15f940
  headAnimation fff27785a9688aa067cd7d74d0a08e44
  prefixAnimation 0bfd91faffca4cd57d1ed91a604597ec
  removeAnimationsUpto 6b976407c3ca44368d47ddb31df8ac56
  replaceAnimation 4161bc53926f2cd22d2433f927437e83
  updateAnimationHandler 817895427789a9e2fd23f2986d91b90b
import  -/  GameVars 95546c61036798381255e3d7e11311b2
  exports: bffadec9649d88993fa5a790487d46e7
  Config e44e7628e39bfe67c0571be38f0cb139
  MahppyBird fb5607b55373083b420634b0454a4ddb
  Vars 5829ea20be4fb9a24ab87f3fe067aa3c
  cAnimations 3fd248e2074d61cf52350271315c2ced
  cResources e678b7b654c8cae60a2d1262461e631a
  playerAnimationHandler c0a8016eeb612375fb1f7452100c651c
  playerDeathAnimation 20dd5da2e27bacff0b182ae170cc3e81
  playerIdleAnimation 3f8acb5001058db804be180c333dc989
  playerJumpAnimation 41aad7e466f7e7e4a245f84c07c1c830
  vRenderingVars 2d58b68e764b27d35775ee018d600077
import  -/  TimeManager c5a6185a6f35cba82cca87bc7827c727
  exports: 8b2c0f72e07dc8e418f06d3a9f6510ae
  TimeManager 11f819b14b751ed055082b44f160b76d
  getdt e6fb864aaca5b697f52669c64cf5945c
import  -/  mtl-2.2.2:Control.Monad.Reader 8d63edf5dfaf25ad085eae4468bdd77e
import  -/  mtl-2.2.2:Control.Monad.Reader.Class 6d33756d93a5919f9374afec232249f4
import  -/  mtl-2.2.2:Control.Monad.State 4acb2e6037f370fa4b91900d626e6406
import  -/  mtl-2.2.2:Control.Monad.State.Class de8813e114276746770717ab3ee06916
c8e0f589a92aeed99bff1d8d3702265e
  $fAnimationsManagerMahppyBird ::
    AnimationsManager.AnimationsManager GameVars.MahppyBird
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ GameVars.MahppyBird
                  GameVars.$fMonadMahppyBird
                  AnimationsManager.$fAnimationsManagerMahppyBird8
                    `cast`
                  (Trans
                       (<GameVars.Config>_R
                        ->_R Trans
                                 (<GameVars.Vars>_R
                                  ->_R Sym (GHC.Types.N:IO[0]
                                                <(Animations.AnimationSrcRect, GameVars.Vars)>_R))
                                 (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                           <GameVars.Vars>_N
                                           <GHC.Types.IO>_R
                                           <Animations.AnimationSrcRect>_N)))
                       (Trans
                            (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                      <*>_N
                                      <GameVars.Config>_R
                                      <Control.Monad.Trans.State.Lazy.StateT
                                         GameVars.Vars GHC.Types.IO>_R
                                      <Animations.AnimationSrcRect>_N))
                            (Sym (GameVars.N:MahppyBird[0]) <Animations.AnimationSrcRect>_N)))
                  AnimationsManager.$fAnimationsManagerMahppyBird7
                    `cast`
                  (Trans
                       (<GameVars.Config>_R
                        ->_R Trans
                                 (<GameVars.Vars>_R
                                  ->_R Sym (GHC.Types.N:IO[0] <((), GameVars.Vars)>_R))
                                 (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                           <GameVars.Vars>_N <GHC.Types.IO>_R <()>_N)))
                       (Trans
                            (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                      <*>_N
                                      <GameVars.Config>_R
                                      <Control.Monad.Trans.State.Lazy.StateT
                                         GameVars.Vars GHC.Types.IO>_R
                                      <()>_N))
                            (Sym (GameVars.N:MahppyBird[0]) <()>_N)))
                  AnimationsManager.$fAnimationsManagerMahppyBird6
                    `cast`
                  (<Animations.AnimationType>_R
                   ->_R Trans
                            (<GameVars.Config>_R
                             ->_R Trans
                                      (<GameVars.Vars>_R
                                       ->_R Sym (GHC.Types.N:IO[0] <((), GameVars.Vars)>_R))
                                      (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                <GameVars.Vars>_N <GHC.Types.IO>_R <()>_N)))
                            (Trans
                                 (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                           <*>_N
                                           <GameVars.Config>_R
                                           <Control.Monad.Trans.State.Lazy.StateT
                                              GameVars.Vars GHC.Types.IO>_R
                                           <()>_N))
                                 (Sym (GameVars.N:MahppyBird[0]) <()>_N)))
                  AnimationsManager.$fAnimationsManagerMahppyBird5
                    `cast`
                  (<[Animations.AnimationSrcRect]>_R
                   ->_R Trans
                            (<GameVars.Config>_R
                             ->_R Trans
                                      (<GameVars.Vars>_R
                                       ->_R Sym (GHC.Types.N:IO[0] <((), GameVars.Vars)>_R))
                                      (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                <GameVars.Vars>_N <GHC.Types.IO>_R <()>_N)))
                            (Trans
                                 (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                           <*>_N
                                           <GameVars.Config>_R
                                           <Control.Monad.Trans.State.Lazy.StateT
                                              GameVars.Vars GHC.Types.IO>_R
                                           <()>_N))
                                 (Sym (GameVars.N:MahppyBird[0]) <()>_N)))
                  AnimationsManager.$fAnimationsManagerMahppyBird4
                    `cast`
                  (<[Animations.AnimationSrcRect]>_R
                   ->_R Trans
                            (<GameVars.Config>_R
                             ->_R Trans
                                      (<GameVars.Vars>_R
                                       ->_R Sym (GHC.Types.N:IO[0] <((), GameVars.Vars)>_R))
                                      (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                <GameVars.Vars>_N <GHC.Types.IO>_R <()>_N)))
                            (Trans
                                 (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                           <*>_N
                                           <GameVars.Config>_R
                                           <Control.Monad.Trans.State.Lazy.StateT
                                              GameVars.Vars GHC.Types.IO>_R
                                           <()>_N))
                                 (Sym (GameVars.N:MahppyBird[0]) <()>_N)))
                  AnimationsManager.$fAnimationsManagerMahppyBird3
                    `cast`
                  (Trans
                       (<GameVars.Config>_R
                        ->_R Trans
                                 (<GameVars.Vars>_R
                                  ->_R Sym (GHC.Types.N:IO[0]
                                                <([Animations.AnimationSrcRect], GameVars.Vars)>_R))
                                 (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                           <GameVars.Vars>_N
                                           <GHC.Types.IO>_R
                                           <[Animations.AnimationSrcRect]>_N)))
                       (Trans
                            (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                      <*>_N
                                      <GameVars.Config>_R
                                      <Control.Monad.Trans.State.Lazy.StateT
                                         GameVars.Vars GHC.Types.IO>_R
                                      <[Animations.AnimationSrcRect]>_N))
                            (Sym (GameVars.N:MahppyBird[0]) <[Animations.AnimationSrcRect]>_N)))
                  AnimationsManager.$fAnimationsManagerMahppyBird2
                    `cast`
                  (Trans
                       (<GameVars.Config>_R
                        ->_R Trans
                                 (<GameVars.Vars>_R
                                  ->_R Sym (GHC.Types.N:IO[0]
                                                <([Animations.AnimationSrcRect], GameVars.Vars)>_R))
                                 (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                           <GameVars.Vars>_N
                                           <GHC.Types.IO>_R
                                           <[Animations.AnimationSrcRect]>_N)))
                       (Trans
                            (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                      <*>_N
                                      <GameVars.Config>_R
                                      <Control.Monad.Trans.State.Lazy.StateT
                                         GameVars.Vars GHC.Types.IO>_R
                                      <[Animations.AnimationSrcRect]>_N))
                            (Sym (GameVars.N:MahppyBird[0]) <[Animations.AnimationSrcRect]>_N)))
                  AnimationsManager.$fAnimationsManagerMahppyBird1
                    `cast`
                  (Trans
                       (<GameVars.Config>_R
                        ->_R Trans
                                 (<GameVars.Vars>_R
                                  ->_R Sym (GHC.Types.N:IO[0]
                                                <([Animations.AnimationSrcRect], GameVars.Vars)>_R))
                                 (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                           <GameVars.Vars>_N
                                           <GHC.Types.IO>_R
                                           <[Animations.AnimationSrcRect]>_N)))
                       (Trans
                            (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                      <*>_N
                                      <GameVars.Config>_R
                                      <Control.Monad.Trans.State.Lazy.StateT
                                         GameVars.Vars GHC.Types.IO>_R
                                      <[Animations.AnimationSrcRect]>_N))
                            (Sym (GameVars.N:MahppyBird[0]) <[Animations.AnimationSrcRect]>_N))) -}
583e2b2e80be8c1a818c664c0b4c23bd
  $fAnimationsManagerMahppyBird1 ::
    GameVars.Config
    -> GameVars.Vars
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ([Animations.AnimationSrcRect], GameVars.Vars) #)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(A,A,1*U(A,A,1*U(1*U,A,A),A))><L,U><S,U>,
     Unfolding: InlineRule (3, True, False)
                (\ (x :: GameVars.Config)
                   (eta :: GameVars.Vars)
                   (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 (# eta1,
                    (case x of wild { GameVars.Config x1 x2 x3 ->
                     case x3 of wild1 { GameVars.Resources x4 x5 x6 x7 ->
                     case x6 of wild2 { GameVars.Animations x8 x9 x10 -> x8 } } },
                     eta) #)) -}
c8620c5bb235be0ca31c3e04f99fa30f
  $fAnimationsManagerMahppyBird2 ::
    GameVars.Config
    -> GameVars.Vars
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ([Animations.AnimationSrcRect], GameVars.Vars) #)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(A,A,1*U(A,A,1*U(A,A,1*U),A))><L,U><S,U>,
     Unfolding: InlineRule (3, True, False)
                (\ (x :: GameVars.Config)
                   (eta :: GameVars.Vars)
                   (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 (# eta1,
                    (case x of wild { GameVars.Config x1 x2 x3 ->
                     case x3 of wild1 { GameVars.Resources x4 x5 x6 x7 ->
                     case x6 of wild2 { GameVars.Animations x8 x9 x10 -> x10 } } },
                     eta) #)) -}
d32bc72f0ef9ce2851acb5c12dc12dcc
  $fAnimationsManagerMahppyBird3 ::
    GameVars.Config
    -> GameVars.Vars
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ([Animations.AnimationSrcRect], GameVars.Vars) #)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(A,A,1*U(A,A,1*U(A,1*U,A),A))><L,U><S,U>,
     Unfolding: InlineRule (3, True, False)
                (\ (x :: GameVars.Config)
                   (eta :: GameVars.Vars)
                   (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 (# eta1,
                    (case x of wild { GameVars.Config x1 x2 x3 ->
                     case x3 of wild1 { GameVars.Resources x4 x5 x6 x7 ->
                     case x6 of wild2 { GameVars.Animations x8 x9 x10 -> x9 } } },
                     eta) #)) -}
44e3f5536853855a0f8bf639a7c8d999
  $fAnimationsManagerMahppyBird4 ::
    [Animations.AnimationSrcRect]
    -> GameVars.Config
    -> GameVars.Vars
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, ((), GameVars.Vars) #)
  {- Arity: 4,
     Strictness: <L,1*U><L,A><L,1*U(U,U,1*U(1*U(U(U,U),U,U),U,U,U,U,U),U,U,U)><S,U>,
     Unfolding: InlineRule (4, True, False)
                (\ (animations :: [Animations.AnimationSrcRect])
                   (eta :: GameVars.Config)
                   (eta1 :: GameVars.Vars)
                   (eta2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 (# eta2,
                    (GHC.Tuple.(),
                     case eta1 of wild { GameVars.Vars x1 x2 x3 x4 dt1 dt2 ->
                     GameVars.Vars
                       x1
                       x2
                       (case x3 of wild1 { GameVars.RenderingVars x7 dt4 dt5 dt3 dt6 dt7 ->
                        GameVars.RenderingVars
                          (Animations.replaceAnimation animations x7)
                          dt4
                          dt5
                          dt3
                          dt6
                          dt7 })
                       x4
                       dt1
                       dt2 }) #)) -}
cae7ac2680e591c43fe586a53bc44f30
  $fAnimationsManagerMahppyBird5 ::
    [Animations.AnimationSrcRect]
    -> GameVars.Config
    -> GameVars.Vars
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, ((), GameVars.Vars) #)
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,1*U><L,A><L,1*U(U,U,1*U(1*U(U(U,U),U,U),U,U,U,U,U),U,U,U)><S,U>,
     Unfolding: InlineRule (4, True, False)
                (\ (animations :: [Animations.AnimationSrcRect])
                   (eta :: GameVars.Config)
                   (eta1 :: GameVars.Vars)
                   (eta2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 (# eta2,
                    (GHC.Tuple.(),
                     case eta1 of wild { GameVars.Vars x1 x2 x3 x4 dt1 dt2 ->
                     GameVars.Vars
                       x1
                       x2
                       (case x3 of wild1 { GameVars.RenderingVars x7 dt4 dt5 dt3 dt6 dt7 ->
                        GameVars.RenderingVars
                          (Animations.prefixAnimation animations x7)
                          dt4
                          dt5
                          dt3
                          dt6
                          dt7 })
                       x4
                       dt1
                       dt2 }) #)) -}
064c3d8523d615d346eccdd9b6121d76
  $fAnimationsManagerMahppyBird6 ::
    Animations.AnimationType
    -> GameVars.Config
    -> GameVars.Vars
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, ((), GameVars.Vars) #)
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,U><L,A><L,1*U(U,U,1*U(1*U(1*U(U,U),U,U),U,U,U,U,U),U,U,U)><S,U>,
     Inline: [0],
     Unfolding: InlineRule (4, True, True)
                (\ (w :: Animations.AnimationType)
                   (w1 :: GameVars.Config)
                   (w2 :: GameVars.Vars)
                   (w3 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 AnimationsManager.$w$cremovePlayerAnimationsUpto w w2 w3) -}
2b4ba237eaab5b75cd30b929043feb25
  $fAnimationsManagerMahppyBird7 ::
    GameVars.Config
    -> GameVars.Vars
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, ((), GameVars.Vars) #)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,A><L,1*U(U,U,1*U(1*U(U(U,U),1*U(U),1*U(U)),U,U,U,U,U),U,U,U)><S,U>,
     Inline: [0],
     Unfolding: InlineRule (3, True, True)
                (\ (w :: GameVars.Config)
                   (w1 :: GameVars.Vars)
                   (w2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 AnimationsManager.$w$cupdatePlayerAnimation w1 w2) -}
bd2c47be6001197d63e34471121988c6
  $fAnimationsManagerMahppyBird8 ::
    GameVars.Config
    -> GameVars.Vars
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          (Animations.AnimationSrcRect, GameVars.Vars) #)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,A><L,U(U,U,U(U(U(U,U),U,U),U,U,U,U,U),U,U,U)><S,U>,
     Unfolding: InlineRule (3, True, False)
                (\ (x :: GameVars.Config)
                   (eta :: GameVars.Vars)
                   (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 (# eta1,
                    (case eta of wild { GameVars.Vars x1 x2 x3 x4 dt1 dt2 ->
                     case x3 of wild1 { GameVars.RenderingVars x7 dt4 dt5 dt3 dt6 dt7 ->
                     case x7 of wild2 { Animations.AnimationHandler ds ds1 ds2 ->
                     case ds of wild3 { Data.Stream.Cons x8 ds3 -> x8 } } } },
                     eta) #)) -}
b1b4f89605b60fe2e1f6eb33b6c2dfc7
  $tc'C:AnimationsManager :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2838673794868740082##
                   5461336819773257872##
                   AnimationsManager.$trModule
                   AnimationsManager.$tc'C:AnimationsManager2
                   1#
                   AnimationsManager.$tc'C:AnimationsManager1) -}
146e40d7256ddc1da246a191425078fe
  $tc'C:AnimationsManager1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
bcb77f503d8d7e6bf730569a91463b84
  $tc'C:AnimationsManager2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   AnimationsManager.$tc'C:AnimationsManager3) -}
54842a6b5a1f325346396c03ecba7885
  $tc'C:AnimationsManager3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'C:AnimationsManager"#) -}
c0f52d7f9173b87ba44fd6c5ea2918fe
  $tcAnimationsManager :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16925709724372743250##
                   8058177107426000432##
                   AnimationsManager.$trModule
                   AnimationsManager.$trModule1
                   0#
                   AnimationsManager.$tcAnimationsManager1) -}
962752379a58ce25743251335d50dc8f
  $tcAnimationsManager1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
dcc52bb6712b3cce98b5421520fc14b3
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   AnimationsManager.$trModule3
                   AnimationsManager.$trModule1) -}
d1f71cc6c84433877a4b243ece4ace05
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS AnimationsManager.$trModule2) -}
bc430423410e807688ea571b685ee791
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("AnimationsManager"#) -}
78d568489fd04f24383a52d40cd283bd
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS AnimationsManager.$trModule4) -}
cb86891ec34bfec2a4f1abe31c9d28e2
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("main"#) -}
a0e7beab9359d50ed7a3710c4e50decd
  $w$cremovePlayerAnimationsUpto ::
    Animations.AnimationType
    -> GameVars.Vars
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, ((), GameVars.Vars) #)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U><L,1*U(U,U,1*U(1*U(1*U(U,U),U,U),U,U,U,U,U),U,U,U)><S,U>,
     Inline: [0],
     Unfolding: (\ (w :: Animations.AnimationType)
                   (w1 :: GameVars.Vars)
                   (w2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 (# w2,
                    (GHC.Tuple.(),
                     case w1 of wild { GameVars.Vars x1 x2 x3 x4 dt1 dt2 ->
                     GameVars.Vars
                       x1
                       x2
                       (case x3 of wild1 { GameVars.RenderingVars x7 dt4 dt5 dt3 dt6 dt7 ->
                        GameVars.RenderingVars
                          (case x7 of wild2 { Animations.AnimationHandler ds ds1 ds2 ->
                           Animations.AnimationHandler
                             (case ds of ww { Data.Stream.Cons ww1 ww2 ->
                              case Animations.$wdropWhile
                                     (\ (ds3 :: Animations.AnimationType) ->
                                      Animations.$fEqAnimationType_$c/= ds3 w)
                                     ww1
                                     ww2 of ww3 { (#,#) ww4 ww5 ->
                              Data.Stream.Cons @ Animations.AnimationSrcRect ww4 ww5 } })
                             ds1
                             ds2 })
                          dt4
                          dt5
                          dt3
                          dt6
                          dt7 })
                       x4
                       dt1
                       dt2 }) #)) -}
20e84f56c16e5641e4cd878e14184ce5
  $w$cupdatePlayerAnimation ::
    GameVars.Vars
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, ((), GameVars.Vars) #)
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,1*U(U,U,1*U(1*U(U(U,U),1*U(U),1*U(U)),U,U,U,U,U),U,U,U)><S,U>,
     Inline: [0],
     Unfolding: (\ (w :: GameVars.Vars)
                   (w1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 (# w1,
                    (GHC.Tuple.(),
                     case w of wild { GameVars.Vars x1 x2 x3 x4 dt1 dt2 ->
                     GameVars.Vars
                       x1
                       x2
                       (case x3 of wild1 { GameVars.RenderingVars x7 dt4 dt5 dt3 dt6 dt7 ->
                        GameVars.RenderingVars
                          (case x7 of wild2 { Animations.AnimationHandler ds ds1 ds2 ->
                           case ds2 of wild3 { GHC.Types.F# y ->
                           case ds1 of wild4 { GHC.Types.F# y1 ->
                           let {
                             x :: GHC.Prim.Float# = GHC.Prim.plusFloat# dt1 y
                           } in
                           case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.geFloat# x y1) of wild5 {
                             GHC.Types.False
                             -> Animations.AnimationHandler ds wild4 (GHC.Types.F# x)
                             GHC.Types.True
                             -> Animations.AnimationHandler
                                  (case ds of wild6 { Data.Stream.Cons ds3 xs -> xs })
                                  wild4
                                  Animations.createAnimationHandler1 } } } })
                          dt4
                          dt5
                          dt3
                          dt6
                          dt7 })
                       x4
                       dt1
                       dt2 }) #)) -}
c8e0f589a92aeed99bff1d8d3702265e
  class GHC.Base.Monad m => AnimationsManager (m :: * -> *) where
    getPlayerAnimationSrc :: m Animations.AnimationSrcRect
    updatePlayerAnimation :: m ()
    removePlayerAnimationsUpto :: Animations.AnimationType -> m ()
    prependToPlayerAnimation :: [Animations.AnimationSrcRect] -> m ()
    replacePlayerAnimation :: [Animations.AnimationSrcRect] -> m ()
    getPlayerJumpAnimation :: m [Animations.AnimationSrcRect]
    getPlayerDeathAnimation :: m [Animations.AnimationSrcRect]
    getPlayerIdleAnimation :: m [Animations.AnimationSrcRect]
    {-# MINIMAL getPlayerAnimationSrc, updatePlayerAnimation,
                removePlayerAnimationsUpto, prependToPlayerAnimation,
                replacePlayerAnimation, getPlayerJumpAnimation,
                getPlayerDeathAnimation, getPlayerIdleAnimation #-}
instance AnimationsManager.AnimationsManager [GameVars.MahppyBird]
  = AnimationsManager.$fAnimationsManagerMahppyBird
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

