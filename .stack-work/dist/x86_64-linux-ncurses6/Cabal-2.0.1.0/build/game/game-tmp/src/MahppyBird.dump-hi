
==================== FINAL INTERFACE ====================
2018-06-05 00:37:32.128475801 UTC

interface main:MahppyBird 8022
  interface hash: d1c23612fc57f2bc8d38174291aa3ba2
  ABI hash: 3445e2649efd26e8da04f64be8d4ee9c
  export-list hash: a38502fa03c8c23b93cca96706eb6fff
  orphan hash: e494f76a8661a5045de97cdf360acefa
  flag hash: c5e2e909636c33a525d7032af0f021a5
  sig of: Nothing
  used TH splices: False
  where
exports:
  MahppyBird.loop
  MahppyBird.runMahppyBird
  GameVars.MahppyBird{GameVars.MahppyBird}
module dependencies: Aabb Animations AnimationsManager Buttons
                     CameraManager GameStateManager GameVars GuiTransforms InitGameVars
                     Input Logger Physics PlayerManager Renderer ScoreManager
                     SoundManager TimeManager Util WallManager Walls
package dependencies: QuickCheck-2.10.1 Stack-0.3.2
                      StateVar-1.1.1.0 Stream-0.4.7.2 adjunctions-4.4 array-0.5.2.0
                      base-4.10.1.0 base-orphans-0.7 bifunctors-5.5.2 binary-0.8.5.1
                      bytes-0.15.4 bytestring-0.10.8.2 call-stack-0.1.0 cereal-0.5.5.0
                      clock-0.7.2 comonad-5.0.3 containers-0.5.10.2 contravariant-1.4.1
                      data-default-class-0.1.2.0 deepseq-1.4.3.0 distributive-0.5.3
                      exceptions-0.8.3 filepath-1.4.1.2 free-5.0.2 ghc-boot-th-8.2.2
                      ghc-prim-0.5.1.1 hashable-1.2.7.0 integer-gmp-1.0.1.0
                      integer-logarithms-1.0.2.1 kan-extensions-5.1 lazysmallcheck-0.6
                      lens-4.16.1 lifted-base-0.2.3.12 linear-1.20.7
                      monad-control-1.0.2.3 mtl-2.2.2 pretty-1.1.3.3 primitive-0.6.3.0
                      profunctors-5.2.2 random-1.1 reflection-2.1.3 scientific-0.3.6.0
                      sdl2-2.4.0.1 sdl2-image-2.0.0 sdl2-mixer-1.1.0 sdl2-ttf-2.0.2
                      semigroupoids-5.2.2 stm-2.4.5.0 tagged-0.8.5
                      template-haskell-2.12.0.0 text-1.2.3.0 tf-random-0.5
                      th-abstraction-0.2.6.0 time-1.8.0.2 transformers-0.5.2.0
                      transformers-base-0.4.4 transformers-compat-0.5.1.4
                      unordered-containers-0.2.9.0 vector-0.12.0.1
orphans: time-1.8.0.2:Data.Time.Clock.TAI
         reflection-2.1.3:Data.Reflection
         vector-0.12.0.1:Data.Vector.Unboxed
         hashable-1.2.7.0:Data.Hashable.Generic text-1.2.3.0:Data.Text.Lazy
         linear-1.20.7:Linear.Instances base-orphans-0.7:Data.Orphans
         text-1.2.3.0:Data.Text binary-0.8.5.1:Data.Binary.Generic
         text-1.2.3.0:Data.Text.Show
         bytestring-0.10.8.2:Data.ByteString.Builder
         vector-0.12.0.1:Data.Vector.Fusion.Bundle
         stm-2.4.5.0:Control.Monad.STM time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian
         transformers-0.5.2.0:Control.Monad.Trans.Error
         base-4.10.1.0:GHC.Float base-4.10.1.0:GHC.Base
family instance modules: adjunctions-4.4:Data.Functor.Rep
                         base-4.10.1.0:Control.Applicative base-4.10.1.0:Data.Complex
                         base-4.10.1.0:Data.Either base-4.10.1.0:Data.Functor.Compose
                         base-4.10.1.0:Data.Functor.Const
                         base-4.10.1.0:Data.Functor.Identity
                         base-4.10.1.0:Data.Functor.Product base-4.10.1.0:Data.Functor.Sum
                         base-4.10.1.0:Data.List.NonEmpty base-4.10.1.0:Data.Monoid
                         base-4.10.1.0:Data.Semigroup base-4.10.1.0:Data.Type.Equality
                         base-4.10.1.0:Data.Version base-4.10.1.0:Data.Void
                         base-4.10.1.0:GHC.Exts base-4.10.1.0:GHC.Generics
                         base-4.10.1.0:GHC.IO.Exception base-4.10.1.0:GHC.TypeLits
                         base-4.10.1.0:GHC.TypeNats bifunctors-5.5.2:Data.Bifunctor.Biff
                         bifunctors-5.5.2:Data.Bifunctor.Clown
                         bifunctors-5.5.2:Data.Bifunctor.Fix
                         bifunctors-5.5.2:Data.Bifunctor.Flip
                         bifunctors-5.5.2:Data.Bifunctor.Join
                         bifunctors-5.5.2:Data.Bifunctor.Joker
                         bifunctors-5.5.2:Data.Bifunctor.Product
                         bifunctors-5.5.2:Data.Bifunctor.Sum
                         bifunctors-5.5.2:Data.Bifunctor.Tannen
                         bifunctors-5.5.2:Data.Bifunctor.Wrapped bytes-0.15.4:Data.Bytes.Get
                         bytes-0.15.4:Data.Bytes.Signed bytes-0.15.4:Data.Bytes.VarInt
                         clock-0.7.2:System.Clock containers-0.5.10.2:Data.IntMap.Internal
                         containers-0.5.10.2:Data.IntSet.Internal
                         containers-0.5.10.2:Data.Map.Internal
                         containers-0.5.10.2:Data.Sequence.Internal
                         containers-0.5.10.2:Data.Set.Internal containers-0.5.10.2:Data.Tree
                         free-5.0.2:Control.Comonad.Cofree
                         free-5.0.2:Control.Comonad.Trans.Cofree
                         free-5.0.2:Control.Monad.Free free-5.0.2:Control.Monad.Trans.Free
                         ghc-boot-th-8.2.2:GHC.ForeignSrcLang.Type
                         ghc-boot-th-8.2.2:GHC.LanguageExtensions.Type
                         kan-extensions-5.1:Data.Functor.Day
                         kan-extensions-5.1:Data.Functor.Yoneda lens-4.16.1:Control.Lens.At
                         lens-4.16.1:Control.Lens.Internal.Indexed
                         lens-4.16.1:Control.Lens.Reified lens-4.16.1:Control.Lens.Tuple
                         lens-4.16.1:Control.Lens.Wrapped lens-4.16.1:Control.Lens.Zoom
                         linear-1.20.7:Linear.Affine linear-1.20.7:Linear.Plucker
                         linear-1.20.7:Linear.Quaternion linear-1.20.7:Linear.V
                         linear-1.20.7:Linear.V0 linear-1.20.7:Linear.V1
                         linear-1.20.7:Linear.V2 linear-1.20.7:Linear.V3
                         linear-1.20.7:Linear.V4
                         monad-control-1.0.2.3:Control.Monad.Trans.Control
                         pretty-1.1.3.3:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.3:Text.PrettyPrint.HughesPJ
                         primitive-0.6.3.0:Control.Monad.Primitive
                         primitive-0.6.3.0:Data.Primitive.Array
                         primitive-0.6.3.0:Data.Primitive.ByteArray
                         profunctors-5.2.2:Data.Profunctor.Composition
                         profunctors-5.2.2:Data.Profunctor.Rep sdl2-2.4.0.1:SDL.Audio
                         sdl2-2.4.0.1:SDL.Event sdl2-2.4.0.1:SDL.Exception
                         sdl2-2.4.0.1:SDL.Hint sdl2-2.4.0.1:SDL.Init
                         sdl2-2.4.0.1:SDL.Input.GameController
                         sdl2-2.4.0.1:SDL.Input.Joystick sdl2-2.4.0.1:SDL.Input.Keyboard
                         sdl2-2.4.0.1:SDL.Input.Keyboard.Codes sdl2-2.4.0.1:SDL.Input.Mouse
                         sdl2-2.4.0.1:SDL.Internal.Types sdl2-2.4.0.1:SDL.Power
                         sdl2-2.4.0.1:SDL.Time sdl2-2.4.0.1:SDL.Video
                         sdl2-2.4.0.1:SDL.Video.OpenGL sdl2-2.4.0.1:SDL.Video.Renderer
                         sdl2-image-2.0.0:SDL.Image sdl2-ttf-2.0.2:SDL.Font
                         tagged-0.8.5:Data.Tagged
                         template-haskell-2.12.0.0:Language.Haskell.TH.Syntax
                         text-1.2.3.0:Data.Text text-1.2.3.0:Data.Text.Lazy
                         th-abstraction-0.2.6.0:Language.Haskell.TH.Datatype
                         unordered-containers-0.2.9.0:Data.HashMap.Base
                         unordered-containers-0.2.9.0:Data.HashSet
                         vector-0.12.0.1:Data.Vector vector-0.12.0.1:Data.Vector.Primitive
                         vector-0.12.0.1:Data.Vector.Storable
                         vector-0.12.0.1:Data.Vector.Unboxed
                         vector-0.12.0.1:Data.Vector.Unboxed.Base
import  -/  Stack-0.3.2:Data.Stack e7f704bd11627e1a734f5ce5c24b374a
import  -/  StateVar-1.1.1.0:Data.StateVar e298ac6d18dc5cb4525ddce72dbe03f7
import  -/  base-4.10.1.0:Control.Monad ebed2e8e7444944e0c1d827c6faf40a4
import  -/  base-4.10.1.0:Data.Functor 2ffda4f936b8f474394d93205750aff3
import  -/  base-4.10.1.0:Foreign.C.Types 936c0db027291520097b61fd8686710a
import  -/  base-4.10.1.0:GHC.Base 782fd99b5e36f3698a26179a49afca64
import  -/  base-4.10.1.0:GHC.Num 6e1dc5d36d99a802edb39b92bb1923b8
import  -/  base-4.10.1.0:GHC.Real 3c62834bc25e762eabc44149c4cc142d
import  -/  base-4.10.1.0:GHC.Show 0a8ce2b5e533d1c2cfb7954e6736be45
import  -/  base-4.10.1.0:Prelude 31945b7d0084063347fc52506d3a4020
import  -/  clock-0.7.2:System.Clock 056d9486cb81fc87e6657deb7d2591d2
import  -/  ghc-prim-0.5.1.1:GHC.Classes 93e2660065dce9329577e83d76d8f0d4
import  -/  ghc-prim-0.5.1.1:GHC.Types b1fd0716441595db508c1a74387bf394
import  -/  lens-4.16.1:Control.Lens d35b54db874b2147b5ffe1d3cd39d59d
import  -/  lens-4.16.1:Control.Lens.Getter be8fceadc62581701bcf558f995a8aa3
import  -/  linear-1.20.7:Linear.Affine f4ed1aa58b28d63beac82829593554b3
import  -/  linear-1.20.7:Linear.V2 ee409e3e067ada9faf9fdda331749bf4
import  -/  linear-1.20.7:Linear.V4 316a77d05c749a3da274eba99cc77a95
import  -/  Aabb 02207cce2d794346ceccf4ae11a9988d
  exports: 74498893d79e07cfc6b7864a88f8a517
  ceilingAabb 1ba3ef3c8c0c371877b206b3c919194f
  floorAabb 478629363c5055b2d6751d56dfc2a997
  hitTestAbove 9ed9dee95f74560c95d02c5273993c59
  hitTestBelow d23345d5ff2b0ba76d5f27cd5cd9d34a
  pointHitTest 2525c64f7376fe813a21fdf5183f73dd
  shiftAabb 8476ef5074ef8ca67cd7c9d51f04423a
import  -/  Animations ed8ac26f601711059133f19a17b8411f
  exports: 1b514af753d69c9c6476a9810faf24f0
  AnimationType'Idle 053d7b999a4a72927414591d605eb1c5
import  -/  AnimationsManager d650d562ace7f9bcb6645a5ec1b845b5
  exports: 870ab299162042bfa1955a3278127f9e
  AnimationsManager 1300b0f8b825f26c0c0bd424b5660e12
  getPlayerDeathAnimation 6610220a0d06dcf1742fb4ce14563d92
  getPlayerIdleAnimation 1bc28715d96c8c38ed9865458f55b3a4
  prependToPlayerAnimation e06680aa56454eefce90b7f19ec50c68
  removePlayerAnimationsUpto 7c8101cd033f7069a5f8df57f48f9374
  replacePlayerAnimation becddc6e4612adf4668f8fd47f757bf0
  updatePlayerAnimation 22eb439866396534fd42ef2dee056580
import  -/  Buttons eb5ee8bed5c3803d702090bd75709be5
  exports: 2f3907c0af37ac9fc752c2492d57e9d5
  Button ed42b97136823455baa17e14617cf2b4
  aabb 6b0715224ad83cf733833a908fe45de8
  alignToBottomEdgeButtonAttr f595479cd76915c6c3dd89987e7782ec
  createCenteredButtonAttr c09a1414775e4423cbf66a7e93d1aa86
  createRightEdgeAlignedButtonAttr 4e094196368bedc57f6a35c1e7f21d8b
  translateButtonAttr 953f609e835bb610b2b81ecd8b9bfde9
import  -/  CameraManager 4a3629dcca1cd6a4a9a9befbf2188ae5
  exports: 112cd2acaa8c34d282eabc28f7fedc85
  CameraManager d16eef61f6af70903e3a612d17ffd25c
  getCameraOffset ff8baed5a7a2be8b87a2ebff9049a7d0
  setCameraPos 7532d2529fa4060d4c9e0080874c7532
import  -/  GameStateManager ccbeed6e4a039e9548d0e336726c3043
  exports: 31a22b4a25b84d92d55314f503d3c92f
  GameStateManager 324b55f11cd0fe2360a2e9874ea026b9
  peekGameState 655aac3a14a65bccbe6a448ed58092d5
  popGameState_ ddf07b0097504cde5a70fb899c41d3af
  pushGameState 779b48d0c75ee47469e09eaf064cf11a
import  -/  GameVars c97b478d52eb65df6d94cfdf494ea2ce
  exports: 54748b09c2a15e9d35b796e54eb1daea
  Config 7d37304089f01776096e2dc8d6f690c8
  GameOver d5de0be57826e8d044e3b711775e232f
  GameState 862115caec0cc090e3ab2e897cce53f2
  Input 14baa3ae6b26e7d8a8967e8549c7576d
  MahppyBird c09a81eb550f4240742ed546a74e9517
  MahppyBird 1989f26957dc34ff4b450af06c2d546d
  Menu c93e18feadbb490b363082d606e5efdd
  Pause afc590b2ab47d17b75d0124812eb3a2a
  Play 9ea9aa6ada49b383b9d31b7ff74b7145
  PrePlay fd49ccff0f056bc2a72e8480216df3a6
  Quit 5853d37e06a7e2cb19adcb0344d6e18c
  Vars 5829ea20be4fb9a24ab87f3fe067aa3c
  _isEsc 14baa3ae6b26e7d8a8967e8549c7576d
  _isSpace 14baa3ae6b26e7d8a8967e8549c7576d
  _mousePos 14baa3ae6b26e7d8a8967e8549c7576d
  _mousePress 14baa3ae6b26e7d8a8967e8549c7576d
  bgTexture 517d338878c76752fb31d67b44d0262f
  cAnimations 274f811ff19250bf36e042224fec3125
  cFont 6eea812d52df63380a21b9e14308d8f0
  cResources b04d36993ee1ee6e042ac28bc0eb61e1
  cTextures d5266101a8a1109787f149679f99a311
  gameOverWindowTexture ab8c65a3721cb9d35ab6a011f9d8f88b
  guiTextures eac494f378a0b289c29f925f7ff7594f
  highScoreFont 1ea24e51de83317aaebc34b09661ed73
  muteTexture b7aa094ce350a24eceeee74a6e74ca48
  mutedTexture edf150d798b8ee917b33f66f17a05dc8
  playAgainBtnTexture e7a73c1322bb5a22503c84b75d84167c
  playBtnTexture 6c01d88673580d6d4607c9c61d3158e5
  playerJumpAnimation 41aad7e466f7e7e4a245f84c07c1c830
  pressSpacetoJumpTexture 37f61b2897f2fcc93b5ce8a2c071fdc5
  quitBtnTexture 7c4f23a6c9467d21d67592c3cac85142
  quitGameOverBtnTexture faf22816378f5922353f1722dfd0f62d
  scoreFont 5f2633e933d68e24238ace640a6fb545
  titleScreenbg 1597263a8cceded749d3017d2be8ec4c
import  -/  GuiTransforms e2db9ba277a4f977ddcd90a5635f8391
  exports: f9dcd83a9df04834bf7cc3c940782a98
  GuiTransforms 2fd14cc1a80d141e758ca9f9f3e06ff8
  translate 8df0f20a9af8b27115b4172f5904e382
  xCenterRectangle ccf03f990a1933f6a7c163f17a0dcfa4
  yCenterRectangle 7bb5678d2589e5a23628d1b6000717a2
import  -/  InitGameVars a2e7718a52756cddcc338d51597aa219
  exports: fbc9364d5ab5298ae16518b83d74060c
import  -/  Input 56e539d2b22425f97c9c19a695bc89a3
  exports: 05cbb0277d9c9d8e0986644624bd40b0
  HasInput 16315d0f5b666f9602f148cc4651e589
  getInput 02ba476bfc7b48dc45bcb010f37636c9
  updateInput c130b0d2892fa2f0110dad3fb1b78a22
import  -/  Logger 8440c95053026489c9281e4e9e175c09
  exports: c7f6c47792388de1970a4c43887f8fdc
  Logger 33185071f9a092c50e0368c71838eca3
  logText f70b8542443b0a171bb0e0b29a78e9d0
import  -/  Physics b9e2d4bce28db23d3a2a79d5a15480fb
  exports: 351c7a3cc081ac564329eb8cf05ccdc3
  Physics d90e58b7cee3024f0f1b555e462546bb
  applyGrav 13e9897fbbddfa2509b83dcadfab5d82
  applyXVel 769305e41bcb75a245a2d84945d23c74
  applyYVel 7e4b3b23e0600b0dbf2ff23ad981fe3f
  setGrav 5263bf14f9a7235e6f4dadfcce575783
import  -/  PlayerManager 9868e35f2483697ab3ba877365241301
  exports: 90666d388c993bafd900a62a82f9ea2a
  PlayerManager 6545e3f8eb0ac641e42ed8093f9a9539
  getIsPassingWall db0a745e03efaae3169d6908cfe53c30
  getPlayerAabb a6edcbde0b94459bad337f3ee6ebd626
  getPlayerAngle 31cb8c05e618c8073ed67a7183d522f7
  getPlayerPos a64a9eb2d341b7182e8c682f970aac19
  getPlayerYVel d481f27b26e46302bf9b46df16ad54ec
  jumpPlayer 03c90b052609ff94ed57bfc17579aff3
  setIsPassingWall 273c8074e34bb08361884cb83f8b36d8
  setPlayerAngle 19181f41bd0e46a42be7c511db8625e8
  setPlayerPos 7d422f1b0a0aa2a4716fc40742f90fa5
  setPlayerYVel 7fd64e20a53b7d218d378191bd613843
import  -/  Renderer 75e1d8af9aea988a4b749bb2c62642fe
  exports: 12249b92f8ba4308c004e3f97d45a860
  Renderer 30c5dfcbb2b1b64eb833c43738ed8174
  drawBg b6ac0f75df6b6a546669389eb134e692
  drawBtnToScreen c0e0b3227d605e7c5024c303f1c64ec5
  drawObjectsWithDt 75d26bff4e6962bf95735211b0c0189e
  drawPlayer c36124329b6d12df1ec89e94e6b8d86f
  drawScore 0b3a09ad2f2626ac9ae107d29b7c421a
  drawScreenOverlay dcbb90d6fabd6bc2e976ad6af22b5fcb
  drawTextToScreen 0b54ff769ccfaa97e97eba1832877b21
  drawTextureToScreen a759ad3bef89df0f460330476a2d92a3
  drawWalls 5b99e1bc0397dc38afee1d00476ae4ac
import  -/  ScoreManager 879794ddf423ff4c9dc5591200a3c62e
  exports: 3f42ff92e5da3f9a7eb6a2cabff3ca72
  ScoreManager ede30ede90ba44a2fd7ff42d80929ab7
  getHighScore 6ab0bd0ee871d7b75cb15e9ddf9213e7
  getScore 8e8c2c5e65a6da42249be13fc68a364d
  incrementScore 18687a4f0e4f3adb02e72efcd8f4e00e
  isHighScore ae7aca7e3f5130193958b9240586a3be
  modifyHighScore 60c8669312872fe79a1a86ccc905bc43
  resetScore 2117073568530fce3eebfdc92f375bcf
import  -/  SoundManager 1010a93932bfc8dbb36d5ad8736a2bb6
  exports: 2682bf98cf9562134007a2e59b3ed39b
  SoundManager 231bf9fbb0ef1c04a8736ec0d1ad558e
  areChannelsPlaying 1dd6103f244d1494f0a69dc3eab841d4
  muteAll b268e4f3a640de58cc216d40d6bcaa45
  playCrashFx 2c4ea533e9db34aca75c7b516b7e3f5b
  playJumpFx 315321a50c81094c1c654b7395f578a5
  resumeAll 7d232d1e3e7433e49fc8305c74af93a7
import  -/  TimeManager 6917e8576ee854ed7f928bd2c7cdda2f
  exports: 1444a12543659cbb43ece9f99bc0f223
  TimeManager 3f466474e9f7b0f2ba00315fed57edeb
import  -/  WallManager cb1c751b982aa16d5f5d6e0072158759
  exports: 67e9f1c1c7089cdef3d6912a9d52dd41
  WallManager 6362104a3af6d543fd392d41a9935369
  changeWallConfStartingPosition 0327fc59a3741dac189cc7112e3455a7
  getFirstLowerWallAabb 4095f934610d45d191261ae87700df16
  getFirstUpperWallAabb 8ebe1c6501d72b777f79e358697e6c2d
  getFirstWall 5645d3b46b9229a912cd5c4854ac4a92
  getFirstWallGapAabb d1a77dddad73011c2c52a513faf59e87
  popWall_ d2a29f46844d26d44c2e8a121bb7bcfa
  resetWalls f7b4a5852d98eb55ebfe92fe823aea93
import  -/  Walls b13a13e2c4e3ef97855d945c5af1fb26
  exports: 9a82a9ead6771cc6b661267f6167d45d
  wallWidth 0489472b2e8cbbdc29c5c06003041655
  xPos 0489472b2e8cbbdc29c5c06003041655
import  -/  mtl-2.2.2:Control.Monad.Reader 8d63edf5dfaf25ad085eae4468bdd77e
import  -/  mtl-2.2.2:Control.Monad.Reader.Class 6d33756d93a5919f9374afec232249f4
import  -/  mtl-2.2.2:Control.Monad.State 4acb2e6037f370fa4b91900d626e6406
import  -/  mtl-2.2.2:Control.Monad.State.Class de8813e114276746770717ab3ee06916
import  -/  sdl2-2.4.0.1:SDL 24b907aeafb5c6d95ad8ce8f19ccd6b3
import  -/  sdl2-2.4.0.1:SDL.Video.Renderer 05fa9f919fc1b42de89d6ed9d3439937
import  -/  sdl2-ttf-2.0.2:SDL.Font 44c9d73e1da8a9f90d50e498341d19f1
import  -/  text-1.2.3.0:Data.Text 0519455f2b04d2a7315c2959461dd14e
import  -/  transformers-0.5.2.0:Control.Monad.Trans.Class 4bfa8c2d5ed6a6a465f9f6f92f7ab1d4
import  -/  transformers-0.5.2.0:Control.Monad.Trans.Reader cc12564dc0d2121844a0316ee821dfff
import  -/  transformers-0.5.2.0:Control.Monad.Trans.State.Lazy 1a80bdb936666c1b8faf2f03f91a48cc
940e6f42ce33a182637151f095c226a1
  $sbgTexture ::
    (SDL.Video.Renderer.Texture
     -> Data.Functor.Const.Const
          SDL.Video.Renderer.Texture SDL.Video.Renderer.Texture)
    -> GameVars.Textures
    -> Data.Functor.Const.Const
         SDL.Video.Renderer.Texture GameVars.Textures
  {- Arity: 2, HasNoCafRefs,
     Strictness: <C(S),1*C1(U(U))><S,1*U(U,A,A,A,A)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (f7 :: SDL.Video.Renderer.Texture
                          -> Data.Functor.Const.Const
                               SDL.Video.Renderer.Texture SDL.Video.Renderer.Texture)
                   (ds :: GameVars.Textures) ->
                 case ds of wild { GameVars.Textures x1 x2 x3 x4 x5 ->
                 (f7 x1)
                   `cast`
                 (Trans
                      (Data.Functor.Const.N:Const[0]
                           <*>_N
                           <SDL.Video.Renderer.Texture>_R
                           <SDL.Video.Renderer.Texture>_P)
                      (Sym (Data.Functor.Const.N:Const[0]
                                <*>_N <SDL.Video.Renderer.Texture>_R <GameVars.Textures>_P))) }) -}
97918658ca3aee7fe92bfd59477ceb0a
  $scFont ::
    (GameVars.Fonts
     -> Data.Functor.Const.Const SDL.Font.Font GameVars.Fonts)
    -> GameVars.Resources
    -> Data.Functor.Const.Const SDL.Font.Font GameVars.Resources
  {- Arity: 2, HasNoCafRefs,
     Strictness: <C(S),1*C1(U(U))><S,1*U(U,A,A,A)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (f7 :: GameVars.Fonts
                          -> Data.Functor.Const.Const SDL.Font.Font GameVars.Fonts)
                   (ds :: GameVars.Resources) ->
                 case ds of wild { GameVars.Resources x1 x2 x3 x4 ->
                 (f7 x1)
                   `cast`
                 (Trans
                      (Data.Functor.Const.N:Const[0]
                           <*>_N <SDL.Font.Font>_R <GameVars.Fonts>_P)
                      (Sym (Data.Functor.Const.N:Const[0]
                                <*>_N <SDL.Font.Font>_R <GameVars.Resources>_P))) }) -}
047a80d9b06a8679c57821d1324dd7ca
  $scResources ::
    (GameVars.Resources
     -> Data.Functor.Const.Const SDL.Font.Font GameVars.Resources)
    -> GameVars.Config
    -> Data.Functor.Const.Const SDL.Font.Font GameVars.Config
  {- Arity: 2, HasNoCafRefs,
     Strictness: <C(S),1*C1(U(U))><S,1*U(A,A,U)>, Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (f7 :: GameVars.Resources
                          -> Data.Functor.Const.Const SDL.Font.Font GameVars.Resources)
                   (ds :: GameVars.Config) ->
                 case ds of wild { GameVars.Config x1 x2 x3 ->
                 (f7 x3)
                   `cast`
                 (Trans
                      (Data.Functor.Const.N:Const[0]
                           <*>_N <SDL.Font.Font>_R <GameVars.Resources>_P)
                      (Sym (Data.Functor.Const.N:Const[0]
                                <*>_N <SDL.Font.Font>_R <GameVars.Config>_P))) }) -}
9b1f9681bc25a933baf94a9a2145cb01
  $scResources1 ::
    (GameVars.Resources
     -> Data.Functor.Const.Const
          SDL.Video.Renderer.Texture GameVars.Resources)
    -> GameVars.Config
    -> Data.Functor.Const.Const
         SDL.Video.Renderer.Texture GameVars.Config
  {- Arity: 2, HasNoCafRefs,
     Strictness: <C(S),1*C1(U(U))><S,1*U(A,A,U)>, Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (f7 :: GameVars.Resources
                          -> Data.Functor.Const.Const
                               SDL.Video.Renderer.Texture GameVars.Resources)
                   (ds :: GameVars.Config) ->
                 case ds of wild { GameVars.Config x1 x2 x3 ->
                 (f7 x3)
                   `cast`
                 (Trans
                      (Data.Functor.Const.N:Const[0]
                           <*>_N <SDL.Video.Renderer.Texture>_R <GameVars.Resources>_P)
                      (Sym (Data.Functor.Const.N:Const[0]
                                <*>_N <SDL.Video.Renderer.Texture>_R <GameVars.Config>_P))) }) -}
3d5f20ab60d126cbb1f0c74dbd2def64
  $scTextures ::
    (GameVars.Textures
     -> Data.Functor.Const.Const
          SDL.Video.Renderer.Texture GameVars.Textures)
    -> GameVars.Resources
    -> Data.Functor.Const.Const
         SDL.Video.Renderer.Texture GameVars.Resources
  {- Arity: 2, HasNoCafRefs,
     Strictness: <C(S),1*C1(U(U))><S,1*U(A,U,A,A)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (f7 :: GameVars.Textures
                          -> Data.Functor.Const.Const
                               SDL.Video.Renderer.Texture GameVars.Textures)
                   (ds :: GameVars.Resources) ->
                 case ds of wild { GameVars.Resources x1 x2 x3 x4 ->
                 (f7 x2)
                   `cast`
                 (Trans
                      (Data.Functor.Const.N:Const[0]
                           <*>_N <SDL.Video.Renderer.Texture>_R <GameVars.Textures>_P)
                      (Sym (Data.Functor.Const.N:Const[0]
                                <*>_N
                                <SDL.Video.Renderer.Texture>_R
                                <GameVars.Resources>_P))) }) -}
8ceb067349437bd6eb7a9ea6256257a8
  $sgameOverWindowTexture ::
    (SDL.Video.Renderer.Texture
     -> Data.Functor.Const.Const
          SDL.Video.Renderer.Texture SDL.Video.Renderer.Texture)
    -> GameVars.GUITextures
    -> Data.Functor.Const.Const
         SDL.Video.Renderer.Texture GameVars.GUITextures
  {- Arity: 2, HasNoCafRefs,
     Strictness: <C(S),1*C1(U(U))><S,1*U(A,A,A,A,U,A,A,A,A)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (f7 :: SDL.Video.Renderer.Texture
                          -> Data.Functor.Const.Const
                               SDL.Video.Renderer.Texture SDL.Video.Renderer.Texture)
                   (ds :: GameVars.GUITextures) ->
                 case ds of wild { GameVars.GUITextures x1 x2 x3 x4 x5 x6 x7 x8 x9 ->
                 (f7 x5)
                   `cast`
                 (Trans
                      (Data.Functor.Const.N:Const[0]
                           <*>_N
                           <SDL.Video.Renderer.Texture>_R
                           <SDL.Video.Renderer.Texture>_P)
                      (Sym (Data.Functor.Const.N:Const[0]
                                <*>_N
                                <SDL.Video.Renderer.Texture>_R
                                <GameVars.GUITextures>_P))) }) -}
83ed260c7f37b64479658bc5ceab443b
  $sguiTextures ::
    (GameVars.GUITextures
     -> Data.Functor.Const.Const
          SDL.Video.Renderer.Texture GameVars.GUITextures)
    -> GameVars.Textures
    -> Data.Functor.Const.Const
         SDL.Video.Renderer.Texture GameVars.Textures
  {- Arity: 2, HasNoCafRefs,
     Strictness: <C(S),1*C1(U(U))><S,1*U(A,A,A,A,U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (f7 :: GameVars.GUITextures
                          -> Data.Functor.Const.Const
                               SDL.Video.Renderer.Texture GameVars.GUITextures)
                   (ds :: GameVars.Textures) ->
                 case ds of wild { GameVars.Textures x1 x2 x3 x4 x5 ->
                 (f7 x5)
                   `cast`
                 (Trans
                      (Data.Functor.Const.N:Const[0]
                           <*>_N <SDL.Video.Renderer.Texture>_R <GameVars.GUITextures>_P)
                      (Sym (Data.Functor.Const.N:Const[0]
                                <*>_N <SDL.Video.Renderer.Texture>_R <GameVars.Textures>_P))) }) -}
e1f4840df1985f6b33b523a5ab573e4b
  $shighScoreFont ::
    (SDL.Font.Font
     -> Data.Functor.Const.Const SDL.Font.Font SDL.Font.Font)
    -> GameVars.Fonts
    -> Data.Functor.Const.Const SDL.Font.Font GameVars.Fonts
  {- Arity: 2, HasNoCafRefs,
     Strictness: <C(S),1*C1(U(U))><S,1*U(A,U)>, Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (f7 :: SDL.Font.Font
                          -> Data.Functor.Const.Const SDL.Font.Font SDL.Font.Font)
                   (ds :: GameVars.Fonts) ->
                 case ds of wild { GameVars.Fonts x1 x2 ->
                 (f7 x2)
                   `cast`
                 (Trans
                      (Data.Functor.Const.N:Const[0]
                           <*>_N <SDL.Font.Font>_R <SDL.Font.Font>_P)
                      (Sym (Data.Functor.Const.N:Const[0]
                                <*>_N <SDL.Font.Font>_R <GameVars.Fonts>_P))) }) -}
c61b87f0f2775b61b3983c3421a2877c
  $smuteTexture ::
    (SDL.Video.Renderer.Texture
     -> Data.Functor.Const.Const
          SDL.Video.Renderer.Texture SDL.Video.Renderer.Texture)
    -> GameVars.GUITextures
    -> Data.Functor.Const.Const
         SDL.Video.Renderer.Texture GameVars.GUITextures
  {- Arity: 2, HasNoCafRefs,
     Strictness: <C(S),1*C1(U(U))><S,1*U(A,A,A,A,A,A,A,A,U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (f7 :: SDL.Video.Renderer.Texture
                          -> Data.Functor.Const.Const
                               SDL.Video.Renderer.Texture SDL.Video.Renderer.Texture)
                   (ds :: GameVars.GUITextures) ->
                 case ds of wild { GameVars.GUITextures x1 x2 x3 x4 x5 x6 x7 x8 x9 ->
                 (f7 x9)
                   `cast`
                 (Trans
                      (Data.Functor.Const.N:Const[0]
                           <*>_N
                           <SDL.Video.Renderer.Texture>_R
                           <SDL.Video.Renderer.Texture>_P)
                      (Sym (Data.Functor.Const.N:Const[0]
                                <*>_N
                                <SDL.Video.Renderer.Texture>_R
                                <GameVars.GUITextures>_P))) }) -}
4fb38550d9edfc665cffdfadbeaf3d2c
  $smutedTexture ::
    (SDL.Video.Renderer.Texture
     -> Data.Functor.Const.Const
          SDL.Video.Renderer.Texture SDL.Video.Renderer.Texture)
    -> GameVars.GUITextures
    -> Data.Functor.Const.Const
         SDL.Video.Renderer.Texture GameVars.GUITextures
  {- Arity: 2, HasNoCafRefs,
     Strictness: <C(S),1*C1(U(U))><S,1*U(A,A,A,A,A,A,A,U,A)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (f7 :: SDL.Video.Renderer.Texture
                          -> Data.Functor.Const.Const
                               SDL.Video.Renderer.Texture SDL.Video.Renderer.Texture)
                   (ds :: GameVars.GUITextures) ->
                 case ds of wild { GameVars.GUITextures x1 x2 x3 x4 x5 x6 x7 x8 x9 ->
                 (f7 x8)
                   `cast`
                 (Trans
                      (Data.Functor.Const.N:Const[0]
                           <*>_N
                           <SDL.Video.Renderer.Texture>_R
                           <SDL.Video.Renderer.Texture>_P)
                      (Sym (Data.Functor.Const.N:Const[0]
                                <*>_N
                                <SDL.Video.Renderer.Texture>_R
                                <GameVars.GUITextures>_P))) }) -}
0362a6f3ffaa9e3a10fb86bab702324e
  $splayAgainBtnTexture ::
    (SDL.Video.Renderer.Texture
     -> Data.Functor.Const.Const
          SDL.Video.Renderer.Texture SDL.Video.Renderer.Texture)
    -> GameVars.GUITextures
    -> Data.Functor.Const.Const
         SDL.Video.Renderer.Texture GameVars.GUITextures
  {- Arity: 2, HasNoCafRefs,
     Strictness: <C(S),1*C1(U(U))><S,1*U(A,A,U,A,A,A,A,A,A)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (f7 :: SDL.Video.Renderer.Texture
                          -> Data.Functor.Const.Const
                               SDL.Video.Renderer.Texture SDL.Video.Renderer.Texture)
                   (ds :: GameVars.GUITextures) ->
                 case ds of wild { GameVars.GUITextures x1 x2 x3 x4 x5 x6 x7 x8 x9 ->
                 (f7 x3)
                   `cast`
                 (Trans
                      (Data.Functor.Const.N:Const[0]
                           <*>_N
                           <SDL.Video.Renderer.Texture>_R
                           <SDL.Video.Renderer.Texture>_P)
                      (Sym (Data.Functor.Const.N:Const[0]
                                <*>_N
                                <SDL.Video.Renderer.Texture>_R
                                <GameVars.GUITextures>_P))) }) -}
b889347fbc5d31e317b29726f675423b
  $splayBtnTexture ::
    (SDL.Video.Renderer.Texture
     -> Data.Functor.Const.Const
          SDL.Video.Renderer.Texture SDL.Video.Renderer.Texture)
    -> GameVars.GUITextures
    -> Data.Functor.Const.Const
         SDL.Video.Renderer.Texture GameVars.GUITextures
  {- Arity: 2, HasNoCafRefs,
     Strictness: <C(S),1*C1(U(U))><S,1*U(U,A,A,A,A,A,A,A,A)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (f7 :: SDL.Video.Renderer.Texture
                          -> Data.Functor.Const.Const
                               SDL.Video.Renderer.Texture SDL.Video.Renderer.Texture)
                   (ds :: GameVars.GUITextures) ->
                 case ds of wild { GameVars.GUITextures x1 x2 x3 x4 x5 x6 x7 x8 x9 ->
                 (f7 x1)
                   `cast`
                 (Trans
                      (Data.Functor.Const.N:Const[0]
                           <*>_N
                           <SDL.Video.Renderer.Texture>_R
                           <SDL.Video.Renderer.Texture>_P)
                      (Sym (Data.Functor.Const.N:Const[0]
                                <*>_N
                                <SDL.Video.Renderer.Texture>_R
                                <GameVars.GUITextures>_P))) }) -}
ba08cc399c3cd08d37f9d2a114f6a235
  $spressSpacetoJumpTexture ::
    (SDL.Video.Renderer.Texture
     -> Data.Functor.Const.Const
          SDL.Video.Renderer.Texture SDL.Video.Renderer.Texture)
    -> GameVars.GUITextures
    -> Data.Functor.Const.Const
         SDL.Video.Renderer.Texture GameVars.GUITextures
  {- Arity: 2, HasNoCafRefs,
     Strictness: <C(S),1*C1(U(U))><S,1*U(A,A,A,A,A,U,A,A,A)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (f7 :: SDL.Video.Renderer.Texture
                          -> Data.Functor.Const.Const
                               SDL.Video.Renderer.Texture SDL.Video.Renderer.Texture)
                   (ds :: GameVars.GUITextures) ->
                 case ds of wild { GameVars.GUITextures x1 x2 x3 x4 x5 x6 x7 x8 x9 ->
                 (f7 x6)
                   `cast`
                 (Trans
                      (Data.Functor.Const.N:Const[0]
                           <*>_N
                           <SDL.Video.Renderer.Texture>_R
                           <SDL.Video.Renderer.Texture>_P)
                      (Sym (Data.Functor.Const.N:Const[0]
                                <*>_N
                                <SDL.Video.Renderer.Texture>_R
                                <GameVars.GUITextures>_P))) }) -}
a2568fa263485fdb5b28fa85d06cb76f
  $squitBtnTexture ::
    (SDL.Video.Renderer.Texture
     -> Data.Functor.Const.Const
          SDL.Video.Renderer.Texture SDL.Video.Renderer.Texture)
    -> GameVars.GUITextures
    -> Data.Functor.Const.Const
         SDL.Video.Renderer.Texture GameVars.GUITextures
  {- Arity: 2, HasNoCafRefs,
     Strictness: <C(S),1*C1(U(U))><S,1*U(A,U,A,A,A,A,A,A,A)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (f7 :: SDL.Video.Renderer.Texture
                          -> Data.Functor.Const.Const
                               SDL.Video.Renderer.Texture SDL.Video.Renderer.Texture)
                   (ds :: GameVars.GUITextures) ->
                 case ds of wild { GameVars.GUITextures x1 x2 x3 x4 x5 x6 x7 x8 x9 ->
                 (f7 x2)
                   `cast`
                 (Trans
                      (Data.Functor.Const.N:Const[0]
                           <*>_N
                           <SDL.Video.Renderer.Texture>_R
                           <SDL.Video.Renderer.Texture>_P)
                      (Sym (Data.Functor.Const.N:Const[0]
                                <*>_N
                                <SDL.Video.Renderer.Texture>_R
                                <GameVars.GUITextures>_P))) }) -}
920685bcf65730cca4aea1fb5b8ac658
  $squitGameOverBtnTexture ::
    (SDL.Video.Renderer.Texture
     -> Data.Functor.Const.Const
          SDL.Video.Renderer.Texture SDL.Video.Renderer.Texture)
    -> GameVars.GUITextures
    -> Data.Functor.Const.Const
         SDL.Video.Renderer.Texture GameVars.GUITextures
  {- Arity: 2, HasNoCafRefs,
     Strictness: <C(S),1*C1(U(U))><S,1*U(A,A,A,U,A,A,A,A,A)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (f7 :: SDL.Video.Renderer.Texture
                          -> Data.Functor.Const.Const
                               SDL.Video.Renderer.Texture SDL.Video.Renderer.Texture)
                   (ds :: GameVars.GUITextures) ->
                 case ds of wild { GameVars.GUITextures x1 x2 x3 x4 x5 x6 x7 x8 x9 ->
                 (f7 x4)
                   `cast`
                 (Trans
                      (Data.Functor.Const.N:Const[0]
                           <*>_N
                           <SDL.Video.Renderer.Texture>_R
                           <SDL.Video.Renderer.Texture>_P)
                      (Sym (Data.Functor.Const.N:Const[0]
                                <*>_N
                                <SDL.Video.Renderer.Texture>_R
                                <GameVars.GUITextures>_P))) }) -}
4ae0916785f910296218f7d7c093b5b7
  $sscoreFont ::
    (SDL.Font.Font
     -> Data.Functor.Const.Const SDL.Font.Font SDL.Font.Font)
    -> GameVars.Fonts
    -> Data.Functor.Const.Const SDL.Font.Font GameVars.Fonts
  {- Arity: 2, HasNoCafRefs,
     Strictness: <C(S),1*C1(U(U))><S,1*U(U,A)>, Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (f7 :: SDL.Font.Font
                          -> Data.Functor.Const.Const SDL.Font.Font SDL.Font.Font)
                   (ds :: GameVars.Fonts) ->
                 case ds of wild { GameVars.Fonts x1 x2 ->
                 (f7 x1)
                   `cast`
                 (Trans
                      (Data.Functor.Const.N:Const[0]
                           <*>_N <SDL.Font.Font>_R <SDL.Font.Font>_P)
                      (Sym (Data.Functor.Const.N:Const[0]
                                <*>_N <SDL.Font.Font>_R <GameVars.Fonts>_P))) }) -}
f46333d5140b2389225a08d8c224feeb
  $stitleScreenbg ::
    (SDL.Video.Renderer.Texture
     -> Data.Functor.Const.Const
          SDL.Video.Renderer.Texture SDL.Video.Renderer.Texture)
    -> GameVars.GUITextures
    -> Data.Functor.Const.Const
         SDL.Video.Renderer.Texture GameVars.GUITextures
  {- Arity: 2, HasNoCafRefs,
     Strictness: <C(S),1*C1(U(U))><S,1*U(A,A,A,A,A,A,U,A,A)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (f7 :: SDL.Video.Renderer.Texture
                          -> Data.Functor.Const.Const
                               SDL.Video.Renderer.Texture SDL.Video.Renderer.Texture)
                   (ds :: GameVars.GUITextures) ->
                 case ds of wild { GameVars.GUITextures x1 x2 x3 x4 x5 x6 x7 x8 x9 ->
                 (f7 x7)
                   `cast`
                 (Trans
                      (Data.Functor.Const.N:Const[0]
                           <*>_N
                           <SDL.Video.Renderer.Texture>_R
                           <SDL.Video.Renderer.Texture>_P)
                      (Sym (Data.Functor.Const.N:Const[0]
                                <*>_N
                                <SDL.Video.Renderer.Texture>_R
                                <GameVars.GUITextures>_P))) }) -}
10f1ff18f80e7c6a55944dcd05603387
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   MahppyBird.$trModule3
                   MahppyBird.$trModule1) -}
9b1ea1cb784d9bee078e6650fc985b41
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS MahppyBird.$trModule2) -}
f432aea4982de4d473a965b2e54d244e
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("MahppyBird"#) -}
bffa44f79b2ce49aa9777d990da2a412
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS MahppyBird.$trModule4) -}
ca7f809605f46946ecf1c378d076d708
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("main"#) -}
9495cc5070ef2241a45e85261e6c1c51
  loop ::
    (Logger.Logger m, Renderer.Renderer m,
     Control.Monad.Reader.Class.MonadReader GameVars.Config m,
     Input.HasInput m, Physics.Physics m, WallManager.WallManager m,
     PlayerManager.PlayerManager m, ScoreManager.ScoreManager m,
     CameraManager.CameraManager m,
     Control.Monad.State.Class.MonadState GameVars.Vars m,
     SoundManager.SoundManager m, TimeManager.TimeManager m,
     GuiTransforms.GuiTransforms m, GameStateManager.GameStateManager m,
     AnimationsManager.AnimationsManager m) =>
    m ()
  {- Arity: 15,
     Strictness: <S(S(LC(C(S))LLL)LL),U(U(U(U(C(C1(U)),A),C(U),A,A,A,A),C(C1(U)),C(C1(U)),C(U),A),C(U),A)><L,U(U(A,C(C1(U)),C(C1(U)),C(U),A),A,C(U),C(U),U,U,U,A,C(U),A,C(C1(C1(C1(C1(U))))),C(U),C(C1(U)),A,A,A)><L,U(U(A,C(C1(U)),C(C1(U)),C(U),A),A,A,C(U))><L,U(U(U(U(C(C1(U)),A),C(U),A,A,A,A),C(C1(U)),A,C(U),A),U,A,U)><L,U(U(A,A,C(C1(U)),A,A),U,C(U),A,A,U,U)><L,U(U(A,C(C1(U)),C(C1(U)),A,A),A,U,U,U,A,U,A,U,C(U),U)><L,U(U(U(U(C(C1(U)),A),A,A,A,A,A),C(C1(U)),A,C(U),A),U,A,U,A,C(U),C(U),A,C(U),U,U,A,U,U,C(U))><L,U(A,U,U,U,C(U),C(U),U)><L,U(A,U,C(U),A,A)><L,A><L,U(U(U(U(C(C1(U)),A),A,A,A,A,A),C(C1(U)),C(C1(U)),C(U),A),U,U,U,U,U,A,A)><L,A><L,U(U(A,C(C1(U)),A,C(U),A),U,U,A,C(U),C(U),A)><L,U(U(A,A,C(C1(U)),A,A),C(U),A,U,U)><L,U(U(A,C(C1(U)),C(C1(U)),C(U),A),A,U,C(U),C(U),U,A,U,U)> -}
6c6dd772f89638c363e9d759f65bc2d7
  runMahppyBird ::
    GameVars.Config
    -> GameVars.Vars -> GameVars.MahppyBird a -> GHC.Types.IO a
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,U><L,U><C(C(C(S(SL)))),1*C1(C1(C1(U(U,1*U(1*U,A)))))><S,U>,
     Unfolding: InlineRule (0, True, True)
                MahppyBird.runMahppyBird1
                  `cast`
                (forall (a :: <*>_N).
                 <GameVars.Config>_R
                 ->_R <GameVars.Vars>_R
                 ->_R <GameVars.MahppyBird a>_R
                 ->_R Sym (GHC.Types.N:IO[0] <a>_R)) -}
c65b77fe3321f6c485eec9ac142acaca
  runMahppyBird1 ::
    GameVars.Config
    -> GameVars.Vars
    -> GameVars.MahppyBird a
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,U><L,U><C(C(C(S(SL)))),1*C1(C1(C1(U(U,1*U(1*U,A)))))><S,U>,
     Unfolding: InlineRule (4, True, False)
                (\ @ a
                   (conf :: GameVars.Config)
                   (vars :: GameVars.Vars)
                   (ds :: GameVars.MahppyBird a)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case ((ds
                          `cast`
                        (Trans
                             (GameVars.N:MahppyBird[0] <a>_N)
                             (Control.Monad.Trans.Reader.N:ReaderT[0]
                                  <*>_N
                                  <GameVars.Config>_R
                                  <Control.Monad.Trans.State.Lazy.StateT
                                     GameVars.Vars GHC.Types.IO>_R
                                  <a>_N))
                          conf)
                         `cast`
                       (Control.Monad.Trans.State.Lazy.N:StateT[0]
                            <GameVars.Vars>_N <GHC.Types.IO>_R <a>_N)
                         vars)
                        `cast`
                      (GHC.Types.N:IO[0] <(a, GameVars.Vars)>_R)
                        s of ds1 { (#,#) ipv ipv1 ->
                 (# ipv, case ipv1 of wild { (,) a1 ds2 -> a1 } #) }) -}
"SPEC/MahppyBird bgTexture @ (Const Texture)" [orphan] forall ($dFunctor :: GHC.Base.Functor
                                                                              (Data.Functor.Const.Const
                                                                                 SDL.Video.Renderer.Texture))
  GameVars.bgTexture @ (Data.Functor.Const.Const
                          SDL.Video.Renderer.Texture)
                     $dFunctor
  = MahppyBird.$sbgTexture
"SPEC/MahppyBird cFont @ (Const Font)" [orphan] forall ($dFunctor :: GHC.Base.Functor
                                                                       (Data.Functor.Const.Const
                                                                          SDL.Font.Font))
  GameVars.cFont @ (Data.Functor.Const.Const SDL.Font.Font) $dFunctor
  = MahppyBird.$scFont
"SPEC/MahppyBird cResources @ (Const Font)" [orphan] forall ($dFunctor :: GHC.Base.Functor
                                                                            (Data.Functor.Const.Const
                                                                               SDL.Font.Font))
  GameVars.cResources @ (Data.Functor.Const.Const SDL.Font.Font)
                      $dFunctor
  = MahppyBird.$scResources
"SPEC/MahppyBird cResources @ (Const Texture)" [orphan] forall ($dFunctor :: GHC.Base.Functor
                                                                               (Data.Functor.Const.Const
                                                                                  SDL.Video.Renderer.Texture))
  GameVars.cResources @ (Data.Functor.Const.Const
                           SDL.Video.Renderer.Texture)
                      $dFunctor
  = MahppyBird.$scResources1
"SPEC/MahppyBird cTextures @ (Const Texture)" [orphan] forall ($dFunctor :: GHC.Base.Functor
                                                                              (Data.Functor.Const.Const
                                                                                 SDL.Video.Renderer.Texture))
  GameVars.cTextures @ (Data.Functor.Const.Const
                          SDL.Video.Renderer.Texture)
                     $dFunctor
  = MahppyBird.$scTextures
"SPEC/MahppyBird gameOverWindowTexture @ (Const Texture)" [orphan] forall ($dFunctor :: GHC.Base.Functor
                                                                                          (Data.Functor.Const.Const
                                                                                             SDL.Video.Renderer.Texture))
  GameVars.gameOverWindowTexture @ (Data.Functor.Const.Const
                                      SDL.Video.Renderer.Texture)
                                 $dFunctor
  = MahppyBird.$sgameOverWindowTexture
"SPEC/MahppyBird guiTextures @ (Const Texture)" [orphan] forall ($dFunctor :: GHC.Base.Functor
                                                                                (Data.Functor.Const.Const
                                                                                   SDL.Video.Renderer.Texture))
  GameVars.guiTextures @ (Data.Functor.Const.Const
                            SDL.Video.Renderer.Texture)
                       $dFunctor
  = MahppyBird.$sguiTextures
"SPEC/MahppyBird highScoreFont @ (Const Font)" [orphan] forall ($dFunctor :: GHC.Base.Functor
                                                                               (Data.Functor.Const.Const
                                                                                  SDL.Font.Font))
  GameVars.highScoreFont @ (Data.Functor.Const.Const SDL.Font.Font)
                         $dFunctor
  = MahppyBird.$shighScoreFont
"SPEC/MahppyBird muteTexture @ (Const Texture)" [orphan] forall ($dFunctor :: GHC.Base.Functor
                                                                                (Data.Functor.Const.Const
                                                                                   SDL.Video.Renderer.Texture))
  GameVars.muteTexture @ (Data.Functor.Const.Const
                            SDL.Video.Renderer.Texture)
                       $dFunctor
  = MahppyBird.$smuteTexture
"SPEC/MahppyBird mutedTexture @ (Const Texture)" [orphan] forall ($dFunctor :: GHC.Base.Functor
                                                                                 (Data.Functor.Const.Const
                                                                                    SDL.Video.Renderer.Texture))
  GameVars.mutedTexture @ (Data.Functor.Const.Const
                             SDL.Video.Renderer.Texture)
                        $dFunctor
  = MahppyBird.$smutedTexture
"SPEC/MahppyBird playAgainBtnTexture @ (Const Texture)" [orphan] forall ($dFunctor :: GHC.Base.Functor
                                                                                        (Data.Functor.Const.Const
                                                                                           SDL.Video.Renderer.Texture))
  GameVars.playAgainBtnTexture @ (Data.Functor.Const.Const
                                    SDL.Video.Renderer.Texture)
                               $dFunctor
  = MahppyBird.$splayAgainBtnTexture
"SPEC/MahppyBird playBtnTexture @ (Const Texture)" [orphan] forall ($dFunctor :: GHC.Base.Functor
                                                                                   (Data.Functor.Const.Const
                                                                                      SDL.Video.Renderer.Texture))
  GameVars.playBtnTexture @ (Data.Functor.Const.Const
                               SDL.Video.Renderer.Texture)
                          $dFunctor
  = MahppyBird.$splayBtnTexture
"SPEC/MahppyBird pressSpacetoJumpTexture @ (Const Texture)" [orphan] forall ($dFunctor :: GHC.Base.Functor
                                                                                            (Data.Functor.Const.Const
                                                                                               SDL.Video.Renderer.Texture))
  GameVars.pressSpacetoJumpTexture @ (Data.Functor.Const.Const
                                        SDL.Video.Renderer.Texture)
                                   $dFunctor
  = MahppyBird.$spressSpacetoJumpTexture
"SPEC/MahppyBird quitBtnTexture @ (Const Texture)" [orphan] forall ($dFunctor :: GHC.Base.Functor
                                                                                   (Data.Functor.Const.Const
                                                                                      SDL.Video.Renderer.Texture))
  GameVars.quitBtnTexture @ (Data.Functor.Const.Const
                               SDL.Video.Renderer.Texture)
                          $dFunctor
  = MahppyBird.$squitBtnTexture
"SPEC/MahppyBird quitGameOverBtnTexture @ (Const Texture)" [orphan] forall ($dFunctor :: GHC.Base.Functor
                                                                                           (Data.Functor.Const.Const
                                                                                              SDL.Video.Renderer.Texture))
  GameVars.quitGameOverBtnTexture @ (Data.Functor.Const.Const
                                       SDL.Video.Renderer.Texture)
                                  $dFunctor
  = MahppyBird.$squitGameOverBtnTexture
"SPEC/MahppyBird scoreFont @ (Const Font)" [orphan] forall ($dFunctor :: GHC.Base.Functor
                                                                           (Data.Functor.Const.Const
                                                                              SDL.Font.Font))
  GameVars.scoreFont @ (Data.Functor.Const.Const SDL.Font.Font)
                     $dFunctor
  = MahppyBird.$sscoreFont
"SPEC/MahppyBird titleScreenbg @ (Const Texture)" [orphan] forall ($dFunctor :: GHC.Base.Functor
                                                                                  (Data.Functor.Const.Const
                                                                                     SDL.Video.Renderer.Texture))
  GameVars.titleScreenbg @ (Data.Functor.Const.Const
                              SDL.Video.Renderer.Texture)
                         $dFunctor
  = MahppyBird.$stitleScreenbg
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

