
==================== FINAL INTERFACE ====================
2018-06-04 17:45:35.894803533 UTC

interface main:ScoreManager 8022
  interface hash: 64cf1a8f2afb012708d6f488d1b12764
  ABI hash: 0955763b12813388df618f32aee1a497
  export-list hash: 3f42ff92e5da3f9a7eb6a2cabff3ca72
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: fbfc9b4f0124b3a129b4a2321798f29f
  sig of: Nothing
  used TH splices: False
  where
exports:
  ScoreManager.ScoreManager{ScoreManager.getHighScore ScoreManager.getScore ScoreManager.incrementScore ScoreManager.isHighScore ScoreManager.modifyHighScore ScoreManager.resetScore}
module dependencies: Animations GameVars Walls
package dependencies: QuickCheck-2.10.1 Stack-0.3.2
                      StateVar-1.1.1.0 Stream-0.4.7.2 adjunctions-4.4 array-0.5.2.0
                      base-4.10.1.0 base-orphans-0.7 bifunctors-5.5.2 binary-0.8.5.1
                      bytes-0.15.4 bytestring-0.10.8.2 call-stack-0.1.0 cereal-0.5.5.0
                      comonad-5.0.3 containers-0.5.10.2 contravariant-1.4.1
                      data-default-class-0.1.2.0 deepseq-1.4.3.0 distributive-0.5.3
                      exceptions-0.8.3 free-5.0.2 ghc-boot-th-8.2.2 ghc-prim-0.5.1.1
                      hashable-1.2.7.0 integer-gmp-1.0.1.0 integer-logarithms-1.0.2.1
                      kan-extensions-5.1 lazysmallcheck-0.6 lens-4.16.1
                      lifted-base-0.2.3.12 linear-1.20.7 monad-control-1.0.2.3 mtl-2.2.2
                      pretty-1.1.3.3 primitive-0.6.3.0 profunctors-5.2.2 random-1.1
                      reflection-2.1.3 scientific-0.3.6.0 sdl2-2.4.0.1 sdl2-mixer-1.1.0
                      sdl2-ttf-2.0.2 semigroupoids-5.2.2 stm-2.4.5.0 tagged-0.8.5
                      template-haskell-2.12.0.0 text-1.2.3.0 tf-random-0.5
                      th-abstraction-0.2.6.0 time-1.8.0.2 transformers-0.5.2.0
                      transformers-base-0.4.4 transformers-compat-0.5.1.4
                      unordered-containers-0.2.9.0 vector-0.12.0.1
orphans: time-1.8.0.2:Data.Time.Clock.TAI
         reflection-2.1.3:Data.Reflection
         vector-0.12.0.1:Data.Vector.Unboxed
         hashable-1.2.7.0:Data.Hashable.Generic text-1.2.3.0:Data.Text.Lazy
         linear-1.20.7:Linear.Instances base-orphans-0.7:Data.Orphans
         text-1.2.3.0:Data.Text binary-0.8.5.1:Data.Binary.Generic
         text-1.2.3.0:Data.Text.Show
         bytestring-0.10.8.2:Data.ByteString.Builder
         vector-0.12.0.1:Data.Vector.Fusion.Bundle
         stm-2.4.5.0:Control.Monad.STM time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian
         transformers-0.5.2.0:Control.Monad.Trans.Error
         base-4.10.1.0:GHC.Float base-4.10.1.0:GHC.Base
family instance modules: adjunctions-4.4:Data.Functor.Rep
                         base-4.10.1.0:Control.Applicative base-4.10.1.0:Data.Complex
                         base-4.10.1.0:Data.Either base-4.10.1.0:Data.Functor.Compose
                         base-4.10.1.0:Data.Functor.Const
                         base-4.10.1.0:Data.Functor.Identity
                         base-4.10.1.0:Data.Functor.Product base-4.10.1.0:Data.Functor.Sum
                         base-4.10.1.0:Data.List.NonEmpty base-4.10.1.0:Data.Monoid
                         base-4.10.1.0:Data.Semigroup base-4.10.1.0:Data.Type.Equality
                         base-4.10.1.0:Data.Version base-4.10.1.0:Data.Void
                         base-4.10.1.0:GHC.Exts base-4.10.1.0:GHC.Generics
                         base-4.10.1.0:GHC.IO.Exception base-4.10.1.0:GHC.TypeLits
                         base-4.10.1.0:GHC.TypeNats bifunctors-5.5.2:Data.Bifunctor.Biff
                         bifunctors-5.5.2:Data.Bifunctor.Clown
                         bifunctors-5.5.2:Data.Bifunctor.Fix
                         bifunctors-5.5.2:Data.Bifunctor.Flip
                         bifunctors-5.5.2:Data.Bifunctor.Join
                         bifunctors-5.5.2:Data.Bifunctor.Joker
                         bifunctors-5.5.2:Data.Bifunctor.Product
                         bifunctors-5.5.2:Data.Bifunctor.Sum
                         bifunctors-5.5.2:Data.Bifunctor.Tannen
                         bifunctors-5.5.2:Data.Bifunctor.Wrapped bytes-0.15.4:Data.Bytes.Get
                         bytes-0.15.4:Data.Bytes.Signed bytes-0.15.4:Data.Bytes.VarInt
                         containers-0.5.10.2:Data.IntMap.Internal
                         containers-0.5.10.2:Data.IntSet.Internal
                         containers-0.5.10.2:Data.Map.Internal
                         containers-0.5.10.2:Data.Sequence.Internal
                         containers-0.5.10.2:Data.Set.Internal containers-0.5.10.2:Data.Tree
                         free-5.0.2:Control.Comonad.Cofree
                         free-5.0.2:Control.Comonad.Trans.Cofree
                         free-5.0.2:Control.Monad.Free free-5.0.2:Control.Monad.Trans.Free
                         ghc-boot-th-8.2.2:GHC.ForeignSrcLang.Type
                         ghc-boot-th-8.2.2:GHC.LanguageExtensions.Type
                         kan-extensions-5.1:Data.Functor.Day
                         kan-extensions-5.1:Data.Functor.Yoneda lens-4.16.1:Control.Lens.At
                         lens-4.16.1:Control.Lens.Internal.Indexed
                         lens-4.16.1:Control.Lens.Reified lens-4.16.1:Control.Lens.Tuple
                         lens-4.16.1:Control.Lens.Wrapped lens-4.16.1:Control.Lens.Zoom
                         linear-1.20.7:Linear.Affine linear-1.20.7:Linear.Plucker
                         linear-1.20.7:Linear.Quaternion linear-1.20.7:Linear.V
                         linear-1.20.7:Linear.V0 linear-1.20.7:Linear.V1
                         linear-1.20.7:Linear.V2 linear-1.20.7:Linear.V3
                         linear-1.20.7:Linear.V4
                         monad-control-1.0.2.3:Control.Monad.Trans.Control
                         pretty-1.1.3.3:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.3:Text.PrettyPrint.HughesPJ
                         primitive-0.6.3.0:Control.Monad.Primitive
                         primitive-0.6.3.0:Data.Primitive.Array
                         primitive-0.6.3.0:Data.Primitive.ByteArray
                         profunctors-5.2.2:Data.Profunctor.Composition
                         profunctors-5.2.2:Data.Profunctor.Rep sdl2-2.4.0.1:SDL.Audio
                         sdl2-2.4.0.1:SDL.Event sdl2-2.4.0.1:SDL.Exception
                         sdl2-2.4.0.1:SDL.Hint sdl2-2.4.0.1:SDL.Init
                         sdl2-2.4.0.1:SDL.Input.GameController
                         sdl2-2.4.0.1:SDL.Input.Joystick sdl2-2.4.0.1:SDL.Input.Keyboard
                         sdl2-2.4.0.1:SDL.Input.Keyboard.Codes sdl2-2.4.0.1:SDL.Input.Mouse
                         sdl2-2.4.0.1:SDL.Internal.Types sdl2-2.4.0.1:SDL.Power
                         sdl2-2.4.0.1:SDL.Time sdl2-2.4.0.1:SDL.Video
                         sdl2-2.4.0.1:SDL.Video.OpenGL sdl2-2.4.0.1:SDL.Video.Renderer
                         sdl2-ttf-2.0.2:SDL.Font tagged-0.8.5:Data.Tagged
                         template-haskell-2.12.0.0:Language.Haskell.TH.Syntax
                         text-1.2.3.0:Data.Text text-1.2.3.0:Data.Text.Lazy
                         th-abstraction-0.2.6.0:Language.Haskell.TH.Datatype
                         unordered-containers-0.2.9.0:Data.HashMap.Base
                         unordered-containers-0.2.9.0:Data.HashSet
                         vector-0.12.0.1:Data.Vector vector-0.12.0.1:Data.Vector.Primitive
                         vector-0.12.0.1:Data.Vector.Storable
                         vector-0.12.0.1:Data.Vector.Unboxed
                         vector-0.12.0.1:Data.Vector.Unboxed.Base
import  -/  base-4.10.1.0:GHC.Base 782fd99b5e36f3698a26179a49afca64
import  -/  base-4.10.1.0:Prelude 31945b7d0084063347fc52506d3a4020
import  -/  ghc-prim-0.5.1.1:GHC.Classes 93e2660065dce9329577e83d76d8f0d4
import  -/  lens-4.16.1:Control.Lens d35b54db874b2147b5ffe1d3cd39d59d
import  -/  lens-4.16.1:Control.Lens.Getter be8fceadc62581701bcf558f995a8aa3
import  -/  lens-4.16.1:Control.Lens.Setter 31b5ab0739c579bd36402b436aadb7a0
import  -/  GameVars 95546c61036798381255e3d7e11311b2
  exports: bffadec9649d88993fa5a790487d46e7
  MahppyBird fb5607b55373083b420634b0454a4ddb
  Vars 5829ea20be4fb9a24ab87f3fe067aa3c
  highScore 065a2dc19a04707991d5216288f73ef0
  score 8ba7b7f7f1331f435b9dd7fece044d0a
  vPlayVars dbef10ec54712962f546a8d4b473ed09
import  -/  mtl-2.2.2:Control.Monad.State 4acb2e6037f370fa4b91900d626e6406
import  -/  mtl-2.2.2:Control.Monad.State.Class de8813e114276746770717ab3ee06916
6c33549276da942a8ff8f7c07d85fd2b
  $fScoreManagerMahppyBird ::
    ScoreManager.ScoreManager GameVars.MahppyBird
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ GameVars.MahppyBird
                  GameVars.$fMonadMahppyBird
                  ScoreManager.$fScoreManagerMahppyBird6
                    `cast`
                  (Nth:3
                       (Trans
                            (<GameVars.Vars -> ((), GameVars.Vars)>_R
                             ->_R Trans
                                      (<GameVars.Config>_R
                                       ->_R Trans
                                                (<GameVars.Vars>_R
                                                 ->_R Sym (GHC.Types.N:IO[0]
                                                               <((), GameVars.Vars)>_R))
                                                (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                          <GameVars.Vars>_N
                                                          <GHC.Types.IO>_R
                                                          <()>_N)))
                                      (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                <*>_N
                                                <GameVars.Config>_R
                                                <Control.Monad.Trans.State.Lazy.StateT
                                                   GameVars.Vars GHC.Types.IO>_R
                                                <()>_N)))
                            (<GameVars.Vars -> ((), GameVars.Vars)>_R
                             ->_R Sym (GameVars.N:MahppyBird[0]) <()>_N)))
                  ScoreManager.$fScoreManagerMahppyBird5
                    `cast`
                  (Trans
                       (<GameVars.Config>_R
                        ->_R Trans
                                 (<GameVars.Vars>_R
                                  ->_R Sym (GHC.Types.N:IO[0] <(GHC.Types.Int, GameVars.Vars)>_R))
                                 (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                           <GameVars.Vars>_N <GHC.Types.IO>_R <GHC.Types.Int>_N)))
                       (Trans
                            (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                      <*>_N
                                      <GameVars.Config>_R
                                      <Control.Monad.Trans.State.Lazy.StateT
                                         GameVars.Vars GHC.Types.IO>_R
                                      <GHC.Types.Int>_N))
                            (Sym (GameVars.N:MahppyBird[0]) <GHC.Types.Int>_N)))
                  ScoreManager.$fScoreManagerMahppyBird4
                    `cast`
                  (Nth:3
                       (Trans
                            (<GameVars.Vars -> ((), GameVars.Vars)>_R
                             ->_R Trans
                                      (<GameVars.Config>_R
                                       ->_R Trans
                                                (<GameVars.Vars>_R
                                                 ->_R Sym (GHC.Types.N:IO[0]
                                                               <((), GameVars.Vars)>_R))
                                                (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                          <GameVars.Vars>_N
                                                          <GHC.Types.IO>_R
                                                          <()>_N)))
                                      (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                <*>_N
                                                <GameVars.Config>_R
                                                <Control.Monad.Trans.State.Lazy.StateT
                                                   GameVars.Vars GHC.Types.IO>_R
                                                <()>_N)))
                            (<GameVars.Vars -> ((), GameVars.Vars)>_R
                             ->_R Sym (GameVars.N:MahppyBird[0]) <()>_N)))
                  ScoreManager.$fScoreManagerMahppyBird3
                    `cast`
                  (<GHC.Types.Int>_R
                   ->_R Trans
                            (<GameVars.Config>_R
                             ->_R Trans
                                      (<GameVars.Vars>_R
                                       ->_R Sym (GHC.Types.N:IO[0]
                                                     <(GHC.Types.Bool, GameVars.Vars)>_R))
                                      (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                <GameVars.Vars>_N
                                                <GHC.Types.IO>_R
                                                <GHC.Types.Bool>_N)))
                            (Trans
                                 (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                           <*>_N
                                           <GameVars.Config>_R
                                           <Control.Monad.Trans.State.Lazy.StateT
                                              GameVars.Vars GHC.Types.IO>_R
                                           <GHC.Types.Bool>_N))
                                 (Sym (GameVars.N:MahppyBird[0]) <GHC.Types.Bool>_N)))
                  ScoreManager.$fScoreManagerMahppyBird2
                    `cast`
                  (<GHC.Types.Int>_R
                   ->_R Trans
                            (<GameVars.Config>_R
                             ->_R Trans
                                      (<GameVars.Vars>_R
                                       ->_R Sym (GHC.Types.N:IO[0] <((), GameVars.Vars)>_R))
                                      (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                <GameVars.Vars>_N <GHC.Types.IO>_R <()>_N)))
                            (Trans
                                 (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                           <*>_N
                                           <GameVars.Config>_R
                                           <Control.Monad.Trans.State.Lazy.StateT
                                              GameVars.Vars GHC.Types.IO>_R
                                           <()>_N))
                                 (Sym (GameVars.N:MahppyBird[0]) <()>_N)))
                  ScoreManager.$fScoreManagerMahppyBird1
                    `cast`
                  (Trans
                       (<GameVars.Config>_R
                        ->_R Trans
                                 (<GameVars.Vars>_R
                                  ->_R Sym (GHC.Types.N:IO[0] <(GHC.Types.Int, GameVars.Vars)>_R))
                                 (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                           <GameVars.Vars>_N <GHC.Types.IO>_R <GHC.Types.Int>_N)))
                       (Trans
                            (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                      <*>_N
                                      <GameVars.Config>_R
                                      <Control.Monad.Trans.State.Lazy.StateT
                                         GameVars.Vars GHC.Types.IO>_R
                                      <GHC.Types.Int>_N))
                            (Sym (GameVars.N:MahppyBird[0]) <GHC.Types.Int>_N))) -}
cadcbe42243431e8b8b482eae65fd716
  $fScoreManagerMahppyBird1 ::
    GameVars.Config
    -> GameVars.Vars
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          (GHC.Types.Int, GameVars.Vars) #)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,A><L,U(U,U,U,U,U,U)><S,U>,
     Unfolding: InlineRule (3, True, False)
                (\ (r1 :: GameVars.Config)
                   (eta :: GameVars.Vars)
                   (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 (# eta1,
                    (case eta of wild { GameVars.Vars x1 x2 x3 x4 dt1 dt2 ->
                     GHC.Types.I# dt2 },
                     eta) #)) -}
e6d2f26312fdb0bb5d8b986dad06cf59
  $fScoreManagerMahppyBird2 ::
    GHC.Types.Int
    -> GameVars.Config
    -> GameVars.Vars
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, ((), GameVars.Vars) #)
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,1*U(U)><L,A><L,1*U(U,U,U,U,U,A)><S,U>,
     Unfolding: InlineRule (4, True, False)
                (\ (score :: GHC.Types.Int)
                   (eta :: GameVars.Config)
                   (eta1 :: GameVars.Vars)
                   (eta2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 (# eta2,
                    (GHC.Tuple.(),
                     case eta1 of wild { GameVars.Vars x1 x2 x3 x4 dt1 dt2 ->
                     case score of dt { GHC.Types.I# dt4 ->
                     GameVars.Vars x1 x2 x3 x4 dt1 dt4 } }) #)) -}
e13f30bcbe86f10159b90e6ceec8df82
  $fScoreManagerMahppyBird3 ::
    GHC.Types.Int
    -> GameVars.Config
    -> GameVars.Vars
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          (GHC.Types.Bool, GameVars.Vars) #)
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,1*U(U)><L,A><L,U(U,U,U,U,U,U)><S,U>,
     Unfolding: InlineRule (4, True, False)
                (\ (score :: GHC.Types.Int)
                   (eta :: GameVars.Config)
                   (eta1 :: GameVars.Vars)
                   (eta2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 (# eta2,
                    (case eta1 of wild { GameVars.Vars x1 x2 x3 x4 dt1 dt2 ->
                     case score of wild1 { GHC.Types.I# y ->
                     GHC.Prim.tagToEnum# @ GHC.Types.Bool (GHC.Prim.<# dt2 y) } },
                     eta1) #)) -}
30f25c530f17fd7d38451957e4c95dc4
  $fScoreManagerMahppyBird4 ::
    GameVars.Config
    -> GameVars.Vars
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, ((), GameVars.Vars) #)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,A><L,1*U(U,1*U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,A),U,U,U,U)><S,U>,
     Unfolding: InlineRule (3, True, False)
                (\ (eta1 :: GameVars.Config)
                   (eta2 :: GameVars.Vars)
                   (eta3 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 (# eta3,
                    (GHC.Tuple.(),
                     case eta2 of wild { GameVars.Vars x1 x2 x3 x4 dt1 dt2 ->
                     GameVars.Vars
                       x1
                       (case x2 of wild1 { GameVars.PlayVars dt4 dt5 dt3 dt6 dt7 dt8 dt9 x7 dt10 dt11 dt12 dt13 dt14 dt15 dt16 dt17 dt18 dt19 ->
                        GameVars.PlayVars
                          dt4
                          dt5
                          dt3
                          dt6
                          dt7
                          dt8
                          dt9
                          x7
                          dt10
                          dt11
                          dt12
                          dt13
                          dt14
                          dt15
                          dt16
                          dt17
                          dt18
                          0# })
                       x3
                       x4
                       dt1
                       dt2 }) #)) -}
7b6b16789202221d2ca82786c0ba4c35
  $fScoreManagerMahppyBird5 ::
    GameVars.Config
    -> GameVars.Vars
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          (GHC.Types.Int, GameVars.Vars) #)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,A><L,U(U,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U),U,U,U,U)><S,U>,
     Unfolding: InlineRule (3, True, False)
                (\ (r1 :: GameVars.Config)
                   (eta :: GameVars.Vars)
                   (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 (# eta1,
                    (case eta of wild { GameVars.Vars x1 x2 x3 x4 dt1 dt2 ->
                     case x2 of wild1 { GameVars.PlayVars dt4 dt5 dt3 dt6 dt7 dt8 dt9 x7 dt10 dt11 dt12 dt13 dt14 dt15 dt16 dt17 dt18 dt19 ->
                     GHC.Types.I# dt19 } },
                     eta) #)) -}
0831de6022b6e8d1350e4d841fadcdf6
  $fScoreManagerMahppyBird6 ::
    GameVars.Config
    -> GameVars.Vars
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, ((), GameVars.Vars) #)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,A><L,1*U(U,1*U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U),U,U,U,U)><S,U>,
     Unfolding: InlineRule (3, True, False)
                (\ (eta1 :: GameVars.Config)
                   (eta2 :: GameVars.Vars)
                   (eta3 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 (# eta3,
                    (GHC.Tuple.(),
                     case eta2 of wild { GameVars.Vars x1 x2 x3 x4 dt1 dt2 ->
                     GameVars.Vars
                       x1
                       (case x2 of wild1 { GameVars.PlayVars dt4 dt5 dt3 dt6 dt7 dt8 dt9 x7 dt10 dt11 dt12 dt13 dt14 dt15 dt16 dt17 dt18 dt19 ->
                        GameVars.PlayVars
                          dt4
                          dt5
                          dt3
                          dt6
                          dt7
                          dt8
                          dt9
                          x7
                          dt10
                          dt11
                          dt12
                          dt13
                          dt14
                          dt15
                          dt16
                          dt17
                          dt18
                          (GHC.Prim.+# dt19 1#) })
                       x3
                       x4
                       dt1
                       dt2 }) #)) -}
cf79d5fa19bc4c251dd2725fa3b9771a
  $tc'C:ScoreManager :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   193157754817608649##
                   17739421477352126102##
                   ScoreManager.$trModule
                   ScoreManager.$tc'C:ScoreManager2
                   1#
                   ScoreManager.$tc'C:ScoreManager1) -}
f3741eb56b4bb790004d20e0e8ec42a9
  $tc'C:ScoreManager1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
3d03637299fd7e880a080d6acd8f790e
  $tc'C:ScoreManager2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS ScoreManager.$tc'C:ScoreManager3) -}
bc5603366d400b052e88b41b07004145
  $tc'C:ScoreManager3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'C:ScoreManager"#) -}
4517a57f53c6556baaed9f68dc7fbc88
  $tcScoreManager :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6211555464834862836##
                   6769609118730474418##
                   ScoreManager.$trModule
                   ScoreManager.$trModule1
                   0#
                   ScoreManager.$tcScoreManager1) -}
59f5e3a404791130ab9f4be126b1b4b4
  $tcScoreManager1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
6e74b9bf3507a84ab6c15a866e060dbe
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   ScoreManager.$trModule3
                   ScoreManager.$trModule1) -}
686f39e9af1c0270f708518ca0490e75
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS ScoreManager.$trModule2) -}
034610351b3961eda81c15b8bb0675f3
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ScoreManager"#) -}
06cf8e822364a6c63acfe80233b1806d
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS ScoreManager.$trModule4) -}
7decbf88afee55a48edae865a59ad36e
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("main"#) -}
6c33549276da942a8ff8f7c07d85fd2b
  class GHC.Base.Monad m => ScoreManager (m :: * -> *) where
    incrementScore :: m ()
    getScore :: m GHC.Types.Int
    resetScore :: m ()
    isHighScore :: GHC.Types.Int -> m GHC.Types.Bool
    modifyHighScore :: GHC.Types.Int -> m ()
    getHighScore :: m GHC.Types.Int
    {-# MINIMAL incrementScore, getScore, resetScore, isHighScore,
                modifyHighScore, getHighScore #-}
instance ScoreManager.ScoreManager [GameVars.MahppyBird]
  = ScoreManager.$fScoreManagerMahppyBird
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

