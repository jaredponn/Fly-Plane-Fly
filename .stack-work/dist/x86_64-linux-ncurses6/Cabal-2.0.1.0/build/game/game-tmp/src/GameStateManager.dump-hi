
==================== FINAL INTERFACE ====================
2018-06-05 00:36:03.192908519 UTC

interface main:GameStateManager 8022
  interface hash: 52609a2d5b89ed148fa2d0349d9f6c5f
  ABI hash: ccbeed6e4a039e9548d0e336726c3043
  export-list hash: 31a22b4a25b84d92d55314f503d3c92f
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 839f3f975377d929d6342740155f98f2
  sig of: Nothing
  used TH splices: False
  where
exports:
  GameStateManager.GameStateManager{GameStateManager.peekGameState GameStateManager.popGameState GameStateManager.popGameState_ GameStateManager.pushGameState}
module dependencies: Animations GameVars Walls
package dependencies: QuickCheck-2.10.1 Stack-0.3.2
                      StateVar-1.1.1.0 Stream-0.4.7.2 adjunctions-4.4 array-0.5.2.0
                      base-4.10.1.0 base-orphans-0.7 bifunctors-5.5.2 binary-0.8.5.1
                      bytes-0.15.4 bytestring-0.10.8.2 call-stack-0.1.0 cereal-0.5.5.0
                      comonad-5.0.3 containers-0.5.10.2 contravariant-1.4.1
                      data-default-class-0.1.2.0 deepseq-1.4.3.0 distributive-0.5.3
                      exceptions-0.8.3 free-5.0.2 ghc-boot-th-8.2.2 ghc-prim-0.5.1.1
                      hashable-1.2.7.0 integer-gmp-1.0.1.0 integer-logarithms-1.0.2.1
                      kan-extensions-5.1 lazysmallcheck-0.6 lens-4.16.1
                      lifted-base-0.2.3.12 linear-1.20.7 monad-control-1.0.2.3 mtl-2.2.2
                      pretty-1.1.3.3 primitive-0.6.3.0 profunctors-5.2.2 random-1.1
                      reflection-2.1.3 scientific-0.3.6.0 sdl2-2.4.0.1 sdl2-mixer-1.1.0
                      sdl2-ttf-2.0.2 semigroupoids-5.2.2 stm-2.4.5.0 tagged-0.8.5
                      template-haskell-2.12.0.0 text-1.2.3.0 tf-random-0.5
                      th-abstraction-0.2.6.0 time-1.8.0.2 transformers-0.5.2.0
                      transformers-base-0.4.4 transformers-compat-0.5.1.4
                      unordered-containers-0.2.9.0 vector-0.12.0.1
orphans: time-1.8.0.2:Data.Time.Clock.TAI
         linear-1.20.7:Linear.Instances time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian
         reflection-2.1.3:Data.Reflection
         vector-0.12.0.1:Data.Vector.Unboxed
         vector-0.12.0.1:Data.Vector.Fusion.Bundle
         hashable-1.2.7.0:Data.Hashable.Generic text-1.2.3.0:Data.Text.Lazy
         text-1.2.3.0:Data.Text binary-0.8.5.1:Data.Binary.Generic
         bytestring-0.10.8.2:Data.ByteString.Builder
         text-1.2.3.0:Data.Text.Show base-orphans-0.7:Data.Orphans
         transformers-0.5.2.0:Control.Monad.Trans.Error
         stm-2.4.5.0:Control.Monad.STM base-4.10.1.0:GHC.Float
         base-4.10.1.0:GHC.Base
family instance modules: adjunctions-4.4:Data.Functor.Rep
                         base-4.10.1.0:Control.Applicative base-4.10.1.0:Data.Complex
                         base-4.10.1.0:Data.Either base-4.10.1.0:Data.Functor.Compose
                         base-4.10.1.0:Data.Functor.Const
                         base-4.10.1.0:Data.Functor.Identity
                         base-4.10.1.0:Data.Functor.Product base-4.10.1.0:Data.Functor.Sum
                         base-4.10.1.0:Data.List.NonEmpty base-4.10.1.0:Data.Monoid
                         base-4.10.1.0:Data.Semigroup base-4.10.1.0:Data.Type.Equality
                         base-4.10.1.0:Data.Version base-4.10.1.0:Data.Void
                         base-4.10.1.0:GHC.Exts base-4.10.1.0:GHC.Generics
                         base-4.10.1.0:GHC.IO.Exception base-4.10.1.0:GHC.TypeLits
                         base-4.10.1.0:GHC.TypeNats bifunctors-5.5.2:Data.Bifunctor.Biff
                         bifunctors-5.5.2:Data.Bifunctor.Clown
                         bifunctors-5.5.2:Data.Bifunctor.Fix
                         bifunctors-5.5.2:Data.Bifunctor.Flip
                         bifunctors-5.5.2:Data.Bifunctor.Join
                         bifunctors-5.5.2:Data.Bifunctor.Joker
                         bifunctors-5.5.2:Data.Bifunctor.Product
                         bifunctors-5.5.2:Data.Bifunctor.Sum
                         bifunctors-5.5.2:Data.Bifunctor.Tannen
                         bifunctors-5.5.2:Data.Bifunctor.Wrapped bytes-0.15.4:Data.Bytes.Get
                         bytes-0.15.4:Data.Bytes.Signed bytes-0.15.4:Data.Bytes.VarInt
                         containers-0.5.10.2:Data.IntMap.Internal
                         containers-0.5.10.2:Data.IntSet.Internal
                         containers-0.5.10.2:Data.Map.Internal
                         containers-0.5.10.2:Data.Sequence.Internal
                         containers-0.5.10.2:Data.Set.Internal containers-0.5.10.2:Data.Tree
                         free-5.0.2:Control.Comonad.Cofree
                         free-5.0.2:Control.Comonad.Trans.Cofree
                         free-5.0.2:Control.Monad.Free free-5.0.2:Control.Monad.Trans.Free
                         ghc-boot-th-8.2.2:GHC.ForeignSrcLang.Type
                         ghc-boot-th-8.2.2:GHC.LanguageExtensions.Type
                         kan-extensions-5.1:Data.Functor.Day
                         kan-extensions-5.1:Data.Functor.Yoneda lens-4.16.1:Control.Lens.At
                         lens-4.16.1:Control.Lens.Internal.Indexed
                         lens-4.16.1:Control.Lens.Reified lens-4.16.1:Control.Lens.Tuple
                         lens-4.16.1:Control.Lens.Wrapped lens-4.16.1:Control.Lens.Zoom
                         linear-1.20.7:Linear.Affine linear-1.20.7:Linear.Plucker
                         linear-1.20.7:Linear.Quaternion linear-1.20.7:Linear.V
                         linear-1.20.7:Linear.V0 linear-1.20.7:Linear.V1
                         linear-1.20.7:Linear.V2 linear-1.20.7:Linear.V3
                         linear-1.20.7:Linear.V4
                         monad-control-1.0.2.3:Control.Monad.Trans.Control
                         pretty-1.1.3.3:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.3:Text.PrettyPrint.HughesPJ
                         primitive-0.6.3.0:Control.Monad.Primitive
                         primitive-0.6.3.0:Data.Primitive.Array
                         primitive-0.6.3.0:Data.Primitive.ByteArray
                         profunctors-5.2.2:Data.Profunctor.Composition
                         profunctors-5.2.2:Data.Profunctor.Rep sdl2-2.4.0.1:SDL.Audio
                         sdl2-2.4.0.1:SDL.Event sdl2-2.4.0.1:SDL.Exception
                         sdl2-2.4.0.1:SDL.Hint sdl2-2.4.0.1:SDL.Init
                         sdl2-2.4.0.1:SDL.Input.GameController
                         sdl2-2.4.0.1:SDL.Input.Joystick sdl2-2.4.0.1:SDL.Input.Keyboard
                         sdl2-2.4.0.1:SDL.Input.Keyboard.Codes sdl2-2.4.0.1:SDL.Input.Mouse
                         sdl2-2.4.0.1:SDL.Internal.Types sdl2-2.4.0.1:SDL.Power
                         sdl2-2.4.0.1:SDL.Time sdl2-2.4.0.1:SDL.Video
                         sdl2-2.4.0.1:SDL.Video.OpenGL sdl2-2.4.0.1:SDL.Video.Renderer
                         sdl2-ttf-2.0.2:SDL.Font tagged-0.8.5:Data.Tagged
                         template-haskell-2.12.0.0:Language.Haskell.TH.Syntax
                         text-1.2.3.0:Data.Text text-1.2.3.0:Data.Text.Lazy
                         th-abstraction-0.2.6.0:Language.Haskell.TH.Datatype
                         unordered-containers-0.2.9.0:Data.HashMap.Base
                         unordered-containers-0.2.9.0:Data.HashSet
                         vector-0.12.0.1:Data.Vector vector-0.12.0.1:Data.Vector.Primitive
                         vector-0.12.0.1:Data.Vector.Storable
                         vector-0.12.0.1:Data.Vector.Unboxed
                         vector-0.12.0.1:Data.Vector.Unboxed.Base
import  -/  Stack-0.3.2:Data.Stack e7f704bd11627e1a734f5ce5c24b374a
import  -/  base-4.10.1.0:Data.Functor 2ffda4f936b8f474394d93205750aff3
import  -/  base-4.10.1.0:GHC.Base 782fd99b5e36f3698a26179a49afca64
import  -/  base-4.10.1.0:Prelude 31945b7d0084063347fc52506d3a4020
import  -/  lens-4.16.1:Control.Lens d35b54db874b2147b5ffe1d3cd39d59d
import  -/  lens-4.16.1:Control.Lens.Getter be8fceadc62581701bcf558f995a8aa3
import  -/  lens-4.16.1:Control.Lens.Setter 31b5ab0739c579bd36402b436aadb7a0
import  -/  GameVars c97b478d52eb65df6d94cfdf494ea2ce
  exports: 54748b09c2a15e9d35b796e54eb1daea
  GameState 862115caec0cc090e3ab2e897cce53f2
  MahppyBird 1989f26957dc34ff4b450af06c2d546d
  Vars 5829ea20be4fb9a24ab87f3fe067aa3c
  vGameStateStack a9c0714db857d750c16387ceb110452d
import  -/  mtl-2.2.2:Control.Monad.State 4acb2e6037f370fa4b91900d626e6406
import  -/  mtl-2.2.2:Control.Monad.State.Class de8813e114276746770717ab3ee06916
324b55f11cd0fe2360a2e9874ea026b9
  $fGameStateManagerMahppyBird ::
    GameStateManager.GameStateManager GameVars.MahppyBird
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ GameVars.MahppyBird
                  GameVars.$fMonadMahppyBird
                  GameStateManager.$fGameStateManagerMahppyBird10
                    `cast`
                  (<GameVars.GameState>_R
                   ->_R Trans
                            (<GameVars.Config>_R
                             ->_R Trans
                                      (<GameVars.Vars>_R
                                       ->_R Sym (GHC.Types.N:IO[0] <((), GameVars.Vars)>_R))
                                      (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                <GameVars.Vars>_N <GHC.Types.IO>_R <()>_N)))
                            (Trans
                                 (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                           <*>_N
                                           <GameVars.Config>_R
                                           <Control.Monad.Trans.State.Lazy.StateT
                                              GameVars.Vars GHC.Types.IO>_R
                                           <()>_N))
                                 (Sym (GameVars.N:MahppyBird[0]) <()>_N)))
                  GameStateManager.$fGameStateManagerMahppyBird7
                    `cast`
                  (Trans
                       (<GameVars.Config>_R
                        ->_R Trans
                                 (<GameVars.Vars>_R
                                  ->_R Sym (GHC.Types.N:IO[0]
                                                <(GameVars.GameState, GameVars.Vars)>_R))
                                 (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                           <GameVars.Vars>_N
                                           <GHC.Types.IO>_R
                                           <GameVars.GameState>_N)))
                       (Trans
                            (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                      <*>_N
                                      <GameVars.Config>_R
                                      <Control.Monad.Trans.State.Lazy.StateT
                                         GameVars.Vars GHC.Types.IO>_R
                                      <GameVars.GameState>_N))
                            (Sym (GameVars.N:MahppyBird[0]) <GameVars.GameState>_N)))
                  GameStateManager.$fGameStateManagerMahppyBird4
                    `cast`
                  (Trans
                       (<GameVars.Config>_R
                        ->_R Trans
                                 (<GameVars.Vars>_R
                                  ->_R Sym (GHC.Types.N:IO[0] <((), GameVars.Vars)>_R))
                                 (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                           <GameVars.Vars>_N <GHC.Types.IO>_R <()>_N)))
                       (Trans
                            (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                      <*>_N
                                      <GameVars.Config>_R
                                      <Control.Monad.Trans.State.Lazy.StateT
                                         GameVars.Vars GHC.Types.IO>_R
                                      <()>_N))
                            (Sym (GameVars.N:MahppyBird[0]) <()>_N)))
                  GameStateManager.$fGameStateManagerMahppyBird1
                    `cast`
                  (Trans
                       (<GameVars.Config>_R
                        ->_R Trans
                                 (<GameVars.Vars>_R
                                  ->_R Sym (GHC.Types.N:IO[0]
                                                <(GameVars.GameState, GameVars.Vars)>_R))
                                 (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                           <GameVars.Vars>_N
                                           <GHC.Types.IO>_R
                                           <GameVars.GameState>_N)))
                       (Trans
                            (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                      <*>_N
                                      <GameVars.Config>_R
                                      <Control.Monad.Trans.State.Lazy.StateT
                                         GameVars.Vars GHC.Types.IO>_R
                                      <GameVars.GameState>_N))
                            (Sym (GameVars.N:MahppyBird[0]) <GameVars.GameState>_N))) -}
116cc3cbe68bc45a1dcb67a99a3085fe
  $fGameStateManagerMahppyBird1 ::
    GameVars.Config
    -> GameVars.Vars
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          (GameVars.GameState, GameVars.Vars) #)
  {- Arity: 3,
     Strictness: <L,A><S(S(SS)LLLLL),1*U(1*U(U,U),U,U,U,U,U)><S,U>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GameVars.Config)
                   (w1 :: GameVars.Vars)
                   (w2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case w1 of ww { GameVars.Vars ww1 ww2 ww3 ww4 ww5 ww6 ->
                 case ww1 of ww7 { Data.Stack.Stack ww8 ww9 ->
                 case Data.Stack.$wstackPop @ GameVars.GameState ww8 ww9 of wild {
                   GHC.Base.Nothing
                   -> (GHC.Magic.noinline
                         @ (forall a1. [GHC.Types.Char] -> GHC.Types.IO a1)
                         GHC.IO.failIO1
                           `cast`
                         (forall (a1 :: <*>_N).
                          <GHC.Base.String>_R ->_R Sym (GHC.Types.N:IO[0] <a1>_R))
                         @ (GameVars.GameState, GameVars.Vars)
                         GameStateManager.$fGameStateManagerMahppyBird2)
                        `cast`
                      (GHC.Types.N:IO[0] <(GameVars.GameState, GameVars.Vars)>_R)
                        w2
                   GHC.Base.Just ds
                   -> case ds of wild1 { (,) nstack val ->
                      (# w2,
                         (val,
                          GameVars.Vars
                            (Data.Stack.Stack @ GameVars.GameState ww8 ww9)
                            ww2
                            ww3
                            ww4
                            ww5
                            ww6) #) } } } }) -}
9d0eb58877aa94d3292fb5a7128fbc97
  $fGameStateManagerMahppyBird10 ::
    GameVars.GameState
    -> GameVars.Config
    -> GameVars.Vars
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, ((), GameVars.Vars) #)
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,U><L,A><L,1*U(1*U(U,U),U,U,U,U,U)><S,U>,
     Unfolding: InlineRule (4, True, False)
                (\ (nstate :: GameVars.GameState)
                   (eta :: GameVars.Config)
                   (eta1 :: GameVars.Vars)
                   (eta2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 (# eta2,
                    (GHC.Tuple.(),
                     case eta1 of wild { GameVars.Vars x1 x2 x3 x4 dt1 dt2 ->
                     GameVars.Vars
                       (Data.Stack.stackPush @ GameVars.GameState x1 nstate)
                       x2
                       x3
                       x4
                       dt1
                       dt2 }) #)) -}
4f0d1ed05f5f1a701be3f243093f489c
  $fGameStateManagerMahppyBird2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   GameStateManager.$fGameStateManagerMahppyBird3) -}
c3ceeb214623904b5cdf1ea687d205db
  $fGameStateManagerMahppyBird3 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("Pattern match failure in do expression at src/GameStateManager.hs:43:17-34"#) -}
59c8767df07d0e41b3dd7f892ab70774
  $fGameStateManagerMahppyBird4 ::
    GameVars.Config
    -> GameVars.Vars
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, ((), GameVars.Vars) #)
  {- Arity: 3,
     Strictness: <L,A><S(S(SS)LLLLL),1*U(1*U(U,1*U),U,U,U,U,U)><S,U>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GameVars.Config)
                   (w1 :: GameVars.Vars)
                   (w2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case w1 of ww { GameVars.Vars ww1 ww2 ww3 ww4 ww5 ww6 ->
                 case ww1 of ww7 { Data.Stack.Stack ww8 ww9 ->
                 case Data.Stack.$wstackPop @ GameVars.GameState ww8 ww9 of wild {
                   GHC.Base.Nothing
                   -> (GHC.Magic.noinline
                         @ (forall a1. [GHC.Types.Char] -> GHC.Types.IO a1)
                         GHC.IO.failIO1
                           `cast`
                         (forall (a1 :: <*>_N).
                          <GHC.Base.String>_R ->_R Sym (GHC.Types.N:IO[0] <a1>_R))
                         @ ((), GameVars.Vars)
                         GameStateManager.$fGameStateManagerMahppyBird5)
                        `cast`
                      (GHC.Types.N:IO[0] <((), GameVars.Vars)>_R)
                        w2
                   GHC.Base.Just ds
                   -> case ds of wild1 { (,) nstack val ->
                      (# w2,
                         (GHC.Tuple.(),
                          GameVars.Vars nstack ww2 ww3 ww4 ww5 ww6) #) } } } }) -}
cc9e1240941f5b594312b0e927f57bb4
  $fGameStateManagerMahppyBird5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   GameStateManager.$fGameStateManagerMahppyBird6) -}
c8a65bbc2a8388b72bbe0fa073b3010a
  $fGameStateManagerMahppyBird6 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("Pattern match failure in do expression at src/GameStateManager.hs:38:17-34"#) -}
a2d4ecbde785195c28d5703d3975c63d
  $fGameStateManagerMahppyBird7 ::
    GameVars.Config
    -> GameVars.Vars
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          (GameVars.GameState, GameVars.Vars) #)
  {- Arity: 3,
     Strictness: <L,A><S(S(SS)LLLLL),1*U(1*U(U,1*U),U,U,U,U,U)><S,U>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GameVars.Config)
                   (w1 :: GameVars.Vars)
                   (w2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case w1 of ww { GameVars.Vars ww1 ww2 ww3 ww4 ww5 ww6 ->
                 case ww1 of ww7 { Data.Stack.Stack ww8 ww9 ->
                 case Data.Stack.$wstackPop @ GameVars.GameState ww8 ww9 of wild {
                   GHC.Base.Nothing
                   -> (GHC.Magic.noinline
                         @ (forall a1. [GHC.Types.Char] -> GHC.Types.IO a1)
                         GHC.IO.failIO1
                           `cast`
                         (forall (a1 :: <*>_N).
                          <GHC.Base.String>_R ->_R Sym (GHC.Types.N:IO[0] <a1>_R))
                         @ (GameVars.GameState, GameVars.Vars)
                         GameStateManager.$fGameStateManagerMahppyBird8)
                        `cast`
                      (GHC.Types.N:IO[0] <(GameVars.GameState, GameVars.Vars)>_R)
                        w2
                   GHC.Base.Just ds
                   -> case ds of wild1 { (,) nstack val ->
                      (# w2,
                         (val, GameVars.Vars nstack ww2 ww3 ww4 ww5 ww6) #) } } } }) -}
6dce59461ba555d7fc91499ac4bf9a4e
  $fGameStateManagerMahppyBird8 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   GameStateManager.$fGameStateManagerMahppyBird9) -}
0bf52eb938d6c61fc9acf2b40377fd12
  $fGameStateManagerMahppyBird9 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("Pattern match failure in do expression at src/GameStateManager.hs:32:17-34"#) -}
83625dcc184b1ce6cc820ea8af415d06
  $tc'C:GameStateManager :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2761347806144176790##
                   15271726074443018595##
                   GameStateManager.$trModule
                   GameStateManager.$tc'C:GameStateManager2
                   1#
                   GameStateManager.$tc'C:GameStateManager1) -}
1dc8bbb60203e8850ba0b2a7e767ba14
  $tc'C:GameStateManager1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
097716786d9e19f7612b67b7eb8c0ff3
  $tc'C:GameStateManager2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   GameStateManager.$tc'C:GameStateManager3) -}
28d6cde3c7791a4f19bf7380c0f95a13
  $tc'C:GameStateManager3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'C:GameStateManager"#) -}
6bb3e2092be12d266821f27858738119
  $tcGameStateManager :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11953441322524948286##
                   7947444042802754636##
                   GameStateManager.$trModule
                   GameStateManager.$trModule1
                   0#
                   GameStateManager.$tcGameStateManager1) -}
5eae18a32c9af5867984a6d5ca61e037
  $tcGameStateManager1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
5510af63d6af74902d8e1301993475f8
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   GameStateManager.$trModule3
                   GameStateManager.$trModule1) -}
b5f3957558f2fe29df1ddef9905ec256
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS GameStateManager.$trModule2) -}
ecc340443fbcfe3d62a041111ef9a11f
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("GameStateManager"#) -}
a2122d81754f4c97d90886dba35d9b5f
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS GameStateManager.$trModule4) -}
1a512e3fd7d2556d9273f94b598a1070
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("main"#) -}
324b55f11cd0fe2360a2e9874ea026b9
  class GHC.Base.Monad m => GameStateManager (m :: * -> *) where
    pushGameState :: GameVars.GameState -> m ()
    popGameState :: m GameVars.GameState
    popGameState_ :: m ()
    peekGameState :: m GameVars.GameState
    {-# MINIMAL pushGameState, popGameState, popGameState_,
                peekGameState #-}
instance GameStateManager.GameStateManager [GameVars.MahppyBird]
  = GameStateManager.$fGameStateManagerMahppyBird
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

