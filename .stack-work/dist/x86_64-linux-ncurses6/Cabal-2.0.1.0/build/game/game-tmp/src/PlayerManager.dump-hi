
==================== FINAL INTERFACE ====================
2018-06-04 17:45:37.229754856 UTC

interface main:PlayerManager 8022
  interface hash: a640f7db9e52617ce7581ab761d38550
  ABI hash: 6410674bd76f72a678b626b327e31876
  export-list hash: 90666d388c993bafd900a62a82f9ea2a
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: fbfc9b4f0124b3a129b4a2321798f29f
  sig of: Nothing
  used TH splices: False
  where
exports:
  PlayerManager.PlayerManager{PlayerManager.getIsPassingWall PlayerManager.getPlayerAabb PlayerManager.getPlayerAngle PlayerManager.getPlayerAttributes PlayerManager.getPlayerPos PlayerManager.getPlayerXVel PlayerManager.getPlayerYVel PlayerManager.isPlayerJumping PlayerManager.jumpPlayer PlayerManager.setIsPassingWall PlayerManager.setPlayerAngle PlayerManager.setPlayerPos PlayerManager.setPlayerYVel PlayerManager.translatePlayer}
module dependencies: Aabb Animations AnimationsManager GameVars
                     TimeManager Walls
package dependencies: QuickCheck-2.10.1 Stack-0.3.2
                      StateVar-1.1.1.0 Stream-0.4.7.2 adjunctions-4.4 array-0.5.2.0
                      base-4.10.1.0 base-orphans-0.7 bifunctors-5.5.2 binary-0.8.5.1
                      bytes-0.15.4 bytestring-0.10.8.2 call-stack-0.1.0 cereal-0.5.5.0
                      clock-0.7.2 comonad-5.0.3 containers-0.5.10.2 contravariant-1.4.1
                      data-default-class-0.1.2.0 deepseq-1.4.3.0 distributive-0.5.3
                      exceptions-0.8.3 free-5.0.2 ghc-boot-th-8.2.2 ghc-prim-0.5.1.1
                      hashable-1.2.7.0 integer-gmp-1.0.1.0 integer-logarithms-1.0.2.1
                      kan-extensions-5.1 lazysmallcheck-0.6 lens-4.16.1
                      lifted-base-0.2.3.12 linear-1.20.7 monad-control-1.0.2.3 mtl-2.2.2
                      pretty-1.1.3.3 primitive-0.6.3.0 profunctors-5.2.2 random-1.1
                      reflection-2.1.3 scientific-0.3.6.0 sdl2-2.4.0.1 sdl2-mixer-1.1.0
                      sdl2-ttf-2.0.2 semigroupoids-5.2.2 stm-2.4.5.0 tagged-0.8.5
                      template-haskell-2.12.0.0 text-1.2.3.0 tf-random-0.5
                      th-abstraction-0.2.6.0 time-1.8.0.2 transformers-0.5.2.0
                      transformers-base-0.4.4 transformers-compat-0.5.1.4
                      unordered-containers-0.2.9.0 vector-0.12.0.1
orphans: time-1.8.0.2:Data.Time.Clock.TAI
         reflection-2.1.3:Data.Reflection
         vector-0.12.0.1:Data.Vector.Unboxed
         hashable-1.2.7.0:Data.Hashable.Generic text-1.2.3.0:Data.Text.Lazy
         linear-1.20.7:Linear.Instances base-orphans-0.7:Data.Orphans
         text-1.2.3.0:Data.Text binary-0.8.5.1:Data.Binary.Generic
         text-1.2.3.0:Data.Text.Show
         bytestring-0.10.8.2:Data.ByteString.Builder
         vector-0.12.0.1:Data.Vector.Fusion.Bundle
         stm-2.4.5.0:Control.Monad.STM time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian
         transformers-0.5.2.0:Control.Monad.Trans.Error
         base-4.10.1.0:GHC.Float base-4.10.1.0:GHC.Base
family instance modules: adjunctions-4.4:Data.Functor.Rep
                         base-4.10.1.0:Control.Applicative base-4.10.1.0:Data.Complex
                         base-4.10.1.0:Data.Either base-4.10.1.0:Data.Functor.Compose
                         base-4.10.1.0:Data.Functor.Const
                         base-4.10.1.0:Data.Functor.Identity
                         base-4.10.1.0:Data.Functor.Product base-4.10.1.0:Data.Functor.Sum
                         base-4.10.1.0:Data.List.NonEmpty base-4.10.1.0:Data.Monoid
                         base-4.10.1.0:Data.Semigroup base-4.10.1.0:Data.Type.Equality
                         base-4.10.1.0:Data.Version base-4.10.1.0:Data.Void
                         base-4.10.1.0:GHC.Exts base-4.10.1.0:GHC.Generics
                         base-4.10.1.0:GHC.IO.Exception base-4.10.1.0:GHC.TypeLits
                         base-4.10.1.0:GHC.TypeNats bifunctors-5.5.2:Data.Bifunctor.Biff
                         bifunctors-5.5.2:Data.Bifunctor.Clown
                         bifunctors-5.5.2:Data.Bifunctor.Fix
                         bifunctors-5.5.2:Data.Bifunctor.Flip
                         bifunctors-5.5.2:Data.Bifunctor.Join
                         bifunctors-5.5.2:Data.Bifunctor.Joker
                         bifunctors-5.5.2:Data.Bifunctor.Product
                         bifunctors-5.5.2:Data.Bifunctor.Sum
                         bifunctors-5.5.2:Data.Bifunctor.Tannen
                         bifunctors-5.5.2:Data.Bifunctor.Wrapped bytes-0.15.4:Data.Bytes.Get
                         bytes-0.15.4:Data.Bytes.Signed bytes-0.15.4:Data.Bytes.VarInt
                         clock-0.7.2:System.Clock containers-0.5.10.2:Data.IntMap.Internal
                         containers-0.5.10.2:Data.IntSet.Internal
                         containers-0.5.10.2:Data.Map.Internal
                         containers-0.5.10.2:Data.Sequence.Internal
                         containers-0.5.10.2:Data.Set.Internal containers-0.5.10.2:Data.Tree
                         free-5.0.2:Control.Comonad.Cofree
                         free-5.0.2:Control.Comonad.Trans.Cofree
                         free-5.0.2:Control.Monad.Free free-5.0.2:Control.Monad.Trans.Free
                         ghc-boot-th-8.2.2:GHC.ForeignSrcLang.Type
                         ghc-boot-th-8.2.2:GHC.LanguageExtensions.Type
                         kan-extensions-5.1:Data.Functor.Day
                         kan-extensions-5.1:Data.Functor.Yoneda lens-4.16.1:Control.Lens.At
                         lens-4.16.1:Control.Lens.Internal.Indexed
                         lens-4.16.1:Control.Lens.Reified lens-4.16.1:Control.Lens.Tuple
                         lens-4.16.1:Control.Lens.Wrapped lens-4.16.1:Control.Lens.Zoom
                         linear-1.20.7:Linear.Affine linear-1.20.7:Linear.Plucker
                         linear-1.20.7:Linear.Quaternion linear-1.20.7:Linear.V
                         linear-1.20.7:Linear.V0 linear-1.20.7:Linear.V1
                         linear-1.20.7:Linear.V2 linear-1.20.7:Linear.V3
                         linear-1.20.7:Linear.V4
                         monad-control-1.0.2.3:Control.Monad.Trans.Control
                         pretty-1.1.3.3:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.3:Text.PrettyPrint.HughesPJ
                         primitive-0.6.3.0:Control.Monad.Primitive
                         primitive-0.6.3.0:Data.Primitive.Array
                         primitive-0.6.3.0:Data.Primitive.ByteArray
                         profunctors-5.2.2:Data.Profunctor.Composition
                         profunctors-5.2.2:Data.Profunctor.Rep sdl2-2.4.0.1:SDL.Audio
                         sdl2-2.4.0.1:SDL.Event sdl2-2.4.0.1:SDL.Exception
                         sdl2-2.4.0.1:SDL.Hint sdl2-2.4.0.1:SDL.Init
                         sdl2-2.4.0.1:SDL.Input.GameController
                         sdl2-2.4.0.1:SDL.Input.Joystick sdl2-2.4.0.1:SDL.Input.Keyboard
                         sdl2-2.4.0.1:SDL.Input.Keyboard.Codes sdl2-2.4.0.1:SDL.Input.Mouse
                         sdl2-2.4.0.1:SDL.Internal.Types sdl2-2.4.0.1:SDL.Power
                         sdl2-2.4.0.1:SDL.Time sdl2-2.4.0.1:SDL.Video
                         sdl2-2.4.0.1:SDL.Video.OpenGL sdl2-2.4.0.1:SDL.Video.Renderer
                         sdl2-ttf-2.0.2:SDL.Font tagged-0.8.5:Data.Tagged
                         template-haskell-2.12.0.0:Language.Haskell.TH.Syntax
                         text-1.2.3.0:Data.Text text-1.2.3.0:Data.Text.Lazy
                         th-abstraction-0.2.6.0:Language.Haskell.TH.Datatype
                         unordered-containers-0.2.9.0:Data.HashMap.Base
                         unordered-containers-0.2.9.0:Data.HashSet
                         vector-0.12.0.1:Data.Vector vector-0.12.0.1:Data.Vector.Primitive
                         vector-0.12.0.1:Data.Vector.Storable
                         vector-0.12.0.1:Data.Vector.Unboxed
                         vector-0.12.0.1:Data.Vector.Unboxed.Base
import  -/  base-4.10.1.0:Data.Functor 2ffda4f936b8f474394d93205750aff3
import  -/  base-4.10.1.0:Foreign.C.Types 936c0db027291520097b61fd8686710a
import  -/  base-4.10.1.0:GHC.Base 782fd99b5e36f3698a26179a49afca64
import  -/  base-4.10.1.0:GHC.Num 6e1dc5d36d99a802edb39b92bb1923b8
import  -/  base-4.10.1.0:Prelude 31945b7d0084063347fc52506d3a4020
import  -/  ghc-prim-0.5.1.1:GHC.Classes 93e2660065dce9329577e83d76d8f0d4
import  -/  lens-4.16.1:Control.Lens d35b54db874b2147b5ffe1d3cd39d59d
import  -/  lens-4.16.1:Control.Lens.Getter be8fceadc62581701bcf558f995a8aa3
import  -/  lens-4.16.1:Control.Lens.Setter 31b5ab0739c579bd36402b436aadb7a0
import  -/  linear-1.20.7:Linear.Affine f4ed1aa58b28d63beac82829593554b3
import  -/  linear-1.20.7:Linear.V2 ee409e3e067ada9faf9fdda331749bf4
import  -/  Aabb 02207cce2d794346ceccf4ae11a9988d
  exports: 74498893d79e07cfc6b7864a88f8a517
  Aabb 4bc4d1c45ad2d3871f1050d664e236c2
  rectangleToAabb 4601f07974c6b4c563a1e869ff1fdd84
import  -/  AnimationsManager cbf8705999ca4b50005279e8fbbfc640
  exports: 870ab299162042bfa1955a3278127f9e
  AnimationsManager c8e0f589a92aeed99bff1d8d3702265e
import  -/  GameVars 95546c61036798381255e3d7e11311b2
  exports: bffadec9649d88993fa5a790487d46e7
  Config e44e7628e39bfe67c0571be38f0cb139
  MahppyBird fb5607b55373083b420634b0454a4ddb
  Vars 5829ea20be4fb9a24ab87f3fe067aa3c
  angle 9ec677c0a905ffa9de6525b5a85accc9
  attributes f6bc13c9b59ea991ef88afd5bf65ef48
  cJumpHeight 27518191718fb7ec43d2ae78e0e00e4d
  isPassingWall 6e5c5bff59bfa8b3814694e9fa3877aa
  player fa7aa3fc5076bb661df40db074a47567
  vPlayVars dbef10ec54712962f546a8d4b473ed09
  xvel 5c2f8cf08669a67616a6eccb23cc0abb
  yvel 404fa360ca38a84fc2d938882137b888
import  -/  mtl-2.2.2:Control.Monad.Reader 8d63edf5dfaf25ad085eae4468bdd77e
import  -/  mtl-2.2.2:Control.Monad.Reader.Class 6d33756d93a5919f9374afec232249f4
import  -/  mtl-2.2.2:Control.Monad.State 4acb2e6037f370fa4b91900d626e6406
import  -/  mtl-2.2.2:Control.Monad.State.Class de8813e114276746770717ab3ee06916
import  -/  sdl2-2.4.0.1:SDL 24b907aeafb5c6d95ad8ce8f19ccd6b3
import  -/  sdl2-2.4.0.1:SDL.Video.Renderer 05fa9f919fc1b42de89d6ed9d3439937
848ee61a9056a9b20a824f25f60c47da
  $fPlayerManagerMahppyBird ::
    PlayerManager.PlayerManager GameVars.MahppyBird
  DFunId
  {- Inline: CONLIKE,
     Unfolding: DFun:.
                  @ GameVars.MahppyBird
                  GameVars.$fMonadMahppyBird
                  PlayerManager.$fPlayerManagerMahppyBird14
                    `cast`
                  (Trans
                       (<GameVars.Config>_R
                        ->_R Trans
                                 (<GameVars.Vars>_R
                                  ->_R Sym (GHC.Types.N:IO[0]
                                                <(Linear.Affine.Point Linear.V2.V2 GHC.Types.Float,
                                                  GameVars.Vars)>_R))
                                 (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                           <GameVars.Vars>_N
                                           <GHC.Types.IO>_R
                                           <Linear.Affine.Point Linear.V2.V2 GHC.Types.Float>_N)))
                       (Trans
                            (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                      <*>_N
                                      <GameVars.Config>_R
                                      <Control.Monad.Trans.State.Lazy.StateT
                                         GameVars.Vars GHC.Types.IO>_R
                                      <Linear.Affine.Point Linear.V2.V2 GHC.Types.Float>_N))
                            (Sym (GameVars.N:MahppyBird[0]) <Linear.Affine.Point
                                                               Linear.V2.V2 GHC.Types.Float>_N)))
                  PlayerManager.$fPlayerManagerMahppyBird13
                    `cast`
                  (Trans
                       (<GameVars.Config>_R
                        ->_R Trans
                                 (<GameVars.Vars>_R
                                  ->_R Sym (GHC.Types.N:IO[0]
                                                <(SDL.Video.Renderer.Rectangle GHC.Types.Float,
                                                  GameVars.Vars)>_R))
                                 (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                           <GameVars.Vars>_N
                                           <GHC.Types.IO>_R
                                           <SDL.Video.Renderer.Rectangle GHC.Types.Float>_N)))
                       (Trans
                            (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                      <*>_N
                                      <GameVars.Config>_R
                                      <Control.Monad.Trans.State.Lazy.StateT
                                         GameVars.Vars GHC.Types.IO>_R
                                      <SDL.Video.Renderer.Rectangle GHC.Types.Float>_N))
                            (Sym (GameVars.N:MahppyBird[0]) <SDL.Video.Renderer.Rectangle
                                                               GHC.Types.Float>_N)))
                  PlayerManager.$fPlayerManagerMahppyBird12
                    `cast`
                  (Trans
                       (<GameVars.Config>_R
                        ->_R Trans
                                 (<GameVars.Vars>_R
                                  ->_R Sym (GHC.Types.N:IO[0] <(GHC.Types.Float, GameVars.Vars)>_R))
                                 (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                           <GameVars.Vars>_N <GHC.Types.IO>_R <GHC.Types.Float>_N)))
                       (Trans
                            (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                      <*>_N
                                      <GameVars.Config>_R
                                      <Control.Monad.Trans.State.Lazy.StateT
                                         GameVars.Vars GHC.Types.IO>_R
                                      <GHC.Types.Float>_N))
                            (Sym (GameVars.N:MahppyBird[0]) <GHC.Types.Float>_N)))
                  PlayerManager.$fPlayerManagerMahppyBird11
                    `cast`
                  (Trans
                       (<GameVars.Config>_R
                        ->_R Trans
                                 (<GameVars.Vars>_R
                                  ->_R Sym (GHC.Types.N:IO[0] <(GHC.Types.Float, GameVars.Vars)>_R))
                                 (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                           <GameVars.Vars>_N <GHC.Types.IO>_R <GHC.Types.Float>_N)))
                       (Trans
                            (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                      <*>_N
                                      <GameVars.Config>_R
                                      <Control.Monad.Trans.State.Lazy.StateT
                                         GameVars.Vars GHC.Types.IO>_R
                                      <GHC.Types.Float>_N))
                            (Sym (GameVars.N:MahppyBird[0]) <GHC.Types.Float>_N)))
                  PlayerManager.$fPlayerManagerMahppyBird10
                    `cast`
                  (<Linear.Affine.Point Linear.V2.V2 GHC.Types.Float>_R
                   ->_R Trans
                            (<GameVars.Config>_R
                             ->_R Trans
                                      (<GameVars.Vars>_R
                                       ->_R Sym (GHC.Types.N:IO[0] <((), GameVars.Vars)>_R))
                                      (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                <GameVars.Vars>_N <GHC.Types.IO>_R <()>_N)))
                            (Trans
                                 (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                           <*>_N
                                           <GameVars.Config>_R
                                           <Control.Monad.Trans.State.Lazy.StateT
                                              GameVars.Vars GHC.Types.IO>_R
                                           <()>_N))
                                 (Sym (GameVars.N:MahppyBird[0]) <()>_N)))
                  PlayerManager.$fPlayerManagerMahppyBird9
                    `cast`
                  (<GHC.Types.Float>_R
                   ->_R Trans
                            (<GameVars.Config>_R
                             ->_R Trans
                                      (<GameVars.Vars>_R
                                       ->_R Sym (GHC.Types.N:IO[0] <((), GameVars.Vars)>_R))
                                      (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                <GameVars.Vars>_N <GHC.Types.IO>_R <()>_N)))
                            (Trans
                                 (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                           <*>_N
                                           <GameVars.Config>_R
                                           <Control.Monad.Trans.State.Lazy.StateT
                                              GameVars.Vars GHC.Types.IO>_R
                                           <()>_N))
                                 (Sym (GameVars.N:MahppyBird[0]) <()>_N)))
                  PlayerManager.$fPlayerManagerMahppyBird8
                    `cast`
                  (Trans
                       (<Linear.V2.V2 GHC.Types.Float>_R
                        ->_R <GameVars.Config>_R
                        ->_R <GameVars.Vars>_R
                        ->_R Sym (GHC.Types.N:IO[0] <((), GameVars.Vars)>_R))
                       (Trans
                            (<Linear.V2.V2 GHC.Types.Float>_R
                             ->_R <GameVars.Config>_R
                             ->_R Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                           <GameVars.Vars>_N <GHC.Types.IO>_R <()>_N))
                            (<Linear.V2.V2 GHC.Types.Float>_R
                             ->_R Trans
                                      (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                <*>_N
                                                <GameVars.Config>_R
                                                <Control.Monad.Trans.State.Lazy.StateT
                                                   GameVars.Vars GHC.Types.IO>_R
                                                <()>_N))
                                      (Sym (GameVars.N:MahppyBird[0]) <()>_N))))
                  PlayerManager.$fPlayerManagerMahppyBird7
                    `cast`
                  (<GHC.Types.Bool>_R
                   ->_R Trans
                            (<GameVars.Config>_R
                             ->_R Trans
                                      (<GameVars.Vars>_R
                                       ->_R Sym (GHC.Types.N:IO[0] <((), GameVars.Vars)>_R))
                                      (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                <GameVars.Vars>_N <GHC.Types.IO>_R <()>_N)))
                            (Trans
                                 (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                           <*>_N
                                           <GameVars.Config>_R
                                           <Control.Monad.Trans.State.Lazy.StateT
                                              GameVars.Vars GHC.Types.IO>_R
                                           <()>_N))
                                 (Sym (GameVars.N:MahppyBird[0]) <()>_N)))
                  PlayerManager.$fPlayerManagerMahppyBird6
                    `cast`
                  (Trans
                       (<GameVars.Config>_R
                        ->_R Trans
                                 (<GameVars.Vars>_R
                                  ->_R Sym (GHC.Types.N:IO[0] <(GHC.Types.Bool, GameVars.Vars)>_R))
                                 (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                           <GameVars.Vars>_N <GHC.Types.IO>_R <GHC.Types.Bool>_N)))
                       (Trans
                            (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                      <*>_N
                                      <GameVars.Config>_R
                                      <Control.Monad.Trans.State.Lazy.StateT
                                         GameVars.Vars GHC.Types.IO>_R
                                      <GHC.Types.Bool>_N))
                            (Sym (GameVars.N:MahppyBird[0]) <GHC.Types.Bool>_N)))
                  PlayerManager.$fPlayerManagerMahppyBird5
                    `cast`
                  (Trans
                       (<GameVars.Config>_R
                        ->_R Trans
                                 (<GameVars.Vars>_R
                                  ->_R Sym (GHC.Types.N:IO[0] <((), GameVars.Vars)>_R))
                                 (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                           <GameVars.Vars>_N <GHC.Types.IO>_R <()>_N)))
                       (Trans
                            (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                      <*>_N
                                      <GameVars.Config>_R
                                      <Control.Monad.Trans.State.Lazy.StateT
                                         GameVars.Vars GHC.Types.IO>_R
                                      <()>_N))
                            (Sym (GameVars.N:MahppyBird[0]) <()>_N)))
                  PlayerManager.$fPlayerManagerMahppyBird4
                    `cast`
                  (Trans
                       (<GameVars.Config>_R
                        ->_R Trans
                                 (<GameVars.Vars>_R
                                  ->_R Sym (GHC.Types.N:IO[0] <(GHC.Types.Bool, GameVars.Vars)>_R))
                                 (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                           <GameVars.Vars>_N <GHC.Types.IO>_R <GHC.Types.Bool>_N)))
                       (Trans
                            (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                      <*>_N
                                      <GameVars.Config>_R
                                      <Control.Monad.Trans.State.Lazy.StateT
                                         GameVars.Vars GHC.Types.IO>_R
                                      <GHC.Types.Bool>_N))
                            (Sym (GameVars.N:MahppyBird[0]) <GHC.Types.Bool>_N)))
                  PlayerManager.$fPlayerManagerMahppyBird3
                    `cast`
                  (Trans
                       (<GameVars.Config>_R
                        ->_R Trans
                                 (<GameVars.Vars>_R
                                  ->_R Sym (GHC.Types.N:IO[0] <(Aabb.Aabb, GameVars.Vars)>_R))
                                 (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                           <GameVars.Vars>_N <GHC.Types.IO>_R <Aabb.Aabb>_N)))
                       (Trans
                            (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                      <*>_N
                                      <GameVars.Config>_R
                                      <Control.Monad.Trans.State.Lazy.StateT
                                         GameVars.Vars GHC.Types.IO>_R
                                      <Aabb.Aabb>_N))
                            (Sym (GameVars.N:MahppyBird[0]) <Aabb.Aabb>_N)))
                  PlayerManager.$fPlayerManagerMahppyBird2
                    `cast`
                  (Trans
                       (<GameVars.Config>_R
                        ->_R Trans
                                 (<GameVars.Vars>_R
                                  ->_R Sym (GHC.Types.N:IO[0]
                                                <(Foreign.C.Types.CDouble, GameVars.Vars)>_R))
                                 (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                           <GameVars.Vars>_N
                                           <GHC.Types.IO>_R
                                           <Foreign.C.Types.CDouble>_N)))
                       (Trans
                            (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                      <*>_N
                                      <GameVars.Config>_R
                                      <Control.Monad.Trans.State.Lazy.StateT
                                         GameVars.Vars GHC.Types.IO>_R
                                      <Foreign.C.Types.CDouble>_N))
                            (Sym (GameVars.N:MahppyBird[0]) <Foreign.C.Types.CDouble>_N)))
                  PlayerManager.$fPlayerManagerMahppyBird1
                    `cast`
                  (<Foreign.C.Types.CDouble>_R
                   ->_R Trans
                            (<GameVars.Config>_R
                             ->_R Trans
                                      (<GameVars.Vars>_R
                                       ->_R Sym (GHC.Types.N:IO[0] <((), GameVars.Vars)>_R))
                                      (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                <GameVars.Vars>_N <GHC.Types.IO>_R <()>_N)))
                            (Trans
                                 (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                           <*>_N
                                           <GameVars.Config>_R
                                           <Control.Monad.Trans.State.Lazy.StateT
                                              GameVars.Vars GHC.Types.IO>_R
                                           <()>_N))
                                 (Sym (GameVars.N:MahppyBird[0]) <()>_N))) -}
15993cd56f7734c2c2366baeda0b0f27
  $fPlayerManagerMahppyBird1 ::
    Foreign.C.Types.CDouble
    -> GameVars.Config
    -> GameVars.Vars
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, ((), GameVars.Vars) #)
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,1*U(U)><L,A><L,1*U(U,1*U(U,U,U,U,U,U,A,U,U,U,U,U,U,U,U,U,U,U),U,U,U,U)><S,U>,
     Unfolding: InlineRule (4, True, False)
                (\ (nangle :: Foreign.C.Types.CDouble)
                   (eta :: GameVars.Config)
                   (eta1 :: GameVars.Vars)
                   (eta2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 (# eta2,
                    (GHC.Tuple.(),
                     case eta1 of wild { GameVars.Vars x1 x2 x3 x4 dt1 dt2 ->
                     GameVars.Vars
                       x1
                       (case x2 of wild1 { GameVars.PlayVars dt4 dt5 dt3 dt6 dt7 dt8 dt9 x7 dt10 dt11 dt12 dt13 dt14 dt15 dt16 dt17 dt18 dt19 ->
                        case nangle
                               `cast`
                             (Foreign.C.Types.N:CDouble[0]) of dt { GHC.Types.D# dt20 ->
                        GameVars.PlayVars
                          dt4
                          dt5
                          dt3
                          dt6
                          dt7
                          dt8
                          dt20
                          x7
                          dt10
                          dt11
                          dt12
                          dt13
                          dt14
                          dt15
                          dt16
                          dt17
                          dt18
                          dt19 } })
                       x3
                       x4
                       dt1
                       dt2 }) #)) -}
8af07b641090dc64c3ceb6743e21e38f
  $fPlayerManagerMahppyBird10 ::
    Linear.Affine.Point Linear.V2.V2 GHC.Types.Float
    -> GameVars.Config
    -> GameVars.Vars
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, ((), GameVars.Vars) #)
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,U><L,A><S(LS(LLLLLSLLLLLLLLLLLL)LLLL),1*U(U,1*U(A,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U),U,U,U,U)><S,U>,
     Unfolding: InlineRule (4, True, False)
                (\ (npos :: Linear.Affine.Point Linear.V2.V2 GHC.Types.Float)
                   (eta :: GameVars.Config)
                   (eta1 :: GameVars.Vars)
                   (eta2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case eta1 of wild { GameVars.Vars x1 x2 x3 x4 dt1 dt2 ->
                 case x2 of wild1 { GameVars.PlayVars dt4 dt5 dt3 dt6 dt7 dt8 dt9 x7 dt10 dt11 dt12 dt13 dt14 dt15 dt16 dt17 dt18 dt19 ->
                 (# eta2,
                    (GHC.Tuple.(),
                     GameVars.Vars
                       x1
                       (GameVars.PlayVars
                          npos
                          dt5
                          dt3
                          dt6
                          dt7
                          dt8
                          dt9
                          x7
                          dt10
                          dt11
                          dt12
                          dt13
                          dt14
                          dt15
                          dt16
                          dt17
                          dt18
                          dt19)
                       x3
                       x4
                       dt1
                       dt2) #) } }) -}
2a46390094ca79c1f4153f2fe3e65746
  $fPlayerManagerMahppyBird11 ::
    GameVars.Config
    -> GameVars.Vars
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          (GHC.Types.Float, GameVars.Vars) #)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,A><L,U(U,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U),U,U,U,U)><S,U>,
     Unfolding: InlineRule (3, True, False)
                (\ (r1 :: GameVars.Config)
                   (eta :: GameVars.Vars)
                   (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 (# eta1,
                    (case eta of wild { GameVars.Vars x1 x2 x3 x4 dt1 dt2 ->
                     case x2 of wild1 { GameVars.PlayVars dt4 dt5 dt3 dt6 dt7 dt8 dt9 x7 dt10 dt11 dt12 dt13 dt14 dt15 dt16 dt17 dt18 dt19 ->
                     GHC.Types.F# dt6 } },
                     eta) #)) -}
aca9ae5d85f0440c8567bbbf3c2b9842
  $fPlayerManagerMahppyBird12 ::
    GameVars.Config
    -> GameVars.Vars
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          (GHC.Types.Float, GameVars.Vars) #)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,A><L,U(U,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U),U,U,U,U)><S,U>,
     Unfolding: InlineRule (3, True, False)
                (\ (r1 :: GameVars.Config)
                   (eta :: GameVars.Vars)
                   (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 (# eta1,
                    (case eta of wild { GameVars.Vars x1 x2 x3 x4 dt1 dt2 ->
                     case x2 of wild1 { GameVars.PlayVars dt4 dt5 dt3 dt6 dt7 dt8 dt9 x7 dt10 dt11 dt12 dt13 dt14 dt15 dt16 dt17 dt18 dt19 ->
                     GHC.Types.F# dt3 } },
                     eta) #)) -}
7cb098569975d45da58690fe3df1567a
  $fPlayerManagerMahppyBird13 ::
    GameVars.Config
    -> GameVars.Vars
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          (SDL.Video.Renderer.Rectangle GHC.Types.Float, GameVars.Vars) #)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,A><L,U(U,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U),U,U,U,U)><S,U>,
     Unfolding: InlineRule (3, True, False)
                (\ (r1 :: GameVars.Config)
                   (eta :: GameVars.Vars)
                   (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 (# eta1,
                    (case eta of wild { GameVars.Vars x1 x2 x3 x4 dt1 dt2 ->
                     case x2 of wild1 { GameVars.PlayVars dt4 dt5 dt3 dt6 dt7 dt8 dt9 x7 dt10 dt11 dt12 dt13 dt14 dt15 dt16 dt17 dt18 dt19 ->
                     SDL.Video.Renderer.Rectangle @ GHC.Types.Float dt4 dt5 } },
                     eta) #)) -}
bb2a48d1f25e7199d93b96c1bc5eb5c8
  $fPlayerManagerMahppyBird14 ::
    GameVars.Config
    -> GameVars.Vars
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          (Linear.Affine.Point Linear.V2.V2 GHC.Types.Float,
           GameVars.Vars) #)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,A><S(LSLLLL),1*U(U,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U),U,U,U,U)><S,U>,
     Unfolding: InlineRule (3, True, False)
                (\ (r1 :: GameVars.Config)
                   (eta :: GameVars.Vars)
                   (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case eta of wild { GameVars.Vars x1 x2 x3 x4 dt1 dt2 ->
                 case x2 of wild1 { GameVars.PlayVars dt4 dt5 dt3 dt6 dt7 dt8 dt9 x7 dt10 dt11 dt12 dt13 dt14 dt15 dt16 dt17 dt18 dt19 ->
                 (# eta1, (dt4, wild) #) } }) -}
0ebef8681d17f20ba7dc54fc53b3a3a5
  $fPlayerManagerMahppyBird2 ::
    GameVars.Config
    -> GameVars.Vars
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          (Foreign.C.Types.CDouble, GameVars.Vars) #)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,A><L,U(U,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U),U,U,U,U)><S,U>,
     Unfolding: InlineRule (3, True, False)
                (\ (r1 :: GameVars.Config)
                   (eta :: GameVars.Vars)
                   (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 (# eta1,
                    (case eta of wild { GameVars.Vars x1 x2 x3 x4 dt1 dt2 ->
                     case x2 of wild1 { GameVars.PlayVars dt4 dt5 dt3 dt6 dt7 dt8 dt9 x7 dt10 dt11 dt12 dt13 dt14 dt15 dt16 dt17 dt18 dt19 ->
                     (GHC.Types.D# dt9) `cast` (Sym (Foreign.C.Types.N:CDouble[0])) } },
                     eta) #)) -}
2283ca66eccd4c359fbe2cbb9d1d8274
  $fPlayerManagerMahppyBird3 ::
    GameVars.Config
    -> GameVars.Vars
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          (Aabb.Aabb, GameVars.Vars) #)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,A><L,U(U,U(U(U(U),U(U)),U(U(U),U(U)),U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U),U,U,U,U)><S,U>,
     Inline: [0],
     Unfolding: InlineRule (3, True, True)
                (\ (w :: GameVars.Config)
                   (w1 :: GameVars.Vars)
                   (w2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 PlayerManager.$w$cgetPlayerAabb w1 w2) -}
9a26383742296f294f64e6ce23b1b1d2
  $fPlayerManagerMahppyBird4 ::
    GameVars.Config
    -> GameVars.Vars
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          (GHC.Types.Bool, GameVars.Vars) #)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,A><L,U(U,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U),U,U,U,U)><S,U>,
     Unfolding: InlineRule (3, True, False)
                (\ (x :: GameVars.Config)
                   (eta :: GameVars.Vars)
                   (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 (# eta1,
                    (case eta of wild { GameVars.Vars x1 x2 x3 x4 dt1 dt2 ->
                     case x2 of wild1 { GameVars.PlayVars dt4 dt5 dt3 dt6 dt7 dt8 dt9 x7 dt10 dt11 dt12 dt13 dt14 dt15 dt16 dt17 dt18 dt19 ->
                     GHC.Prim.tagToEnum#
                       @ GHC.Types.Bool
                       (GHC.Prim.ltFloat# dt3 0.0#) } },
                     eta) #)) -}
07154024955d41023ae164f6020b14ba
  $fPlayerManagerMahppyBird5 ::
    GameVars.Config
    -> GameVars.Vars
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, ((), GameVars.Vars) #)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,A><S(LS(LLLLLSLLLLLLLLLLLL)LLLL),1*U(U,1*U(U,U,A,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U),U,U,U,U)><S,U>,
     Unfolding: InlineRule (3, True, False)
                (\ (r1 :: GameVars.Config)
                   (eta :: GameVars.Vars)
                   (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case eta of wild { GameVars.Vars x1 x2 x3 x4 dt1 dt2 ->
                 case x2 of wild1 { GameVars.PlayVars dt4 dt5 dt3 dt6 dt7 dt8 dt9 x7 dt10 dt11 dt12 dt13 dt14 dt15 dt16 dt17 dt18 dt19 ->
                 (# eta1,
                    (GHC.Tuple.(),
                     GameVars.Vars
                       x1
                       (GameVars.PlayVars
                          dt4
                          dt5
                          dt7
                          dt6
                          dt7
                          dt8
                          dt9
                          x7
                          dt10
                          dt11
                          dt12
                          dt13
                          dt14
                          dt15
                          dt16
                          dt17
                          dt18
                          dt19)
                       x3
                       x4
                       dt1
                       dt2) #) } }) -}
60341e363cfbf36a6864b27602b9bc8f
  $fPlayerManagerMahppyBird6 ::
    GameVars.Config
    -> GameVars.Vars
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          (GHC.Types.Bool, GameVars.Vars) #)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,A><L,U(U,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U),U,U,U,U)><S,U>,
     Unfolding: InlineRule (3, True, False)
                (\ (r1 :: GameVars.Config)
                   (eta :: GameVars.Vars)
                   (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 (# eta1,
                    (case eta of wild { GameVars.Vars x1 x2 x3 x4 dt1 dt2 ->
                     case x2 of wild1 { GameVars.PlayVars dt4 dt5 dt3 dt6 dt7 dt8 dt9 x7 dt10 dt11 dt12 dt13 dt14 dt15 dt16 dt17 dt18 dt19 ->
                     dt8 } },
                     eta) #)) -}
d633670f84248fbf288412c9ed124ea4
  $fPlayerManagerMahppyBird7 ::
    GHC.Types.Bool
    -> GameVars.Config
    -> GameVars.Vars
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, ((), GameVars.Vars) #)
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,1*U><L,A><L,1*U(U,1*U(U,U,U,U,U,A,U,U,U,U,U,U,U,U,U,U,U,U),U,U,U,U)><S,U>,
     Unfolding: InlineRule (4, True, False)
                (\ (passing :: GHC.Types.Bool)
                   (eta :: GameVars.Config)
                   (eta1 :: GameVars.Vars)
                   (eta2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 (# eta2,
                    (GHC.Tuple.(),
                     case eta1 of wild { GameVars.Vars x1 x2 x3 x4 dt1 dt2 ->
                     GameVars.Vars
                       x1
                       (case x2 of wild1 { GameVars.PlayVars dt4 dt5 dt3 dt6 dt7 dt8 dt9 x7 dt10 dt11 dt12 dt13 dt14 dt15 dt16 dt17 dt18 dt19 ->
                        case passing of dt { DEFAULT ->
                        GameVars.PlayVars
                          dt4
                          dt5
                          dt3
                          dt6
                          dt7
                          dt
                          dt9
                          x7
                          dt10
                          dt11
                          dt12
                          dt13
                          dt14
                          dt15
                          dt16
                          dt17
                          dt18
                          dt19 } })
                       x3
                       x4
                       dt1
                       dt2 }) #)) -}
0252d26a509ab857036b06226df4aa6e
  $fPlayerManagerMahppyBird8 ::
    Linear.V2.V2 GHC.Types.Float
    -> GameVars.Config
    -> GameVars.Vars
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, ((), GameVars.Vars) #)
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,1*U(U(U),U(U))><L,A><S(LS(LLLLLSLLLLLLLLLLLL)LLLL),1*U(U,1*U(1*U(U(U),U(U)),U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U),U,U,U,U)><S,U>,
     Unfolding: (\ (transform :: Linear.V2.V2 GHC.Types.Float)
                   (eta :: GameVars.Config)
                   (eta1 :: GameVars.Vars)
                   (eta2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case eta1 of wild { GameVars.Vars x1 x2 x3 x4 dt1 dt2 ->
                 case x2 of wild1 { GameVars.PlayVars dt4 dt5 dt3 dt6 dt7 dt8 dt9 x7 dt10 dt11 dt12 dt13 dt14 dt15 dt16 dt17 dt18 dt19 ->
                 (# eta2,
                    (GHC.Tuple.(),
                     GameVars.Vars
                       x1
                       (GameVars.PlayVars
                          (case transform of wild2 { Linear.V2.V2 a1 b1 ->
                           case a1 of wild3 { GHC.Types.F# x ->
                           case b1 of wild4 { GHC.Types.F# x8 ->
                           case dt4
                                  `cast`
                                (Linear.Affine.N:Point[0]
                                     <Linear.V2.V2>_R <GHC.Types.Float>_N) of wild5 { Linear.V2.V2 d e ->
                           case d of wild6 { GHC.Types.F# y ->
                           case e of wild7 { GHC.Types.F# y1 ->
                           (Linear.V2.V2
                              @ GHC.Types.Float
                              (GHC.Types.F# (GHC.Prim.plusFloat# x y))
                              (GHC.Types.F# (GHC.Prim.plusFloat# x8 y1)))
                             `cast`
                           (Sym (Linear.Affine.N:Point[0]
                                     <Linear.V2.V2>_R) <GHC.Types.Float>_N) } } } } } })
                          dt5
                          dt3
                          dt6
                          dt7
                          dt8
                          dt9
                          x7
                          dt10
                          dt11
                          dt12
                          dt13
                          dt14
                          dt15
                          dt16
                          dt17
                          dt18
                          dt19)
                       x3
                       x4
                       dt1
                       dt2) #) } }) -}
434eb1261adcba1c132d625e0933d7ca
  $fPlayerManagerMahppyBird9 ::
    GHC.Types.Float
    -> GameVars.Config
    -> GameVars.Vars
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, ((), GameVars.Vars) #)
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,1*U(U)><L,A><L,1*U(U,1*U(U,U,A,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U),U,U,U,U)><S,U>,
     Unfolding: InlineRule (4, True, False)
                (\ (nvel :: GHC.Types.Float)
                   (eta :: GameVars.Config)
                   (eta1 :: GameVars.Vars)
                   (eta2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 (# eta2,
                    (GHC.Tuple.(),
                     case eta1 of wild { GameVars.Vars x1 x2 x3 x4 dt1 dt2 ->
                     GameVars.Vars
                       x1
                       (case x2 of wild1 { GameVars.PlayVars dt4 dt5 dt3 dt6 dt7 dt8 dt9 x7 dt10 dt11 dt12 dt13 dt14 dt15 dt16 dt17 dt18 dt19 ->
                        case nvel of dt { GHC.Types.F# dt20 ->
                        GameVars.PlayVars
                          dt4
                          dt5
                          dt20
                          dt6
                          dt7
                          dt8
                          dt9
                          x7
                          dt10
                          dt11
                          dt12
                          dt13
                          dt14
                          dt15
                          dt16
                          dt17
                          dt18
                          dt19 } })
                       x3
                       x4
                       dt1
                       dt2 }) #)) -}
a5f6a5613ab8d4fc3c69c1a405375a80
  $tc'C:PlayerManager :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2003094614931461324##
                   3064481170134486382##
                   PlayerManager.$trModule
                   PlayerManager.$tc'C:PlayerManager2
                   1#
                   PlayerManager.$tc'C:PlayerManager1) -}
c2ef3c2aac612c64d1084fb2f7b61700
  $tc'C:PlayerManager1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
e881cac7a60bbbbf07526c3d36244cb3
  $tc'C:PlayerManager2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   PlayerManager.$tc'C:PlayerManager3) -}
4b88170ae6e04d1a57e92bbff00f7541
  $tc'C:PlayerManager3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'C:PlayerManager"#) -}
f6c1d27c8ac804f96fd0084a7519aaf7
  $tcPlayerManager :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   934060087051233871##
                   9029859154088017662##
                   PlayerManager.$trModule
                   PlayerManager.$trModule1
                   0#
                   PlayerManager.$tcPlayerManager1) -}
49b06cb743578a075dfe0239f7afe039
  $tcPlayerManager1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
534cacce88905d329082aa78f229b077
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   PlayerManager.$trModule3
                   PlayerManager.$trModule1) -}
b2c383b4ca78d317c74e328595b11234
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS PlayerManager.$trModule2) -}
7ccb93de763fd792af3b717678b01503
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("PlayerManager"#) -}
41d1b09e4d1c6c2449d8829302bf0847
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS PlayerManager.$trModule4) -}
819736070721bf37fb60a0941340a012
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("main"#) -}
ad5f203d9fd10ba88835de24f542fece
  $w$cgetPlayerAabb ::
    GameVars.Vars
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          (Aabb.Aabb, GameVars.Vars) #)
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,U(U,U(U(U(U),U(U)),U(U(U),U(U)),U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U),U,U,U,U)><S,U>,
     Inline: [0],
     Unfolding: (\ (w :: GameVars.Vars)
                   (w1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 (# w1,
                    (case w of wild { GameVars.Vars x1 x2 x3 x4 dt1 dt2 ->
                     case x2 of wild1 { GameVars.PlayVars dt4 dt5 dt3 dt6 dt7 dt8 dt9 x7 dt10 dt11 dt12 dt13 dt14 dt15 dt16 dt17 dt18 dt19 ->
                     case dt4
                            `cast`
                          (Linear.Affine.N:Point[0]
                               <Linear.V2.V2>_R <GHC.Types.Float>_N) of ww3 { Linear.V2.V2 ww4 ww5 ->
                     case ww4 of ww6 { GHC.Types.F# ww7 ->
                     case ww5 of ww8 { GHC.Types.F# ww9 ->
                     case dt5 of ww10 { Linear.V2.V2 ww11 ww12 ->
                     case ww11 of ww13 { GHC.Types.F# ww14 ->
                     case ww12 of ww15 { GHC.Types.F# ww16 ->
                     Aabb.Aabb
                       ww6
                       ww8
                       (GHC.Types.F# (GHC.Prim.plusFloat# ww7 ww14))
                       (GHC.Types.F# (GHC.Prim.plusFloat# ww9 ww16)) } } } } } } } },
                     w) #)) -}
848ee61a9056a9b20a824f25f60c47da
  class GHC.Base.Monad m => PlayerManager (m :: * -> *) where
    getPlayerPos :: m (Linear.Affine.Point
                         Linear.V2.V2 GHC.Types.Float)
    getPlayerAttributes :: m (SDL.Video.Renderer.Rectangle
                                GHC.Types.Float)
    getPlayerYVel :: m GHC.Types.Float
    getPlayerXVel :: m GHC.Types.Float
    setPlayerPos :: Linear.Affine.Point Linear.V2.V2 GHC.Types.Float
                    -> m ()
    setPlayerYVel :: GHC.Types.Float -> m ()
    translatePlayer :: Linear.V2.V2 GHC.Types.Float -> m ()
    setIsPassingWall :: GHC.Types.Bool -> m ()
    getIsPassingWall :: m GHC.Types.Bool
    jumpPlayer :: m ()
    isPlayerJumping :: m GHC.Types.Bool
    getPlayerAabb :: m Aabb.Aabb
    getPlayerAngle :: m Foreign.C.Types.CDouble
    setPlayerAngle :: Foreign.C.Types.CDouble -> m ()
    {-# MINIMAL getPlayerPos, getPlayerAttributes, getPlayerYVel,
                getPlayerXVel, setPlayerPos, setPlayerYVel, translatePlayer,
                setIsPassingWall, getIsPassingWall, jumpPlayer, isPlayerJumping,
                getPlayerAabb, getPlayerAngle, setPlayerAngle #-}
instance PlayerManager.PlayerManager [GameVars.MahppyBird]
  = PlayerManager.$fPlayerManagerMahppyBird
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

